-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\AN_Simulink_Model_v1\C1_FIlter.vhd
-- Created: 2020-04-16 11:39:35
-- 
-- Generated by MATLAB 9.7 and HDL Coder 3.15
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: C1_FIlter
-- Source Path: AN_Simulink_Model_v1/Auditory Nerve Model/C1 Chirp Filter/C1 FIlter
-- Hierarchy Level: 2
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY C1_FIlter IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        meout                             :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        b0_5                              :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        b0_3                              :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        b0_1                              :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        b1_5                              :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        b1_3                              :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        b1_1                              :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        b2_5                              :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        b2_3                              :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        b2_1                              :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        a2_5                              :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        a2_3                              :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        a2_1                              :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        a1_1                              :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        a1_3                              :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        a1_5                              :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        Out1                              :   OUT   std_logic_vector(31 DOWNTO 0)  -- single
        );
END C1_FIlter;


ARCHITECTURE rtl OF C1_FIlter IS

  -- Component Declarations
  COMPONENT nfp_mul_single
    PORT( nfp_in1                         :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          nfp_in2                         :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          nfp_out                         :   OUT   std_logic_vector(31 DOWNTO 0)  -- single
          );
  END COMPONENT;

  COMPONENT nfp_add_single
    PORT( nfp_in1                         :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          nfp_in2                         :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          nfp_out                         :   OUT   std_logic_vector(31 DOWNTO 0)  -- single
          );
  END COMPONENT;

  COMPONENT nfp_uminus_single
    PORT( nfp_in                          :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          nfp_out                         :   OUT   std_logic_vector(31 DOWNTO 0)  -- single
          );
  END COMPONENT;

  COMPONENT nfp_gain_pow2_single
    PORT( nfp_in1                         :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          nfp_in2                         :   IN    std_logic;  -- ufix1
          nfp_in3                         :   IN    std_logic_vector(8 DOWNTO 0);  -- sfix9
          nfp_out                         :   OUT   std_logic_vector(31 DOWNTO 0)  -- single
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : nfp_mul_single
    USE ENTITY work.nfp_mul_single(rtl);

  FOR ALL : nfp_add_single
    USE ENTITY work.nfp_add_single(rtl);

  FOR ALL : nfp_uminus_single
    USE ENTITY work.nfp_uminus_single(rtl);

  FOR ALL : nfp_gain_pow2_single
    USE ENTITY work.nfp_gain_pow2_single(rtl);

  -- Signals
  SIGNAL Constant1_out1                   : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL b0_5_1                           : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL b0_1_1                           : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL b0_5_2                           : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL b0_3_1                           : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL b0_1_2                           : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL b1_1_1                           : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Unit_Delay_out1                  : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL b2_1_1                           : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Product3_out1                    : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Product2_out1                    : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Unit_Delay1_out1                 : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Product_out1                     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Sum1_out1                        : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Sum2_out1                        : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL a1_1_1                           : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL a2_1_1                           : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Unit_Delay2_out1                 : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Unit_Delay3_out1                 : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Gain2_out1                       : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Product1_out1                    : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Sum3_out1                        : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Gain1_out1                       : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Product4_out1                    : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Sum_out1                         : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL b1_3_1                           : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Product7_out1                    : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL b2_3_1                           : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Product8_out1                    : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Product5_out1                    : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Sum5_out1                        : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Sum6_out1                        : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL a1_3_1                           : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL a2_3_1                           : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Unit_Delay4_out1                 : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Unit_Delay5_out1                 : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Gain5_out1                       : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Product6_out1                    : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Sum7_out1                        : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Gain3_out1                       : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Product9_out1                    : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Sum4_out1                        : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL b1_5_1                           : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Product12_out1                   : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL b2_5_1                           : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Product13_out1                   : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Product10_out1                   : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Sum9_out1                        : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Sum10_out1                       : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL a1_5_1                           : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL a2_5_1                           : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Unit_Delay6_out1                 : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Unit_Delay7_out1                 : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Gain8_out1                       : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Product11_out1                   : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Sum11_out1                       : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Gain7_out1                       : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Product14_out1                   : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Sum8_out1                        : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL b1_1_2                           : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Product17_out1                   : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL b2_1_2                           : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Product18_out1                   : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Product15_out1                   : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Sum15_out1                       : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Sum12_out1                       : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL a1_1_2                           : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL a2_1_2                           : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Unit_Delay8_out1                 : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Unit_Delay9_out1                 : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Gain11_out1                      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Product16_out1                   : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Sum13_out1                       : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Gain10_out1                      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Product19_out1                   : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Sum14_out1                       : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL b1_5_2                           : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Product22_out1                   : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL b2_5_2                           : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL a1_5_2                           : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Product23_out1                   : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Product20_out1                   : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Sum19_out1                       : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Sum16_out1                       : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL a2_5_2                           : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Unit_Delay10_out1                : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Unit_Delay11_out1                : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Gain9_out1                       : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Product21_out1                   : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Sum17_out1                       : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Gain4_out1                       : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Product24_out1                   : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Sum18_out1                       : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Product26_out1                   : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL pw2_sign_const                   : std_logic;  -- ufix1
  SIGNAL pw2_shift_const                  : signed(8 DOWNTO 0);  -- sfix9
  SIGNAL Product25_out1                   : std_logic_vector(31 DOWNTO 0);  -- ufix32

BEGIN
  -- Transfer Inputs via Simulink Port Blocks, for easier tracking
  -- 
  -- 10th Order IIR Bandpass Filter Implemented in Direct Form 1 with Coefficients added via Simulink Port Blocks
  -- 
  -- Scale Output

  u_nfp_mul_comp : nfp_mul_single
    PORT MAP( nfp_in1 => b0_1_2,  -- single
              nfp_in2 => meout,  -- single
              nfp_out => Product3_out1  -- single
              );

  u_nfp_mul_comp_1 : nfp_mul_single
    PORT MAP( nfp_in1 => b1_1_1,  -- single
              nfp_in2 => Unit_Delay_out1,  -- single
              nfp_out => Product2_out1  -- single
              );

  u_nfp_mul_comp_2 : nfp_mul_single
    PORT MAP( nfp_in1 => b2_1_1,  -- single
              nfp_in2 => Unit_Delay1_out1,  -- single
              nfp_out => Product_out1  -- single
              );

  u_nfp_add_comp : nfp_add_single
    PORT MAP( nfp_in1 => Product2_out1,  -- single
              nfp_in2 => Product_out1,  -- single
              nfp_out => Sum1_out1  -- single
              );

  u_nfp_add_comp_1 : nfp_add_single
    PORT MAP( nfp_in1 => Product3_out1,  -- single
              nfp_in2 => Sum1_out1,  -- single
              nfp_out => Sum2_out1  -- single
              );

  u_nfp_uminus_comp : nfp_uminus_single
    PORT MAP( nfp_in => Unit_Delay3_out1,  -- single
              nfp_out => Gain2_out1  -- single
              );

  u_nfp_mul_comp_3 : nfp_mul_single
    PORT MAP( nfp_in1 => a2_1_1,  -- single
              nfp_in2 => Gain2_out1,  -- single
              nfp_out => Product1_out1  -- single
              );

  u_nfp_uminus_comp_1 : nfp_uminus_single
    PORT MAP( nfp_in => Unit_Delay2_out1,  -- single
              nfp_out => Gain1_out1  -- single
              );

  u_nfp_mul_comp_4 : nfp_mul_single
    PORT MAP( nfp_in1 => a1_1_1,  -- single
              nfp_in2 => Gain1_out1,  -- single
              nfp_out => Product4_out1  -- single
              );

  u_nfp_add_comp_2 : nfp_add_single
    PORT MAP( nfp_in1 => Product4_out1,  -- single
              nfp_in2 => Product1_out1,  -- single
              nfp_out => Sum_out1  -- single
              );

  u_nfp_add_comp_3 : nfp_add_single
    PORT MAP( nfp_in1 => Sum2_out1,  -- single
              nfp_in2 => Sum_out1,  -- single
              nfp_out => Sum3_out1  -- single
              );

  u_nfp_mul_comp_5 : nfp_mul_single
    PORT MAP( nfp_in1 => b1_3_1,  -- single
              nfp_in2 => Unit_Delay2_out1,  -- single
              nfp_out => Product7_out1  -- single
              );

  u_nfp_mul_comp_6 : nfp_mul_single
    PORT MAP( nfp_in1 => b0_3_1,  -- single
              nfp_in2 => Sum3_out1,  -- single
              nfp_out => Product8_out1  -- single
              );

  u_nfp_mul_comp_7 : nfp_mul_single
    PORT MAP( nfp_in1 => b2_3_1,  -- single
              nfp_in2 => Unit_Delay3_out1,  -- single
              nfp_out => Product5_out1  -- single
              );

  u_nfp_add_comp_4 : nfp_add_single
    PORT MAP( nfp_in1 => Product7_out1,  -- single
              nfp_in2 => Product5_out1,  -- single
              nfp_out => Sum5_out1  -- single
              );

  u_nfp_add_comp_5 : nfp_add_single
    PORT MAP( nfp_in1 => Product8_out1,  -- single
              nfp_in2 => Sum5_out1,  -- single
              nfp_out => Sum6_out1  -- single
              );

  u_nfp_uminus_comp_2 : nfp_uminus_single
    PORT MAP( nfp_in => Unit_Delay5_out1,  -- single
              nfp_out => Gain5_out1  -- single
              );

  u_nfp_mul_comp_8 : nfp_mul_single
    PORT MAP( nfp_in1 => a2_3_1,  -- single
              nfp_in2 => Gain5_out1,  -- single
              nfp_out => Product6_out1  -- single
              );

  u_nfp_uminus_comp_3 : nfp_uminus_single
    PORT MAP( nfp_in => Unit_Delay4_out1,  -- single
              nfp_out => Gain3_out1  -- single
              );

  u_nfp_mul_comp_9 : nfp_mul_single
    PORT MAP( nfp_in1 => a1_3_1,  -- single
              nfp_in2 => Gain3_out1,  -- single
              nfp_out => Product9_out1  -- single
              );

  u_nfp_add_comp_6 : nfp_add_single
    PORT MAP( nfp_in1 => Product9_out1,  -- single
              nfp_in2 => Product6_out1,  -- single
              nfp_out => Sum4_out1  -- single
              );

  u_nfp_add_comp_7 : nfp_add_single
    PORT MAP( nfp_in1 => Sum6_out1,  -- single
              nfp_in2 => Sum4_out1,  -- single
              nfp_out => Sum7_out1  -- single
              );

  u_nfp_mul_comp_10 : nfp_mul_single
    PORT MAP( nfp_in1 => b1_5_1,  -- single
              nfp_in2 => Unit_Delay4_out1,  -- single
              nfp_out => Product12_out1  -- single
              );

  u_nfp_mul_comp_11 : nfp_mul_single
    PORT MAP( nfp_in1 => b0_5_2,  -- single
              nfp_in2 => Sum7_out1,  -- single
              nfp_out => Product13_out1  -- single
              );

  u_nfp_mul_comp_12 : nfp_mul_single
    PORT MAP( nfp_in1 => b2_5_1,  -- single
              nfp_in2 => Unit_Delay5_out1,  -- single
              nfp_out => Product10_out1  -- single
              );

  u_nfp_add_comp_8 : nfp_add_single
    PORT MAP( nfp_in1 => Product12_out1,  -- single
              nfp_in2 => Product10_out1,  -- single
              nfp_out => Sum9_out1  -- single
              );

  u_nfp_add_comp_9 : nfp_add_single
    PORT MAP( nfp_in1 => Product13_out1,  -- single
              nfp_in2 => Sum9_out1,  -- single
              nfp_out => Sum10_out1  -- single
              );

  u_nfp_uminus_comp_4 : nfp_uminus_single
    PORT MAP( nfp_in => Unit_Delay7_out1,  -- single
              nfp_out => Gain8_out1  -- single
              );

  u_nfp_mul_comp_13 : nfp_mul_single
    PORT MAP( nfp_in1 => a2_5_1,  -- single
              nfp_in2 => Gain8_out1,  -- single
              nfp_out => Product11_out1  -- single
              );

  u_nfp_uminus_comp_5 : nfp_uminus_single
    PORT MAP( nfp_in => Unit_Delay6_out1,  -- single
              nfp_out => Gain7_out1  -- single
              );

  u_nfp_mul_comp_14 : nfp_mul_single
    PORT MAP( nfp_in1 => a1_5_1,  -- single
              nfp_in2 => Gain7_out1,  -- single
              nfp_out => Product14_out1  -- single
              );

  u_nfp_add_comp_10 : nfp_add_single
    PORT MAP( nfp_in1 => Product14_out1,  -- single
              nfp_in2 => Product11_out1,  -- single
              nfp_out => Sum8_out1  -- single
              );

  u_nfp_add_comp_11 : nfp_add_single
    PORT MAP( nfp_in1 => Sum10_out1,  -- single
              nfp_in2 => Sum8_out1,  -- single
              nfp_out => Sum11_out1  -- single
              );

  u_nfp_mul_comp_15 : nfp_mul_single
    PORT MAP( nfp_in1 => b1_1_2,  -- single
              nfp_in2 => Unit_Delay6_out1,  -- single
              nfp_out => Product17_out1  -- single
              );

  u_nfp_mul_comp_16 : nfp_mul_single
    PORT MAP( nfp_in1 => b0_1_1,  -- single
              nfp_in2 => Sum11_out1,  -- single
              nfp_out => Product18_out1  -- single
              );

  u_nfp_mul_comp_17 : nfp_mul_single
    PORT MAP( nfp_in1 => b2_1_2,  -- single
              nfp_in2 => Unit_Delay7_out1,  -- single
              nfp_out => Product15_out1  -- single
              );

  u_nfp_add_comp_12 : nfp_add_single
    PORT MAP( nfp_in1 => Product17_out1,  -- single
              nfp_in2 => Product15_out1,  -- single
              nfp_out => Sum15_out1  -- single
              );

  u_nfp_add_comp_13 : nfp_add_single
    PORT MAP( nfp_in1 => Product18_out1,  -- single
              nfp_in2 => Sum15_out1,  -- single
              nfp_out => Sum12_out1  -- single
              );

  u_nfp_uminus_comp_6 : nfp_uminus_single
    PORT MAP( nfp_in => Unit_Delay9_out1,  -- single
              nfp_out => Gain11_out1  -- single
              );

  u_nfp_mul_comp_18 : nfp_mul_single
    PORT MAP( nfp_in1 => a2_1_2,  -- single
              nfp_in2 => Gain11_out1,  -- single
              nfp_out => Product16_out1  -- single
              );

  u_nfp_uminus_comp_7 : nfp_uminus_single
    PORT MAP( nfp_in => Unit_Delay8_out1,  -- single
              nfp_out => Gain10_out1  -- single
              );

  u_nfp_mul_comp_19 : nfp_mul_single
    PORT MAP( nfp_in1 => a1_1_2,  -- single
              nfp_in2 => Gain10_out1,  -- single
              nfp_out => Product19_out1  -- single
              );

  u_nfp_add_comp_14 : nfp_add_single
    PORT MAP( nfp_in1 => Product19_out1,  -- single
              nfp_in2 => Product16_out1,  -- single
              nfp_out => Sum14_out1  -- single
              );

  u_nfp_add_comp_15 : nfp_add_single
    PORT MAP( nfp_in1 => Sum12_out1,  -- single
              nfp_in2 => Sum14_out1,  -- single
              nfp_out => Sum13_out1  -- single
              );

  u_nfp_mul_comp_20 : nfp_mul_single
    PORT MAP( nfp_in1 => b1_5_2,  -- single
              nfp_in2 => Unit_Delay8_out1,  -- single
              nfp_out => Product22_out1  -- single
              );

  u_nfp_mul_comp_21 : nfp_mul_single
    PORT MAP( nfp_in1 => b0_5_1,  -- single
              nfp_in2 => Sum13_out1,  -- single
              nfp_out => Product23_out1  -- single
              );

  u_nfp_mul_comp_22 : nfp_mul_single
    PORT MAP( nfp_in1 => b2_5_2,  -- single
              nfp_in2 => Unit_Delay9_out1,  -- single
              nfp_out => Product20_out1  -- single
              );

  u_nfp_add_comp_16 : nfp_add_single
    PORT MAP( nfp_in1 => Product22_out1,  -- single
              nfp_in2 => Product20_out1,  -- single
              nfp_out => Sum19_out1  -- single
              );

  u_nfp_add_comp_17 : nfp_add_single
    PORT MAP( nfp_in1 => Product23_out1,  -- single
              nfp_in2 => Sum19_out1,  -- single
              nfp_out => Sum16_out1  -- single
              );

  u_nfp_uminus_comp_8 : nfp_uminus_single
    PORT MAP( nfp_in => Unit_Delay11_out1,  -- single
              nfp_out => Gain9_out1  -- single
              );

  u_nfp_mul_comp_23 : nfp_mul_single
    PORT MAP( nfp_in1 => a2_5_2,  -- single
              nfp_in2 => Gain9_out1,  -- single
              nfp_out => Product21_out1  -- single
              );

  u_nfp_uminus_comp_9 : nfp_uminus_single
    PORT MAP( nfp_in => Unit_Delay10_out1,  -- single
              nfp_out => Gain4_out1  -- single
              );

  u_nfp_mul_comp_24 : nfp_mul_single
    PORT MAP( nfp_in1 => a1_5_2,  -- single
              nfp_in2 => Gain4_out1,  -- single
              nfp_out => Product24_out1  -- single
              );

  u_nfp_add_comp_18 : nfp_add_single
    PORT MAP( nfp_in1 => Product24_out1,  -- single
              nfp_in2 => Product21_out1,  -- single
              nfp_out => Sum18_out1  -- single
              );

  u_nfp_add_comp_19 : nfp_add_single
    PORT MAP( nfp_in1 => Sum16_out1,  -- single
              nfp_in2 => Sum18_out1,  -- single
              nfp_out => Sum17_out1  -- single
              );

  u_nfp_mul_comp_25 : nfp_mul_single
    PORT MAP( nfp_in1 => Constant1_out1,  -- single
              nfp_in2 => Sum17_out1,  -- single
              nfp_out => Product26_out1  -- single
              );

  u_nfp_gain_pow2_single : nfp_gain_pow2_single
    PORT MAP( nfp_in1 => Product26_out1,  -- single
              nfp_in2 => pw2_sign_const,  -- ufix1
              nfp_in3 => std_logic_vector(pw2_shift_const),  -- sfix9
              nfp_out => Product25_out1  -- single
              );

  Constant1_out1 <= X"5af1801e";

  b0_5_1 <= b0_5;

  b0_1_1 <= b0_1;

  b0_5_2 <= b0_5;

  b0_3_1 <= b0_3;

  b0_1_2 <= b0_1;

  b1_1_1 <= b1_1;

  Unit_Delay_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Unit_Delay_out1 <= X"00000000";
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Unit_Delay_out1 <= meout;
      END IF;
    END IF;
  END PROCESS Unit_Delay_process;


  b2_1_1 <= b2_1;

  Unit_Delay1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Unit_Delay1_out1 <= X"00000000";
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Unit_Delay1_out1 <= Unit_Delay_out1;
      END IF;
    END IF;
  END PROCESS Unit_Delay1_process;


  a1_1_1 <= a1_1;

  a2_1_1 <= a2_1;

  Unit_Delay3_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Unit_Delay3_out1 <= X"00000000";
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Unit_Delay3_out1 <= Unit_Delay2_out1;
      END IF;
    END IF;
  END PROCESS Unit_Delay3_process;


  Unit_Delay2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Unit_Delay2_out1 <= X"00000000";
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Unit_Delay2_out1 <= Sum3_out1;
      END IF;
    END IF;
  END PROCESS Unit_Delay2_process;


  b1_3_1 <= b1_3;

  b2_3_1 <= b2_3;

  a1_3_1 <= a1_3;

  a2_3_1 <= a2_3;

  Unit_Delay5_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Unit_Delay5_out1 <= X"00000000";
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Unit_Delay5_out1 <= Unit_Delay4_out1;
      END IF;
    END IF;
  END PROCESS Unit_Delay5_process;


  Unit_Delay4_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Unit_Delay4_out1 <= X"00000000";
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Unit_Delay4_out1 <= Sum7_out1;
      END IF;
    END IF;
  END PROCESS Unit_Delay4_process;


  b1_5_1 <= b1_5;

  b2_5_1 <= b2_5;

  a1_5_1 <= a1_5;

  a2_5_1 <= a2_5;

  Unit_Delay7_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Unit_Delay7_out1 <= X"00000000";
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Unit_Delay7_out1 <= Unit_Delay6_out1;
      END IF;
    END IF;
  END PROCESS Unit_Delay7_process;


  Unit_Delay6_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Unit_Delay6_out1 <= X"00000000";
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Unit_Delay6_out1 <= Sum11_out1;
      END IF;
    END IF;
  END PROCESS Unit_Delay6_process;


  b1_1_2 <= b1_1;

  b2_1_2 <= b2_1;

  a1_1_2 <= a1_1;

  a2_1_2 <= a2_1;

  Unit_Delay9_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Unit_Delay9_out1 <= X"00000000";
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Unit_Delay9_out1 <= Unit_Delay8_out1;
      END IF;
    END IF;
  END PROCESS Unit_Delay9_process;


  Unit_Delay8_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Unit_Delay8_out1 <= X"00000000";
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Unit_Delay8_out1 <= Sum13_out1;
      END IF;
    END IF;
  END PROCESS Unit_Delay8_process;


  b1_5_2 <= b1_5;

  b2_5_2 <= b2_5;

  a1_5_2 <= a1_5;

  a2_5_2 <= a2_5;

  Unit_Delay11_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Unit_Delay11_out1 <= X"00000000";
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Unit_Delay11_out1 <= Unit_Delay10_out1;
      END IF;
    END IF;
  END PROCESS Unit_Delay11_process;


  Unit_Delay10_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Unit_Delay10_out1 <= X"00000000";
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Unit_Delay10_out1 <= Sum17_out1;
      END IF;
    END IF;
  END PROCESS Unit_Delay10_process;


  pw2_sign_const <= '0';

  pw2_shift_const <= to_signed(-16#002#, 9);

  Out1 <= Product25_out1;

END rtl;

