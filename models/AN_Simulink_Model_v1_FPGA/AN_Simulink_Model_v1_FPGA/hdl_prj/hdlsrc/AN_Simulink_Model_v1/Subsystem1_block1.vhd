-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\AN_Simulink_Model_v1\Subsystem1_block1.vhd
-- Created: 2020-04-16 16:05:26
-- 
-- Generated by MATLAB 9.7 and HDL Coder 3.15
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: Subsystem1_block1
-- Source Path: AN_Simulink_Model_v1/Auditory Nerve Model/Subsystem1
-- Hierarchy Level: 1
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY Subsystem1_block1 IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        wbout                             :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        tauc1                             :   OUT   std_logic_vector(31 DOWNTO 0)  -- single
        );
END Subsystem1_block1;


ARCHITECTURE rtl OF Subsystem1_block1 IS

  -- Component Declarations
  COMPONENT OHC_NL_Boltzman_Function
    PORT( stimulus                        :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          output                          :   OUT   std_logic_vector(31 DOWNTO 0)  -- single
          );
  END COMPONENT;

  COMPONENT OHC_LP_Filter
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          stimulus                        :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          output                          :   OUT   std_logic_vector(31 DOWNTO 0)  -- single
          );
  END COMPONENT;

  COMPONENT NL_After_OHC_Function
    PORT( stimulus                        :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          output                          :   OUT   std_logic_vector(31 DOWNTO 0)  -- single
          );
  END COMPONENT;

  COMPONENT Calculate_tauc1
    PORT( In1                             :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          Out1                            :   OUT   std_logic_vector(31 DOWNTO 0)  -- single
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : OHC_NL_Boltzman_Function
    USE ENTITY work.OHC_NL_Boltzman_Function(rtl);

  FOR ALL : OHC_LP_Filter
    USE ENTITY work.OHC_LP_Filter(rtl);

  FOR ALL : NL_After_OHC_Function
    USE ENTITY work.NL_After_OHC_Function(rtl);

  FOR ALL : Calculate_tauc1
    USE ENTITY work.Calculate_tauc1(rtl);

  -- Signals
  SIGNAL ohcnonlinout                     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL ohcout                           : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL tmptauc1                         : std_logic_vector(31 DOWNTO 0);  -- ufix32

BEGIN
  -- OHC Lowpass Filter
  -- 
  -- Inputs: OHC Nonlinear Output (ohcnonlinout)
  -- 
  -- Output: LP Filtered OHC Output (ohcout)
  -- 
  -- - 2nd Order IIR Lowpass Filter
  -- 
  -- - Coefficients are determined in the init script
  -- 
  -- - Implemented w/ Simulink biquad
  -- 
  -- Nonlinear Function After OHC
  -- 
  -- Input: LP Filtered OHC Output (ohcout)
  -- 
  -- Output: Temporary C1 Time Constant 					(tmptauc1)
  -- 
  -- - Nonlinear Function designed to convert the Lowpass Filter Output to a Time Varying Constant for the C1 Filter
  -- 
  -- OHC Nonlinear Boltzman Function
  -- 
  -- Input: Wideband Output (wbout)
  -- 
  -- Output: OHC Nonlinear Output (ohcnonlinout)
  -- 
  -- - 2nd Order Boltzman Function
  -- 
  -- Calculate C1 Time Constant
  -- 
  -- Input: Temporary C1 Time Constant 					    (tmptauc1)
  -- 
  -- Output: C1 Time Constant (tauc1)
  -- 
  -- - A simple calculation to get the final C1 time constant value

  u_OHC_NL_Boltzman_Function : OHC_NL_Boltzman_Function
    PORT MAP( stimulus => wbout,  -- single
              output => ohcnonlinout  -- single
              );

  u_OHC_LP_Filter : OHC_LP_Filter
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              stimulus => ohcnonlinout,  -- single
              output => ohcout  -- single
              );

  u_NL_After_OHC_Function : NL_After_OHC_Function
    PORT MAP( stimulus => ohcout,  -- single
              output => tmptauc1  -- single
              );

  u_Calculate_tauc1 : Calculate_tauc1
    PORT MAP( In1 => tmptauc1,  -- single
              Out1 => tauc1  -- single
              );

END rtl;

