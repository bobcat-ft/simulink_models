-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\AN_Simulink_Model_v1\Calculate_tauc1.vhd
-- Created: 2020-04-16 16:05:26
-- 
-- Generated by MATLAB 9.7 and HDL Coder 3.15
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: Calculate_tauc1
-- Source Path: AN_Simulink_Model_v1/Auditory Nerve Model/Subsystem1/Calculate tauc1
-- Hierarchy Level: 2
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY Calculate_tauc1 IS
  PORT( In1                               :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        Out1                              :   OUT   std_logic_vector(31 DOWNTO 0)  -- single
        );
END Calculate_tauc1;


ARCHITECTURE rtl OF Calculate_tauc1 IS

  -- Component Declarations
  COMPONENT nfp_sub_single
    PORT( nfp_in1                         :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          nfp_in2                         :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          nfp_out                         :   OUT   std_logic_vector(31 DOWNTO 0)  -- single
          );
  END COMPONENT;

  COMPONENT nfp_gain_pow2_single
    PORT( nfp_in1                         :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          nfp_in2                         :   IN    std_logic;  -- ufix1
          nfp_in3                         :   IN    std_logic_vector(8 DOWNTO 0);  -- sfix9
          nfp_out                         :   OUT   std_logic_vector(31 DOWNTO 0)  -- single
          );
  END COMPONENT;

  COMPONENT nfp_add_single
    PORT( nfp_in1                         :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          nfp_in2                         :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          nfp_out                         :   OUT   std_logic_vector(31 DOWNTO 0)  -- single
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : nfp_sub_single
    USE ENTITY work.nfp_sub_single(rtl);

  FOR ALL : nfp_gain_pow2_single
    USE ENTITY work.nfp_gain_pow2_single(rtl);

  FOR ALL : nfp_add_single
    USE ENTITY work.nfp_add_single(rtl);

  -- Signals
  SIGNAL Constant1_out1                   : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Subtract_out1                    : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL pw2_sign_const                   : std_logic;  -- ufix1
  SIGNAL pw2_shift_const                  : signed(8 DOWNTO 0);  -- sfix9
  SIGNAL Product_out1                     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Constant2_out1                   : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL tauc1                            : std_logic_vector(31 DOWNTO 0);  -- ufix32

BEGIN
  -- Calculate final Time Constant which will be fed forward into C1 filter

  u_nfp_sub_comp : nfp_sub_single
    PORT MAP( nfp_in1 => In1,  -- single
              nfp_in2 => Constant1_out1,  -- single
              nfp_out => Subtract_out1  -- single
              );

  u_nfp_gain_pow2_single : nfp_gain_pow2_single
    PORT MAP( nfp_in1 => Subtract_out1,  -- single
              nfp_in2 => pw2_sign_const,  -- ufix1
              nfp_in3 => std_logic_vector(pw2_shift_const),  -- sfix9
              nfp_out => Product_out1  -- single
              );

  u_nfp_add_comp : nfp_add_single
    PORT MAP( nfp_in1 => Product_out1,  -- single
              nfp_in2 => Constant2_out1,  -- single
              nfp_out => tauc1  -- single
              );

  Constant1_out1 <= X"39f2ccc5";

  pw2_sign_const <= '0';

  pw2_shift_const <= to_signed(16#000#, 9);

  Constant2_out1 <= X"39f2ccc5";

  Out1 <= tauc1;

END rtl;

