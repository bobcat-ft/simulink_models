-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\AN_Simulink_Model_v1\C1_Chirp_Filter.vhd
-- Created: 2020-04-16 16:05:25
-- 
-- Generated by MATLAB 9.7 and HDL Coder 3.15
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: C1_Chirp_Filter
-- Source Path: AN_Simulink_Model_v1/Auditory Nerve Model/C1 Chirp Filter
-- Hierarchy Level: 1
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY C1_Chirp_Filter IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        meout                             :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        tauc1                             :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        output                            :   OUT   std_logic_vector(31 DOWNTO 0)  -- single
        );
END C1_Chirp_Filter;


ARCHITECTURE rtl OF C1_Chirp_Filter IS

  -- Component Declarations
  COMPONENT Calculate_rsigma
    PORT( tauc1                           :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          rsigma                          :   OUT   std_logic_vector(31 DOWNTO 0)  -- single
          );
  END COMPONENT;

  COMPONENT Get_C1_Coefficients
    PORT( rsigma                          :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          b0_5                            :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
          b0_3                            :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
          b0_1                            :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
          b1_5                            :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
          b1_3                            :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
          b1_1                            :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
          b2_5                            :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
          b2_3                            :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
          b2_1                            :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
          a2_5                            :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
          a2_3                            :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
          a2_1                            :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
          a1_1                            :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
          a1_3                            :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
          a1_5                            :   OUT   std_logic_vector(31 DOWNTO 0)  -- single
          );
  END COMPONENT;

  COMPONENT C1_FIlter
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          meout                           :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          b0_5                            :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          b0_3                            :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          b0_1                            :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          b1_5                            :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          b1_3                            :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          b1_1                            :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          b2_5                            :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          b2_3                            :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          b2_1                            :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          a2_5                            :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          a2_3                            :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          a2_1                            :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          a1_1                            :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          a1_3                            :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          a1_5                            :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          Out1                            :   OUT   std_logic_vector(31 DOWNTO 0)  -- single
          );
  END COMPONENT;

  COMPONENT Calculate_C1filterout
    PORT( C1filterouttmp                  :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          C1filterout                     :   OUT   std_logic_vector(31 DOWNTO 0)  -- single
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : Calculate_rsigma
    USE ENTITY work.Calculate_rsigma(rtl);

  FOR ALL : Get_C1_Coefficients
    USE ENTITY work.Get_C1_Coefficients(rtl);

  FOR ALL : C1_FIlter
    USE ENTITY work.C1_FIlter(rtl);

  FOR ALL : Calculate_C1filterout
    USE ENTITY work.Calculate_C1filterout(rtl);

  -- Signals
  SIGNAL rsigma                           : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL b0_5                             : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL b0_3                             : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL b0_1                             : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL b1_5                             : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL b1_3                             : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL b1_1                             : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL b2_5                             : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL b2_3                             : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL b2_1                             : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL a2_5                             : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL a2_3                             : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL a2_1                             : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL a1_1                             : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL a1_3                             : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL a1_5                             : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL c1filterouttmp                   : std_logic_vector(31 DOWNTO 0);  -- ufix32

BEGIN
  -- C1 Chirp Filter:
  -- 
  -- Inputs: ME Filtered Signal (meout)
  -- 		   C1 Coefficients (a&b)
  -- 		   Normalizing Gain (norm_gain)
  -- 		   
  -- Output: C1 Filtered Signal (c1filterout)
  -- 
  -- - 10th Order IIR Bandpass Filter
  -- 
  -- - Coefficients are determined in previous Get C1 	    	  Coefficients block
  -- 
  -- - Implemented w/ Simulink biquad block
  -- 
  -- Get C1 Coefficients
  -- 
  -- Input: Pole-Shifting Feedback Parameter (rsigma)
  -- 		   
  -- Outputs: C1 Coefficients (a&b)
  -- 			 Normalizing Gain (norm_gain)
  -- 
  -- - Consists of various calculations to shift continuous-time pole locations according to rsigma feedback, then apply 
  -- a bilinear transformation to bring the poles to the digital space before finding the coefficients for the C1 filter
  -- 
  -- Calculate C1 Filter Output
  -- 
  -- - Simply scale the output by cihc
  -- 
  -- Calculate Pole-Shifting Parameter rsigma
  -- 
  -- Input: C1 Feedback Time Constant (tauc1)
  -- 		   
  -- Outputs: Pole-Shifting Parameter rsigma
  -- 
  -- - Simple calculation to find rsigma from time constant feedback input

  u_Calculate_rsigma : Calculate_rsigma
    PORT MAP( tauc1 => tauc1,  -- single
              rsigma => rsigma  -- single
              );

  u_Get_C1_Coefficients : Get_C1_Coefficients
    PORT MAP( rsigma => rsigma,  -- single
              b0_5 => b0_5,  -- single
              b0_3 => b0_3,  -- single
              b0_1 => b0_1,  -- single
              b1_5 => b1_5,  -- single
              b1_3 => b1_3,  -- single
              b1_1 => b1_1,  -- single
              b2_5 => b2_5,  -- single
              b2_3 => b2_3,  -- single
              b2_1 => b2_1,  -- single
              a2_5 => a2_5,  -- single
              a2_3 => a2_3,  -- single
              a2_1 => a2_1,  -- single
              a1_1 => a1_1,  -- single
              a1_3 => a1_3,  -- single
              a1_5 => a1_5  -- single
              );

  u_C1_FIlter : C1_FIlter
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              meout => meout,  -- single
              b0_5 => b0_5,  -- single
              b0_3 => b0_3,  -- single
              b0_1 => b0_1,  -- single
              b1_5 => b1_5,  -- single
              b1_3 => b1_3,  -- single
              b1_1 => b1_1,  -- single
              b2_5 => b2_5,  -- single
              b2_3 => b2_3,  -- single
              b2_1 => b2_1,  -- single
              a2_5 => a2_5,  -- single
              a2_3 => a2_3,  -- single
              a2_1 => a2_1,  -- single
              a1_1 => a1_1,  -- single
              a1_3 => a1_3,  -- single
              a1_5 => a1_5,  -- single
              Out1 => c1filterouttmp  -- single
              );

  u_Calculate_C1filterout : Calculate_C1filterout
    PORT MAP( C1filterouttmp => c1filterouttmp,  -- single
              C1filterout => output  -- single
              );


END rtl;

