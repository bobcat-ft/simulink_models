-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\NL_Before_PLA\NL_Before_PLA_Singles.vhd
-- Created: 2020-04-14 17:25:36
-- 
-- Generated by MATLAB 9.7 and HDL Coder 3.15
-- 
-- 
-- -------------------------------------------------------------
-- Rate and Clocking Details
-- -------------------------------------------------------------
-- Model base rate: 2.08333e-05
-- Target subsystem base rate: 2.08333e-05
-- 
-- 
-- Clock Enable  Sample Time
-- -------------------------------------------------------------
-- ce_out        2.08333e-05
-- -------------------------------------------------------------
-- 
-- 
-- Output Signal                 Clock Enable  Sample Time
-- -------------------------------------------------------------
-- powerLawIn                    ce_out        2.08333e-05
-- -------------------------------------------------------------
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: NL_Before_PLA_Singles
-- Source Path: NL_Before_PLA/NL Before PLA Singles
-- Hierarchy Level: 0
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY NL_Before_PLA_Singles IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        clk_enable                        :   IN    std_logic;
        ihcout                            :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        ce_out                            :   OUT   std_logic;
        powerLawIn                        :   OUT   std_logic_vector(31 DOWNTO 0)  -- single
        );
END NL_Before_PLA_Singles;


ARCHITECTURE rtl OF NL_Before_PLA_Singles IS

  -- Component Declarations
  COMPONENT nfp_abs_single
    PORT( nfp_in                          :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          nfp_out                         :   OUT   std_logic_vector(31 DOWNTO 0)  -- single
          );
  END COMPONENT;

  COMPONENT nfp_relop_single
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          nfp_in1                         :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          nfp_in2                         :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          nfp_out1                        :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT Subsystem
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          In1                             :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          In2                             :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          Enable                          :   IN    std_logic;
          mappingOut                      :   OUT   std_logic_vector(31 DOWNTO 0)  -- single
          );
  END COMPONENT;

  COMPONENT nfp_add_single
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          nfp_in1                         :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          nfp_in2                         :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          nfp_out                         :   OUT   std_logic_vector(31 DOWNTO 0)  -- single
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : nfp_abs_single
    USE ENTITY work.nfp_abs_single(rtl);

  FOR ALL : nfp_relop_single
    USE ENTITY work.nfp_relop_single(rtl);

  FOR ALL : Subsystem
    USE ENTITY work.Subsystem(rtl);

  FOR ALL : nfp_add_single
    USE ENTITY work.nfp_add_single(rtl);

  -- Signals
  SIGNAL enb                              : std_logic;
  SIGNAL Abs_out1                         : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL const                            : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Compare_To_Zero_out1             : std_logic;
  SIGNAL delayMatch_reg                   : std_logic_vector(0 TO 56);  -- ufix1 [57]
  SIGNAL delayMatch_reg_next              : std_logic_vector(0 TO 56);  -- ufix1 [57]
  SIGNAL Compare_To_Zero_out1_1           : std_logic;
  SIGNAL Constant6_out1                   : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL ihcout_1                         : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Abs_out1_1                       : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Subsystem_out1                   : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_out1                      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Constant7_out1                   : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Add2_out1                        : std_logic_vector(31 DOWNTO 0);  -- ufix32

BEGIN
  u_nfp_abs_comp : nfp_abs_single
    PORT MAP( nfp_in => ihcout,  -- single
              nfp_out => Abs_out1  -- single
              );

  u_nfp_relop_comp : nfp_relop_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in1 => Abs_out1,  -- single
              nfp_in2 => const,  -- single
              nfp_out1 => Compare_To_Zero_out1
              );

  u_Subsystem : Subsystem
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              In1 => ihcout_1,  -- single
              In2 => Abs_out1_1,  -- single
              Enable => Compare_To_Zero_out1,
              mappingOut => Subsystem_out1  -- single
              );

  u_nfp_add_comp : nfp_add_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in1 => Switch_out1,  -- single
              nfp_in2 => Constant7_out1,  -- single
              nfp_out => Add2_out1  -- single
              );

  const <= X"00000000";

  enb <= clk_enable;

  delayMatch_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch_reg(0) <= '0';
      delayMatch_reg(1) <= '0';
      delayMatch_reg(2) <= '0';
      delayMatch_reg(3) <= '0';
      delayMatch_reg(4) <= '0';
      delayMatch_reg(5) <= '0';
      delayMatch_reg(6) <= '0';
      delayMatch_reg(7) <= '0';
      delayMatch_reg(8) <= '0';
      delayMatch_reg(9) <= '0';
      delayMatch_reg(10) <= '0';
      delayMatch_reg(11) <= '0';
      delayMatch_reg(12) <= '0';
      delayMatch_reg(13) <= '0';
      delayMatch_reg(14) <= '0';
      delayMatch_reg(15) <= '0';
      delayMatch_reg(16) <= '0';
      delayMatch_reg(17) <= '0';
      delayMatch_reg(18) <= '0';
      delayMatch_reg(19) <= '0';
      delayMatch_reg(20) <= '0';
      delayMatch_reg(21) <= '0';
      delayMatch_reg(22) <= '0';
      delayMatch_reg(23) <= '0';
      delayMatch_reg(24) <= '0';
      delayMatch_reg(25) <= '0';
      delayMatch_reg(26) <= '0';
      delayMatch_reg(27) <= '0';
      delayMatch_reg(28) <= '0';
      delayMatch_reg(29) <= '0';
      delayMatch_reg(30) <= '0';
      delayMatch_reg(31) <= '0';
      delayMatch_reg(32) <= '0';
      delayMatch_reg(33) <= '0';
      delayMatch_reg(34) <= '0';
      delayMatch_reg(35) <= '0';
      delayMatch_reg(36) <= '0';
      delayMatch_reg(37) <= '0';
      delayMatch_reg(38) <= '0';
      delayMatch_reg(39) <= '0';
      delayMatch_reg(40) <= '0';
      delayMatch_reg(41) <= '0';
      delayMatch_reg(42) <= '0';
      delayMatch_reg(43) <= '0';
      delayMatch_reg(44) <= '0';
      delayMatch_reg(45) <= '0';
      delayMatch_reg(46) <= '0';
      delayMatch_reg(47) <= '0';
      delayMatch_reg(48) <= '0';
      delayMatch_reg(49) <= '0';
      delayMatch_reg(50) <= '0';
      delayMatch_reg(51) <= '0';
      delayMatch_reg(52) <= '0';
      delayMatch_reg(53) <= '0';
      delayMatch_reg(54) <= '0';
      delayMatch_reg(55) <= '0';
      delayMatch_reg(56) <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        delayMatch_reg(0) <= delayMatch_reg_next(0);
        delayMatch_reg(1) <= delayMatch_reg_next(1);
        delayMatch_reg(2) <= delayMatch_reg_next(2);
        delayMatch_reg(3) <= delayMatch_reg_next(3);
        delayMatch_reg(4) <= delayMatch_reg_next(4);
        delayMatch_reg(5) <= delayMatch_reg_next(5);
        delayMatch_reg(6) <= delayMatch_reg_next(6);
        delayMatch_reg(7) <= delayMatch_reg_next(7);
        delayMatch_reg(8) <= delayMatch_reg_next(8);
        delayMatch_reg(9) <= delayMatch_reg_next(9);
        delayMatch_reg(10) <= delayMatch_reg_next(10);
        delayMatch_reg(11) <= delayMatch_reg_next(11);
        delayMatch_reg(12) <= delayMatch_reg_next(12);
        delayMatch_reg(13) <= delayMatch_reg_next(13);
        delayMatch_reg(14) <= delayMatch_reg_next(14);
        delayMatch_reg(15) <= delayMatch_reg_next(15);
        delayMatch_reg(16) <= delayMatch_reg_next(16);
        delayMatch_reg(17) <= delayMatch_reg_next(17);
        delayMatch_reg(18) <= delayMatch_reg_next(18);
        delayMatch_reg(19) <= delayMatch_reg_next(19);
        delayMatch_reg(20) <= delayMatch_reg_next(20);
        delayMatch_reg(21) <= delayMatch_reg_next(21);
        delayMatch_reg(22) <= delayMatch_reg_next(22);
        delayMatch_reg(23) <= delayMatch_reg_next(23);
        delayMatch_reg(24) <= delayMatch_reg_next(24);
        delayMatch_reg(25) <= delayMatch_reg_next(25);
        delayMatch_reg(26) <= delayMatch_reg_next(26);
        delayMatch_reg(27) <= delayMatch_reg_next(27);
        delayMatch_reg(28) <= delayMatch_reg_next(28);
        delayMatch_reg(29) <= delayMatch_reg_next(29);
        delayMatch_reg(30) <= delayMatch_reg_next(30);
        delayMatch_reg(31) <= delayMatch_reg_next(31);
        delayMatch_reg(32) <= delayMatch_reg_next(32);
        delayMatch_reg(33) <= delayMatch_reg_next(33);
        delayMatch_reg(34) <= delayMatch_reg_next(34);
        delayMatch_reg(35) <= delayMatch_reg_next(35);
        delayMatch_reg(36) <= delayMatch_reg_next(36);
        delayMatch_reg(37) <= delayMatch_reg_next(37);
        delayMatch_reg(38) <= delayMatch_reg_next(38);
        delayMatch_reg(39) <= delayMatch_reg_next(39);
        delayMatch_reg(40) <= delayMatch_reg_next(40);
        delayMatch_reg(41) <= delayMatch_reg_next(41);
        delayMatch_reg(42) <= delayMatch_reg_next(42);
        delayMatch_reg(43) <= delayMatch_reg_next(43);
        delayMatch_reg(44) <= delayMatch_reg_next(44);
        delayMatch_reg(45) <= delayMatch_reg_next(45);
        delayMatch_reg(46) <= delayMatch_reg_next(46);
        delayMatch_reg(47) <= delayMatch_reg_next(47);
        delayMatch_reg(48) <= delayMatch_reg_next(48);
        delayMatch_reg(49) <= delayMatch_reg_next(49);
        delayMatch_reg(50) <= delayMatch_reg_next(50);
        delayMatch_reg(51) <= delayMatch_reg_next(51);
        delayMatch_reg(52) <= delayMatch_reg_next(52);
        delayMatch_reg(53) <= delayMatch_reg_next(53);
        delayMatch_reg(54) <= delayMatch_reg_next(54);
        delayMatch_reg(55) <= delayMatch_reg_next(55);
        delayMatch_reg(56) <= delayMatch_reg_next(56);
      END IF;
    END IF;
  END PROCESS delayMatch_process;

  Compare_To_Zero_out1_1 <= delayMatch_reg(56);
  delayMatch_reg_next(0) <= Compare_To_Zero_out1;
  delayMatch_reg_next(1) <= delayMatch_reg(0);
  delayMatch_reg_next(2) <= delayMatch_reg(1);
  delayMatch_reg_next(3) <= delayMatch_reg(2);
  delayMatch_reg_next(4) <= delayMatch_reg(3);
  delayMatch_reg_next(5) <= delayMatch_reg(4);
  delayMatch_reg_next(6) <= delayMatch_reg(5);
  delayMatch_reg_next(7) <= delayMatch_reg(6);
  delayMatch_reg_next(8) <= delayMatch_reg(7);
  delayMatch_reg_next(9) <= delayMatch_reg(8);
  delayMatch_reg_next(10) <= delayMatch_reg(9);
  delayMatch_reg_next(11) <= delayMatch_reg(10);
  delayMatch_reg_next(12) <= delayMatch_reg(11);
  delayMatch_reg_next(13) <= delayMatch_reg(12);
  delayMatch_reg_next(14) <= delayMatch_reg(13);
  delayMatch_reg_next(15) <= delayMatch_reg(14);
  delayMatch_reg_next(16) <= delayMatch_reg(15);
  delayMatch_reg_next(17) <= delayMatch_reg(16);
  delayMatch_reg_next(18) <= delayMatch_reg(17);
  delayMatch_reg_next(19) <= delayMatch_reg(18);
  delayMatch_reg_next(20) <= delayMatch_reg(19);
  delayMatch_reg_next(21) <= delayMatch_reg(20);
  delayMatch_reg_next(22) <= delayMatch_reg(21);
  delayMatch_reg_next(23) <= delayMatch_reg(22);
  delayMatch_reg_next(24) <= delayMatch_reg(23);
  delayMatch_reg_next(25) <= delayMatch_reg(24);
  delayMatch_reg_next(26) <= delayMatch_reg(25);
  delayMatch_reg_next(27) <= delayMatch_reg(26);
  delayMatch_reg_next(28) <= delayMatch_reg(27);
  delayMatch_reg_next(29) <= delayMatch_reg(28);
  delayMatch_reg_next(30) <= delayMatch_reg(29);
  delayMatch_reg_next(31) <= delayMatch_reg(30);
  delayMatch_reg_next(32) <= delayMatch_reg(31);
  delayMatch_reg_next(33) <= delayMatch_reg(32);
  delayMatch_reg_next(34) <= delayMatch_reg(33);
  delayMatch_reg_next(35) <= delayMatch_reg(34);
  delayMatch_reg_next(36) <= delayMatch_reg(35);
  delayMatch_reg_next(37) <= delayMatch_reg(36);
  delayMatch_reg_next(38) <= delayMatch_reg(37);
  delayMatch_reg_next(39) <= delayMatch_reg(38);
  delayMatch_reg_next(40) <= delayMatch_reg(39);
  delayMatch_reg_next(41) <= delayMatch_reg(40);
  delayMatch_reg_next(42) <= delayMatch_reg(41);
  delayMatch_reg_next(43) <= delayMatch_reg(42);
  delayMatch_reg_next(44) <= delayMatch_reg(43);
  delayMatch_reg_next(45) <= delayMatch_reg(44);
  delayMatch_reg_next(46) <= delayMatch_reg(45);
  delayMatch_reg_next(47) <= delayMatch_reg(46);
  delayMatch_reg_next(48) <= delayMatch_reg(47);
  delayMatch_reg_next(49) <= delayMatch_reg(48);
  delayMatch_reg_next(50) <= delayMatch_reg(49);
  delayMatch_reg_next(51) <= delayMatch_reg(50);
  delayMatch_reg_next(52) <= delayMatch_reg(51);
  delayMatch_reg_next(53) <= delayMatch_reg(52);
  delayMatch_reg_next(54) <= delayMatch_reg(53);
  delayMatch_reg_next(55) <= delayMatch_reg(54);
  delayMatch_reg_next(56) <= delayMatch_reg(55);

  Constant6_out1 <= X"00000000";

  delayMatch1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      ihcout_1 <= X"00000000";
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        ihcout_1 <= ihcout;
      END IF;
    END IF;
  END PROCESS delayMatch1_process;


  delayMatch2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Abs_out1_1 <= X"00000000";
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Abs_out1_1 <= Abs_out1;
      END IF;
    END IF;
  END PROCESS delayMatch2_process;


  
  Switch_out1 <= Constant6_out1 WHEN Compare_To_Zero_out1_1 = '0' ELSE
      Subsystem_out1;

  Constant7_out1 <= X"43960000";

  ce_out <= clk_enable;

  powerLawIn <= Add2_out1;

END rtl;

