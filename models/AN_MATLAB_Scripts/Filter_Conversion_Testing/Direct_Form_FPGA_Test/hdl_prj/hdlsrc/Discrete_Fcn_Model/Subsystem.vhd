-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj/hdlsrc/Discrete_Transfer_Fcn_Test_Model/Subsystem.vhd
-- Created: 2020-03-05 15:46:17
-- 
-- Generated by MATLAB 9.7 and HDL Coder 3.15
-- 
-- 
-- -------------------------------------------------------------
-- Rate and Clocking Details
-- -------------------------------------------------------------
-- Model base rate: 2.08333e-05
-- Target subsystem base rate: 2.08333e-05
-- 
-- 
-- Clock Enable  Sample Time
-- -------------------------------------------------------------
-- ce_out        2.08333e-05
-- -------------------------------------------------------------
-- 
-- 
-- Output Signal                 Clock Enable  Sample Time
-- -------------------------------------------------------------
-- output                        ce_out        2.08333e-05
-- -------------------------------------------------------------
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: Subsystem
-- Source Path: Subsystem
-- Hierarchy Level: 0
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY Subsystem IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        clk_enable                        :   IN    std_logic;
        In1                               :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        ce_out                            :   OUT   std_logic;
        output                            :   OUT   std_logic_vector(31 DOWNTO 0)  -- single
        );
END Subsystem;


ARCHITECTURE rtl OF Subsystem IS

  -- Component Declarations
  COMPONENT nfp_mul_single
    PORT( nfp_in1                         :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          nfp_in2                         :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          nfp_out                         :   OUT   std_logic_vector(31 DOWNTO 0)  -- single
          );
  END COMPONENT;

  COMPONENT nfp_sub_single
    PORT( nfp_in1                         :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          nfp_in2                         :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          nfp_out                         :   OUT   std_logic_vector(31 DOWNTO 0)  -- single
          );
  END COMPONENT;

  COMPONENT nfp_add_single
    PORT( nfp_in1                         :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          nfp_in2                         :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          nfp_out                         :   OUT   std_logic_vector(31 DOWNTO 0)  -- single
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : nfp_mul_single
    USE ENTITY work.nfp_mul_single(rtl);

  FOR ALL : nfp_sub_single
    USE ENTITY work.nfp_sub_single(rtl);

  FOR ALL : nfp_add_single
    USE ENTITY work.nfp_add_single(rtl);

  -- Signals
  SIGNAL enb                              : std_logic;
  SIGNAL kconst                           : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL kconst_1                         : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL kconst_2                         : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL kconst_3                         : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL kconst_4                         : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL kconst_5                         : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL kconst_6                         : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL kconst_7                         : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL s_denom_acc_out1                 : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL s_state_out1_1                   : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL s_denom_gain1                    : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL s_nume_gain_b0                   : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL kconst_8                         : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL s_nume_gain1                     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL s_nume_acc_out1                  : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL kconst_9                         : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL s_denom_acc_out1_1               : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL s_state_out1_2                   : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL s_denom_gain1_1                  : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL s_nume_gain_b0_1                 : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL kconst_10                        : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL s_nume_gain1_1                   : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL s_nume_acc_out1_1                : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL kconst_11                        : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL s_denom_acc_out1_2               : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL s_state_out1_3                   : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL s_denom_gain1_2                  : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL s_nume_gain_b0_2                 : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL kconst_12                        : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL s_nume_gain1_2                   : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL s_nume_acc_out1_2                : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL kconst_13                        : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL s_denom_acc_out1_3               : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL s_state_out1_4                   : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL s_denom_gain1_3                  : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL s_nume_gain_b0_3                 : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL kconst_14                        : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL s_nume_gain1_3                   : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL s_nume_acc_out1_3                : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL kconst_15                        : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL s_denom_acc_out1_4               : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL s_state_out1_5                   : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL s_denom_gain1_4                  : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL s_nume_gain_b0_4                 : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL kconst_16                        : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL s_nume_gain1_4                   : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL s_nume_acc_out1_4                : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL kconst_17                        : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL s_denom_acc_out1_5               : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL s_state_out1_6                   : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL s_denom_gain1_5                  : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL s_nume_gain_b0_5                 : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL kconst_18                        : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL s_nume_gain1_5                   : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL s_nume_acc_out1_5                : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL kconst_19                        : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL s_denom_acc_out1_6               : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL s_state_out1_7                   : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL s_denom_gain1_6                  : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL s_nume_gain_b0_6                 : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL kconst_20                        : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL s_nume_gain1_6                   : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL s_nume_acc_out1_6                : std_logic_vector(31 DOWNTO 0);  -- ufix32

BEGIN
  u_nfp_mul_comp : nfp_mul_single
    PORT MAP( nfp_in1 => kconst_7,  -- single
              nfp_in2 => s_state_out1_1,  -- single
              nfp_out => s_denom_gain1  -- single
              );

  u_nfp_sub_comp : nfp_sub_single
    PORT MAP( nfp_in1 => In1,  -- single
              nfp_in2 => s_denom_gain1,  -- single
              nfp_out => s_denom_acc_out1  -- single
              );

  u_nfp_mul_comp_1 : nfp_mul_single
    PORT MAP( nfp_in1 => kconst_6,  -- single
              nfp_in2 => s_denom_acc_out1,  -- single
              nfp_out => s_nume_gain_b0  -- single
              );

  u_nfp_mul_comp_2 : nfp_mul_single
    PORT MAP( nfp_in1 => kconst_8,  -- single
              nfp_in2 => s_state_out1_1,  -- single
              nfp_out => s_nume_gain1  -- single
              );

  u_nfp_add_comp : nfp_add_single
    PORT MAP( nfp_in1 => s_nume_gain_b0,  -- single
              nfp_in2 => s_nume_gain1,  -- single
              nfp_out => s_nume_acc_out1  -- single
              );

  u_nfp_mul_comp_3 : nfp_mul_single
    PORT MAP( nfp_in1 => kconst_9,  -- single
              nfp_in2 => s_state_out1_2,  -- single
              nfp_out => s_denom_gain1_1  -- single
              );

  u_nfp_sub_comp_1 : nfp_sub_single
    PORT MAP( nfp_in1 => s_nume_acc_out1,  -- single
              nfp_in2 => s_denom_gain1_1,  -- single
              nfp_out => s_denom_acc_out1_1  -- single
              );

  u_nfp_mul_comp_4 : nfp_mul_single
    PORT MAP( nfp_in1 => kconst_5,  -- single
              nfp_in2 => s_denom_acc_out1_1,  -- single
              nfp_out => s_nume_gain_b0_1  -- single
              );

  u_nfp_mul_comp_5 : nfp_mul_single
    PORT MAP( nfp_in1 => kconst_10,  -- single
              nfp_in2 => s_state_out1_2,  -- single
              nfp_out => s_nume_gain1_1  -- single
              );

  u_nfp_add_comp_1 : nfp_add_single
    PORT MAP( nfp_in1 => s_nume_gain_b0_1,  -- single
              nfp_in2 => s_nume_gain1_1,  -- single
              nfp_out => s_nume_acc_out1_1  -- single
              );

  u_nfp_mul_comp_6 : nfp_mul_single
    PORT MAP( nfp_in1 => kconst_11,  -- single
              nfp_in2 => s_state_out1_3,  -- single
              nfp_out => s_denom_gain1_2  -- single
              );

  u_nfp_sub_comp_2 : nfp_sub_single
    PORT MAP( nfp_in1 => s_nume_acc_out1_1,  -- single
              nfp_in2 => s_denom_gain1_2,  -- single
              nfp_out => s_denom_acc_out1_2  -- single
              );

  u_nfp_mul_comp_7 : nfp_mul_single
    PORT MAP( nfp_in1 => kconst_4,  -- single
              nfp_in2 => s_denom_acc_out1_2,  -- single
              nfp_out => s_nume_gain_b0_2  -- single
              );

  u_nfp_mul_comp_8 : nfp_mul_single
    PORT MAP( nfp_in1 => kconst_12,  -- single
              nfp_in2 => s_state_out1_3,  -- single
              nfp_out => s_nume_gain1_2  -- single
              );

  u_nfp_add_comp_2 : nfp_add_single
    PORT MAP( nfp_in1 => s_nume_gain_b0_2,  -- single
              nfp_in2 => s_nume_gain1_2,  -- single
              nfp_out => s_nume_acc_out1_2  -- single
              );

  u_nfp_mul_comp_9 : nfp_mul_single
    PORT MAP( nfp_in1 => kconst_13,  -- single
              nfp_in2 => s_state_out1_4,  -- single
              nfp_out => s_denom_gain1_3  -- single
              );

  u_nfp_sub_comp_3 : nfp_sub_single
    PORT MAP( nfp_in1 => s_nume_acc_out1_2,  -- single
              nfp_in2 => s_denom_gain1_3,  -- single
              nfp_out => s_denom_acc_out1_3  -- single
              );

  u_nfp_mul_comp_10 : nfp_mul_single
    PORT MAP( nfp_in1 => kconst_3,  -- single
              nfp_in2 => s_denom_acc_out1_3,  -- single
              nfp_out => s_nume_gain_b0_3  -- single
              );

  u_nfp_mul_comp_11 : nfp_mul_single
    PORT MAP( nfp_in1 => kconst_14,  -- single
              nfp_in2 => s_state_out1_4,  -- single
              nfp_out => s_nume_gain1_3  -- single
              );

  u_nfp_add_comp_3 : nfp_add_single
    PORT MAP( nfp_in1 => s_nume_gain_b0_3,  -- single
              nfp_in2 => s_nume_gain1_3,  -- single
              nfp_out => s_nume_acc_out1_3  -- single
              );

  u_nfp_mul_comp_12 : nfp_mul_single
    PORT MAP( nfp_in1 => kconst_15,  -- single
              nfp_in2 => s_state_out1_5,  -- single
              nfp_out => s_denom_gain1_4  -- single
              );

  u_nfp_sub_comp_4 : nfp_sub_single
    PORT MAP( nfp_in1 => s_nume_acc_out1_3,  -- single
              nfp_in2 => s_denom_gain1_4,  -- single
              nfp_out => s_denom_acc_out1_4  -- single
              );

  u_nfp_mul_comp_13 : nfp_mul_single
    PORT MAP( nfp_in1 => kconst_2,  -- single
              nfp_in2 => s_denom_acc_out1_4,  -- single
              nfp_out => s_nume_gain_b0_4  -- single
              );

  u_nfp_mul_comp_14 : nfp_mul_single
    PORT MAP( nfp_in1 => kconst_16,  -- single
              nfp_in2 => s_state_out1_5,  -- single
              nfp_out => s_nume_gain1_4  -- single
              );

  u_nfp_add_comp_4 : nfp_add_single
    PORT MAP( nfp_in1 => s_nume_gain_b0_4,  -- single
              nfp_in2 => s_nume_gain1_4,  -- single
              nfp_out => s_nume_acc_out1_4  -- single
              );

  u_nfp_mul_comp_15 : nfp_mul_single
    PORT MAP( nfp_in1 => kconst_17,  -- single
              nfp_in2 => s_state_out1_6,  -- single
              nfp_out => s_denom_gain1_5  -- single
              );

  u_nfp_sub_comp_5 : nfp_sub_single
    PORT MAP( nfp_in1 => s_nume_acc_out1_4,  -- single
              nfp_in2 => s_denom_gain1_5,  -- single
              nfp_out => s_denom_acc_out1_5  -- single
              );

  u_nfp_mul_comp_16 : nfp_mul_single
    PORT MAP( nfp_in1 => kconst_1,  -- single
              nfp_in2 => s_denom_acc_out1_5,  -- single
              nfp_out => s_nume_gain_b0_5  -- single
              );

  u_nfp_mul_comp_17 : nfp_mul_single
    PORT MAP( nfp_in1 => kconst_18,  -- single
              nfp_in2 => s_state_out1_6,  -- single
              nfp_out => s_nume_gain1_5  -- single
              );

  u_nfp_add_comp_5 : nfp_add_single
    PORT MAP( nfp_in1 => s_nume_gain_b0_5,  -- single
              nfp_in2 => s_nume_gain1_5,  -- single
              nfp_out => s_nume_acc_out1_5  -- single
              );

  u_nfp_mul_comp_18 : nfp_mul_single
    PORT MAP( nfp_in1 => kconst_19,  -- single
              nfp_in2 => s_state_out1_7,  -- single
              nfp_out => s_denom_gain1_6  -- single
              );

  u_nfp_sub_comp_6 : nfp_sub_single
    PORT MAP( nfp_in1 => s_nume_acc_out1_5,  -- single
              nfp_in2 => s_denom_gain1_6,  -- single
              nfp_out => s_denom_acc_out1_6  -- single
              );

  u_nfp_mul_comp_19 : nfp_mul_single
    PORT MAP( nfp_in1 => kconst,  -- single
              nfp_in2 => s_denom_acc_out1_6,  -- single
              nfp_out => s_nume_gain_b0_6  -- single
              );

  u_nfp_mul_comp_20 : nfp_mul_single
    PORT MAP( nfp_in1 => kconst_20,  -- single
              nfp_in2 => s_state_out1_7,  -- single
              nfp_out => s_nume_gain1_6  -- single
              );

  u_nfp_add_comp_6 : nfp_add_single
    PORT MAP( nfp_in1 => s_nume_gain_b0_6,  -- single
              nfp_in2 => s_nume_gain1_6,  -- single
              nfp_out => s_nume_acc_out1_6  -- single
              );

  kconst <= X"3e281018";

  kconst_1 <= X"3e281018";

  kconst_2 <= X"3e281018";

  kconst_3 <= X"3e281018";

  kconst_4 <= X"3e281018";

  kconst_5 <= X"3e281018";

  kconst_6 <= X"3e281018";

  kconst_7 <= X"bf2bf7f4";

  enb <= clk_enable;

  s_state_out1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      s_state_out1_1 <= X"00000000";
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        s_state_out1_1 <= s_denom_acc_out1;
      END IF;
    END IF;
  END PROCESS s_state_out1_process;


  kconst_8 <= X"3e281018";

  kconst_9 <= X"bf2bf7f4";

  s_state_out11_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      s_state_out1_2 <= X"00000000";
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        s_state_out1_2 <= s_denom_acc_out1_1;
      END IF;
    END IF;
  END PROCESS s_state_out11_process;


  kconst_10 <= X"3e281018";

  kconst_11 <= X"bf2bf7f4";

  s_state_out12_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      s_state_out1_3 <= X"00000000";
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        s_state_out1_3 <= s_denom_acc_out1_2;
      END IF;
    END IF;
  END PROCESS s_state_out12_process;


  kconst_12 <= X"3e281018";

  kconst_13 <= X"bf2bf7f4";

  s_state_out13_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      s_state_out1_4 <= X"00000000";
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        s_state_out1_4 <= s_denom_acc_out1_3;
      END IF;
    END IF;
  END PROCESS s_state_out13_process;


  kconst_14 <= X"3e281018";

  kconst_15 <= X"bf2bf7f4";

  s_state_out14_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      s_state_out1_5 <= X"00000000";
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        s_state_out1_5 <= s_denom_acc_out1_4;
      END IF;
    END IF;
  END PROCESS s_state_out14_process;


  kconst_16 <= X"3e281018";

  kconst_17 <= X"bf2bf7f4";

  s_state_out15_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      s_state_out1_6 <= X"00000000";
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        s_state_out1_6 <= s_denom_acc_out1_5;
      END IF;
    END IF;
  END PROCESS s_state_out15_process;


  kconst_18 <= X"3e281018";

  kconst_19 <= X"bf2bf7f4";

  s_state_out16_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      s_state_out1_7 <= X"00000000";
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        s_state_out1_7 <= s_denom_acc_out1_6;
      END IF;
    END IF;
  END PROCESS s_state_out16_process;


  kconst_20 <= X"3e281018";

  ce_out <= clk_enable;

  output <= s_nume_acc_out1_6;

END rtl;

