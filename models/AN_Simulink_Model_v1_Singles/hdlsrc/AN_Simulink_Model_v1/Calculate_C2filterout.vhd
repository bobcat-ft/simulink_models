-- -------------------------------------------------------------
-- 
-- File Name: hdlsrc/AN_Simulink_Model_v1/Calculate_C2filterout.vhd
-- Created: 2019-10-17 12:34:57
-- 
-- Generated by MATLAB 9.7 and HDL Coder 3.15
-- 
-- 
-- -------------------------------------------------------------
-- Rate and Clocking Details
-- -------------------------------------------------------------
-- Model base rate: 2.08333e-05
-- Target subsystem base rate: 2.08333e-05
-- 
-- 
-- Clock Enable  Sample Time
-- -------------------------------------------------------------
-- ce_out        2.08333e-05
-- -------------------------------------------------------------
-- 
-- 
-- Output Signal                 Clock Enable  Sample Time
-- -------------------------------------------------------------
-- C2filterout                   ce_out        2.08333e-05
-- -------------------------------------------------------------
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: Calculate_C2filterout
-- Source Path: Calculate_C2filterout
-- Hierarchy Level: 0
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY Calculate_C2filterout IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        clk_enable                        :   IN    std_logic;
        C2filterouttmp                    :   IN    std_logic_vector(63 DOWNTO 0);  -- double
        ce_out                            :   OUT   std_logic;
        C2filterout                       :   OUT   std_logic_vector(63 DOWNTO 0)  -- double
        );
END Calculate_C2filterout;


ARCHITECTURE rtl OF Calculate_C2filterout IS

  -- Component Declarations
  COMPONENT nfp_abs_double
    PORT( nfp_in                          :   IN    std_logic_vector(63 DOWNTO 0);  -- double
          nfp_out                         :   OUT   std_logic_vector(63 DOWNTO 0)  -- double
          );
  END COMPONENT;

  COMPONENT nfp_mul_double
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          nfp_in1                         :   IN    std_logic_vector(63 DOWNTO 0);  -- double
          nfp_in2                         :   IN    std_logic_vector(63 DOWNTO 0);  -- double
          nfp_out                         :   OUT   std_logic_vector(63 DOWNTO 0)  -- double
          );
  END COMPONENT;

  COMPONENT nfp_div_double
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          nfp_in1                         :   IN    std_logic_vector(63 DOWNTO 0);  -- double
          nfp_in2                         :   IN    std_logic_vector(63 DOWNTO 0);  -- double
          nfp_out                         :   OUT   std_logic_vector(63 DOWNTO 0)  -- double
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : nfp_abs_double
    USE ENTITY work.nfp_abs_double(rtl);

  FOR ALL : nfp_mul_double
    USE ENTITY work.nfp_mul_double(rtl);

  FOR ALL : nfp_div_double
    USE ENTITY work.nfp_div_double(rtl);

  -- Signals
  SIGNAL Abs_out1                         : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Product_out1                     : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Constant_out1                    : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Product1_out1                    : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Constant1_out1                   : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Divide_out1                      : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Constant3_out1                   : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Product2_out1                    : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Constant2_out1                   : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Divide1_out1                     : std_logic_vector(63 DOWNTO 0);  -- ufix64

BEGIN
  u_nfp_abs_comp : nfp_abs_double
    PORT MAP( nfp_in => C2filterouttmp,  -- double
              nfp_out => Abs_out1  -- double
              );

  u_nfp_mul_comp : nfp_mul_double
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in1 => C2filterouttmp,  -- double
              nfp_in2 => Abs_out1,  -- double
              nfp_out => Product_out1  -- double
              );

  u_nfp_mul_comp_1 : nfp_mul_double
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in1 => Product_out1,  -- double
              nfp_in2 => Constant_out1,  -- double
              nfp_out => Product1_out1  -- double
              );

  u_nfp_div_comp : nfp_div_double
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in1 => Product1_out1,  -- double
              nfp_in2 => Constant1_out1,  -- double
              nfp_out => Divide_out1  -- double
              );

  u_nfp_mul_comp_2 : nfp_mul_double
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in1 => Divide_out1,  -- double
              nfp_in2 => Constant3_out1,  -- double
              nfp_out => Product2_out1  -- double
              );

  u_nfp_div_comp_1 : nfp_div_double
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in1 => Product2_out1,  -- double
              nfp_in2 => Constant2_out1,  -- double
              nfp_out => Divide1_out1  -- double
              );

  Constant_out1 <= X"408f400000000000";

  Constant1_out1 <= X"4024000000000000";

  Constant3_out1 <= X"408f400000000000";

  Constant2_out1 <= X"409f400000000000";

  ce_out <= clk_enable;

  C2filterout <= Divide1_out1;

END rtl;

