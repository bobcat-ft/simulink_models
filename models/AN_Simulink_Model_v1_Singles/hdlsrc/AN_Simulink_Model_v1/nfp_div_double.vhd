-- -------------------------------------------------------------
-- 
-- File Name: hdlsrc/AN_Simulink_Model_v1/nfp_div_double.vhd
-- Created: 2019-10-17 12:34:57
-- 
-- Generated by MATLAB 9.7 and HDL Coder 3.15
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: nfp_div_double
-- Source Path: Calculate_C2filterout/nfp_div_double
-- Hierarchy Level: 1
-- 
-- {Latency Strategy = "Max", Denormal Handling = "off"}
-- {Radix = "2"}
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.Calculate_C2filterout_pkg.ALL;

ENTITY nfp_div_double IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        nfp_in1                           :   IN    std_logic_vector(63 DOWNTO 0);  -- ufix64
        nfp_in2                           :   IN    std_logic_vector(63 DOWNTO 0);  -- ufix64
        nfp_out                           :   OUT   std_logic_vector(63 DOWNTO 0)  -- ufix64
        );
END nfp_div_double;


ARCHITECTURE rtl OF nfp_div_double IS

  ATTRIBUTE multstyle : string;

  -- Signals
  SIGNAL Delay1_ctrl_const_out            : std_logic;  -- ufix1
  SIGNAL Delay1_ctrl_delay_out            : std_logic;  -- ufix1
  SIGNAL Delay1_Initial_Val_out           : std_logic;  -- ufix1
  SIGNAL Constant8_out1                   : std_logic;  -- ufix1
  SIGNAL Delay4_ctrl_const_out            : std_logic;  -- ufix1
  SIGNAL Delay4_ctrl_delay_out            : std_logic;  -- ufix1
  SIGNAL Delay4_Initial_Val_out           : std_logic;  -- ufix1
  SIGNAL Constant7_out1                   : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Relational_Operator_out1         : std_logic;  -- ufix1
  SIGNAL Delay4_out1                      : std_logic;  -- ufix1
  SIGNAL Logical_Operator_out1            : std_logic;  -- ufix1
  SIGNAL Data_Type_Conversion_out1        : std_logic;  -- ufix1
  SIGNAL Add_out1                         : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Delay3_out1                      : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Add_add_cast                     : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Relational_Operator_relop1       : std_logic;
  SIGNAL Delay1_out1                      : std_logic;  -- ufix1
  SIGNAL nfp_in1_unsigned                 : unsigned(63 DOWNTO 0);  -- ufix64
  SIGNAL aSign                            : std_logic;  -- ufix1
  SIGNAL aExponent                        : unsigned(10 DOWNTO 0);  -- ufix11
  SIGNAL aMantissa                        : unsigned(51 DOWNTO 0);  -- ufix52
  SIGNAL Delay15_PS_1_out1                : std_logic;  -- ufix1
  SIGNAL nfp_in2_unsigned                 : unsigned(63 DOWNTO 0);  -- ufix64
  SIGNAL bSign                            : std_logic;  -- ufix1
  SIGNAL bExponent                        : unsigned(10 DOWNTO 0);  -- ufix11
  SIGNAL bMantissa                        : unsigned(51 DOWNTO 0);  -- ufix52
  SIGNAL Delay18_PS_1_out1                : std_logic;  -- ufix1
  SIGNAL tmp_out1                         : std_logic;  -- ufix1
  SIGNAL Delay54_PS_60_reg                : std_logic_vector(0 TO 58);  -- ufix1 [59]
  SIGNAL Delay54_PS_60_reg_next           : std_logic_vector(0 TO 58);  -- ufix1 [59]
  SIGNAL Delay54_PS_60_out1               : std_logic;  -- ufix1
  SIGNAL Constant1_out1                   : std_logic;  -- ufix1
  SIGNAL Switch1_out1                     : std_logic;  -- ufix1
  SIGNAL Delay3_PS_61_out1                : std_logic;  -- ufix1
  SIGNAL Delay16_PS_1_out1                : unsigned(10 DOWNTO 0);  -- ufix11
  SIGNAL aExponent_cfType_Exponent_I_out1 : std_logic;  -- ufix1
  SIGNAL Delay19_PS_1_out1                : unsigned(10 DOWNTO 0);  -- ufix11
  SIGNAL bExponent_cfType_Exponent_I_out1 : std_logic;  -- ufix1
  SIGNAL alphaaExponent_cfType_Exponent_out1 : std_logic;  -- ufix1
  SIGNAL Delay51_PS_60_reg                : std_logic_vector(0 TO 58);  -- ufix1 [59]
  SIGNAL Delay51_PS_60_reg_next           : std_logic_vector(0 TO 58);  -- ufix1 [59]
  SIGNAL Delay51_PS_60_out1               : std_logic;  -- ufix1
  SIGNAL aExponent_0_out1                 : std_logic;  -- ufix1
  SIGNAL Delay17_PS_1_out1                : unsigned(51 DOWNTO 0);  -- ufix52
  SIGNAL Constant_out1                    : unsigned(51 DOWNTO 0);  -- ufix52
  SIGNAL Switch_out1                      : unsigned(51 DOWNTO 0);  -- ufix52
  SIGNAL aMantissa_0_out1                 : std_logic;  -- ufix1
  SIGNAL alphaaExponent_0_aMantissa_out1  : std_logic;  -- ufix1
  SIGNAL Delay53_PS_60_reg                : std_logic_vector(0 TO 58);  -- ufix1 [59]
  SIGNAL Delay53_PS_60_reg_next           : std_logic_vector(0 TO 58);  -- ufix1 [59]
  SIGNAL Delay53_PS_60_out1               : std_logic;  -- ufix1
  SIGNAL bExponent_0_out1                 : std_logic;  -- ufix1
  SIGNAL Delay20_PS_1_out1                : unsigned(51 DOWNTO 0);  -- ufix52
  SIGNAL Constant_out1_1                  : unsigned(51 DOWNTO 0);  -- ufix52
  SIGNAL Switch_out1_1                    : unsigned(51 DOWNTO 0);  -- ufix52
  SIGNAL bMantissa_0_out1                 : std_logic;  -- ufix1
  SIGNAL alphabExponent_0_bMantissa_out1  : std_logic;  -- ufix1
  SIGNAL Delay52_PS_60_reg                : std_logic_vector(0 TO 58);  -- ufix1 [59]
  SIGNAL Delay52_PS_60_reg_next           : std_logic_vector(0 TO 58);  -- ufix1 [59]
  SIGNAL Delay52_PS_60_out1               : std_logic;  -- ufix1
  SIGNAL alphaExponent_0_cfType_Exp_out1  : std_logic;  -- ufix1
  SIGNAL alpha1_out1                      : std_logic;  -- ufix1
  SIGNAL alpha0_out1                      : std_logic;  -- ufix1
  SIGNAL if_Exponent_0_cfType_Exp_out1    : std_logic;  -- ufix1
  SIGNAL Bit_Concat1_out1                 : unsigned(52 DOWNTO 0);  -- ufix53
  SIGNAL Delay2_PS_3_reg                  : vector_of_unsigned53(0 TO 1);  -- ufix53 [2]
  SIGNAL Delay2_PS_3_reg_next             : vector_of_unsigned53(0 TO 1);  -- ufix53 [2]
  SIGNAL Delay2_PS_3_out1                 : unsigned(52 DOWNTO 0);  -- ufix53
  SIGNAL alphaExponent_0_cfType_Exp_out1_1 : std_logic;  -- ufix1
  SIGNAL alpha1_out1_1                    : std_logic;  -- ufix1
  SIGNAL alpha0_out1_1                    : std_logic;  -- ufix1
  SIGNAL if_Exponent_0_cfType_Exp_out1_1  : std_logic;  -- ufix1
  SIGNAL Bit_Concat1_out1_1               : unsigned(52 DOWNTO 0);  -- ufix53
  SIGNAL Delay1_PS_3_reg                  : vector_of_unsigned53(0 TO 1);  -- ufix53 [2]
  SIGNAL Delay1_PS_3_reg_next             : vector_of_unsigned53(0 TO 1);  -- ufix53 [2]
  SIGNAL Delay1_PS_3_out1                 : unsigned(52 DOWNTO 0);  -- ufix53
  SIGNAL mant_a_norm_mant_b_norm_relop1   : std_logic;
  SIGNAL Delay2_PS_4_out1                 : std_logic;  -- ufix1
  SIGNAL C_out1                           : unsigned(10 DOWNTO 0);  -- ufix11
  SIGNAL if_Exponent_0_out1               : unsigned(10 DOWNTO 0);  -- ufix11
  SIGNAL Delay3_PS_3_reg                  : vector_of_unsigned11(0 TO 1);  -- ufix11 [2]
  SIGNAL Delay3_PS_3_reg_next             : vector_of_unsigned11(0 TO 1);  -- ufix11 [2]
  SIGNAL Delay3_PS_3_out1                 : unsigned(10 DOWNTO 0);  -- ufix11
  SIGNAL DTC_out1                         : signed(12 DOWNTO 0);  -- sfix13
  SIGNAL Delay6_PS_4_out1                 : signed(12 DOWNTO 0);  -- sfix13
  SIGNAL cast_1_out1                      : signed(9 DOWNTO 0);  -- sfix10
  SIGNAL exp_a_norm_cast_1_out1           : signed(12 DOWNTO 0);  -- sfix13
  SIGNAL Delay7_PS_4_out1                 : signed(12 DOWNTO 0);  -- sfix13
  SIGNAL if_mant_a_norm_mant_b_norm_out1  : signed(12 DOWNTO 0);  -- sfix13
  SIGNAL Delay4_PS_5_out1                 : signed(12 DOWNTO 0);  -- sfix13
  SIGNAL C_out1_1                         : unsigned(10 DOWNTO 0);  -- ufix11
  SIGNAL if_Exponent_0_out1_1             : unsigned(10 DOWNTO 0);  -- ufix11
  SIGNAL Delay_PS_3_reg                   : vector_of_unsigned11(0 TO 1);  -- ufix11 [2]
  SIGNAL Delay_PS_3_reg_next              : vector_of_unsigned11(0 TO 1);  -- ufix11 [2]
  SIGNAL Delay_PS_3_out1                  : unsigned(10 DOWNTO 0);  -- ufix11
  SIGNAL DTC1_out1                        : signed(12 DOWNTO 0);  -- sfix13
  SIGNAL Delay5_PS_4_out1                 : signed(12 DOWNTO 0);  -- sfix13
  SIGNAL Delay1_PS_5_out1                 : signed(12 DOWNTO 0);  -- sfix13
  SIGNAL exp_a_norm_exp_b_norm_out1       : signed(12 DOWNTO 0);  -- sfix13
  SIGNAL cfType_ExponentBiasout1          : signed(12 DOWNTO 0);  -- sfix13
  SIGNAL exp_a_norm_exp_b_norm_cast_out1  : signed(12 DOWNTO 0);  -- sfix13
  SIGNAL Delay_out1                       : signed(12 DOWNTO 0);  -- sfix13
  SIGNAL exp_tmp_2_cfType_ExponentBi_out1 : std_logic;  -- ufix1
  SIGNAL exp_tmp_1_out1                   : std_logic;  -- ufix1
  SIGNAL C3_out1                          : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL exp_tmp_0_out1                   : std_logic;  -- ufix1
  SIGNAL C1_out1                          : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL C_out1_2                         : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL if_exp_tmp_0_out1                : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL if_exp_tmp_1_1_out1              : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL C5_out1                          : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL if_exp_tmp_2_cfType_ExponentB_1_out1 : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Delay11_PS_7_59_reg              : vector_of_unsigned6(0 TO 52);  -- ufix6 [53]
  SIGNAL Delay11_PS_7_59_reg_next         : vector_of_unsigned6(0 TO 52);  -- ufix6 [53]
  SIGNAL Delay11_PS_7_59_out1             : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL shift_length_1_out1              : std_logic;  -- ufix1
  SIGNAL shift_length_1_out1_1            : std_logic;  -- ufix1
  SIGNAL C_out1_3                         : std_logic;  -- ufix1
  SIGNAL Delay16_PS_6_out1                : std_logic;  -- ufix1
  SIGNAL alpha0_out1_2                    : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL Bit_Concat_out1                  : unsigned(56 DOWNTO 0);  -- ufix57
  SIGNAL reinterpretcast_bitconcat_fi_0_out1 : signed(56 DOWNTO 0);  -- sfix57
  SIGNAL Delay3_PS_4_out1                 : signed(56 DOWNTO 0);  -- sfix57
  SIGNAL bitsll_mant_a_norm_1_out1        : signed(56 DOWNTO 0);  -- sfix57
  SIGNAL Delay1_PS_4_out1                 : signed(56 DOWNTO 0);  -- sfix57
  SIGNAL if_mant_a_norm_mant_b_norm_1_out1 : signed(56 DOWNTO 0);  -- sfix57
  SIGNAL Delay3_PS_5_out1                 : signed(56 DOWNTO 0);  -- sfix57
  SIGNAL Bit_Slice1_out1                  : unsigned(54 DOWNTO 0);  -- ufix55
  SIGNAL Data_Type_Conversion1_out1       : signed(54 DOWNTO 0);  -- sfix55
  SIGNAL alpha1_out1_2                    : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL Bit_Concat1_out1_2               : unsigned(56 DOWNTO 0);  -- ufix57
  SIGNAL reinterpretcast_bitconcat_fi_0_out1_1 : signed(56 DOWNTO 0);  -- sfix57
  SIGNAL Unary_Minus2_in0                 : signed(57 DOWNTO 0);  -- sfix58
  SIGNAL Unary_Minus2_out1                : signed(56 DOWNTO 0);  -- sfix57
  SIGNAL Delay4_PS_4_out1                 : signed(56 DOWNTO 0);  -- sfix57
  SIGNAL Delay2_PS_5_out1                 : signed(56 DOWNTO 0);  -- sfix57
  SIGNAL Bit_Slice_out1                   : unsigned(54 DOWNTO 0);  -- ufix55
  SIGNAL Data_Type_Conversion_out1_1      : signed(54 DOWNTO 0);  -- sfix55
  SIGNAL R_mant_b_norm_out1               : signed(54 DOWNTO 0);  -- sfix55
  SIGNAL bitsll_R_1_out1                  : signed(54 DOWNTO 0);  -- sfix55
  SIGNAL Delay17_PS_6_out1                : signed(54 DOWNTO 0);  -- sfix55
  SIGNAL Delay1_PS_6_out1                 : signed(54 DOWNTO 0);  -- sfix55
  SIGNAL R_mant_b_norm_out1_1             : signed(54 DOWNTO 0);  -- sfix55
  SIGNAL Bit_Slice_out1_1                 : std_logic;  -- ufix1
  SIGNAL Logical_Operator_out1_1          : std_logic;  -- ufix1
  SIGNAL Bit_Concat_out1_1                : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL Delay3_PS_7_out1                 : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL if_tmp_0_1_out1                  : signed(54 DOWNTO 0);  -- sfix55
  SIGNAL bitsll_R_1_out1_1                : signed(54 DOWNTO 0);  -- sfix55
  SIGNAL Delay_PS_7_out1                  : signed(54 DOWNTO 0);  -- sfix55
  SIGNAL Delay4_PS_7_out1                 : signed(54 DOWNTO 0);  -- sfix55
  SIGNAL R_mant_b_norm_out1_2             : signed(54 DOWNTO 0);  -- sfix55
  SIGNAL Bit_Slice_out1_2                 : std_logic;  -- ufix1
  SIGNAL Logical_Operator_out1_2          : std_logic;  -- ufix1
  SIGNAL Bit_Concat_out1_2                : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL Delay6_PS_8_out1                 : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL if_tmp_0_1_out1_1                : signed(54 DOWNTO 0);  -- sfix55
  SIGNAL bitsll_R_1_out1_2                : signed(54 DOWNTO 0);  -- sfix55
  SIGNAL Delay7_PS_8_out1                 : signed(54 DOWNTO 0);  -- sfix55
  SIGNAL Delay5_PS_8_out1                 : signed(54 DOWNTO 0);  -- sfix55
  SIGNAL R_mant_b_norm_out1_3             : signed(54 DOWNTO 0);  -- sfix55
  SIGNAL Bit_Slice_out1_3                 : std_logic;  -- ufix1
  SIGNAL Logical_Operator_out1_3          : std_logic;  -- ufix1
  SIGNAL Bit_Concat_out1_3                : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL Delay_PS_9_out1                  : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL if_tmp_0_1_out1_2                : signed(54 DOWNTO 0);  -- sfix55
  SIGNAL bitsll_R_1_out1_3                : signed(54 DOWNTO 0);  -- sfix55
  SIGNAL Delay8_PS_9_out1                 : signed(54 DOWNTO 0);  -- sfix55
  SIGNAL Delay10_PS_9_out1                : signed(54 DOWNTO 0);  -- sfix55
  SIGNAL R_mant_b_norm_out1_4             : signed(54 DOWNTO 0);  -- sfix55
  SIGNAL Bit_Slice_out1_4                 : std_logic;  -- ufix1
  SIGNAL Logical_Operator_out1_4          : std_logic;  -- ufix1
  SIGNAL Bit_Concat_out1_4                : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL Delay13_PS_10_out1               : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL if_tmp_0_1_out1_3                : signed(54 DOWNTO 0);  -- sfix55
  SIGNAL bitsll_R_1_out1_4                : signed(54 DOWNTO 0);  -- sfix55
  SIGNAL Delay14_PS_10_out1               : signed(54 DOWNTO 0);  -- sfix55
  SIGNAL Delay11_PS_10_out1               : signed(54 DOWNTO 0);  -- sfix55
  SIGNAL R_mant_b_norm_out1_5             : signed(54 DOWNTO 0);  -- sfix55
  SIGNAL Bit_Slice_out1_5                 : std_logic;  -- ufix1
  SIGNAL Logical_Operator_out1_5          : std_logic;  -- ufix1
  SIGNAL Bit_Concat_out1_5                : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Delay18_PS_11_out1               : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL if_tmp_0_1_out1_4                : signed(54 DOWNTO 0);  -- sfix55
  SIGNAL bitsll_R_1_out1_5                : signed(54 DOWNTO 0);  -- sfix55
  SIGNAL Delay15_PS_11_out1               : signed(54 DOWNTO 0);  -- sfix55
  SIGNAL Delay19_PS_11_out1               : signed(54 DOWNTO 0);  -- sfix55
  SIGNAL R_mant_b_norm_out1_6             : signed(54 DOWNTO 0);  -- sfix55
  SIGNAL Bit_Slice_out1_6                 : std_logic;  -- ufix1
  SIGNAL Logical_Operator_out1_6          : std_logic;  -- ufix1
  SIGNAL Bit_Concat_out1_6                : unsigned(6 DOWNTO 0);  -- ufix7
  SIGNAL Delay21_PS_12_out1               : unsigned(6 DOWNTO 0);  -- ufix7
  SIGNAL if_tmp_0_1_out1_5                : signed(54 DOWNTO 0);  -- sfix55
  SIGNAL bitsll_R_1_out1_6                : signed(54 DOWNTO 0);  -- sfix55
  SIGNAL Delay22_PS_12_out1               : signed(54 DOWNTO 0);  -- sfix55
  SIGNAL Delay20_PS_12_out1               : signed(54 DOWNTO 0);  -- sfix55
  SIGNAL R_mant_b_norm_out1_7             : signed(54 DOWNTO 0);  -- sfix55
  SIGNAL Bit_Slice_out1_7                 : std_logic;  -- ufix1
  SIGNAL Logical_Operator_out1_7          : std_logic;  -- ufix1
  SIGNAL Bit_Concat_out1_7                : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Delay24_PS_13_out1               : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL if_tmp_0_1_out1_6                : signed(54 DOWNTO 0);  -- sfix55
  SIGNAL bitsll_R_1_out1_7                : signed(54 DOWNTO 0);  -- sfix55
  SIGNAL Delay23_PS_13_out1               : signed(54 DOWNTO 0);  -- sfix55
  SIGNAL Delay12_PS_13_out1               : signed(54 DOWNTO 0);  -- sfix55
  SIGNAL R_mant_b_norm_out1_8             : signed(54 DOWNTO 0);  -- sfix55
  SIGNAL Bit_Slice_out1_8                 : std_logic;  -- ufix1
  SIGNAL Logical_Operator_out1_8          : std_logic;  -- ufix1
  SIGNAL Bit_Concat_out1_8                : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL Delay16_PS_14_out1               : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL if_tmp_0_1_out1_7                : signed(54 DOWNTO 0);  -- sfix55
  SIGNAL bitsll_R_1_out1_8                : signed(54 DOWNTO 0);  -- sfix55
  SIGNAL Delay17_PS_14_out1               : signed(54 DOWNTO 0);  -- sfix55
  SIGNAL Delay1_PS_14_out1                : signed(54 DOWNTO 0);  -- sfix55
  SIGNAL R_mant_b_norm_out1_9             : signed(54 DOWNTO 0);  -- sfix55
  SIGNAL Bit_Slice_out1_9                 : std_logic;  -- ufix1
  SIGNAL Logical_Operator_out1_9          : std_logic;  -- ufix1
  SIGNAL Bit_Concat_out1_9                : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL Delay7_PS_15_out1                : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL if_tmp_0_1_out1_8                : signed(54 DOWNTO 0);  -- sfix55
  SIGNAL bitsll_R_1_out1_9                : signed(54 DOWNTO 0);  -- sfix55
  SIGNAL Delay6_PS_15_out1                : signed(54 DOWNTO 0);  -- sfix55
  SIGNAL Delay8_PS_15_out1                : signed(54 DOWNTO 0);  -- sfix55
  SIGNAL R_mant_b_norm_out1_10            : signed(54 DOWNTO 0);  -- sfix55
  SIGNAL Bit_Slice_out1_10                : std_logic;  -- ufix1
  SIGNAL Logical_Operator_out1_10         : std_logic;  -- ufix1
  SIGNAL Bit_Concat_out1_10               : unsigned(10 DOWNTO 0);  -- ufix11
  SIGNAL Delay25_PS_16_out1               : unsigned(10 DOWNTO 0);  -- ufix11
  SIGNAL if_tmp_0_1_out1_9                : signed(54 DOWNTO 0);  -- sfix55
  SIGNAL bitsll_R_1_out1_10               : signed(54 DOWNTO 0);  -- sfix55
  SIGNAL Delay26_PS_16_out1               : signed(54 DOWNTO 0);  -- sfix55
  SIGNAL Delay9_PS_16_out1                : signed(54 DOWNTO 0);  -- sfix55
  SIGNAL R_mant_b_norm_out1_11            : signed(54 DOWNTO 0);  -- sfix55
  SIGNAL Bit_Slice_out1_11                : std_logic;  -- ufix1
  SIGNAL Logical_Operator_out1_11         : std_logic;  -- ufix1
  SIGNAL Bit_Concat_out1_11               : unsigned(11 DOWNTO 0);  -- ufix12
  SIGNAL Delay28_PS_17_out1               : unsigned(11 DOWNTO 0);  -- ufix12
  SIGNAL if_tmp_0_1_out1_10               : signed(54 DOWNTO 0);  -- sfix55
  SIGNAL bitsll_R_1_out1_11               : signed(54 DOWNTO 0);  -- sfix55
  SIGNAL Delay27_PS_17_out1               : signed(54 DOWNTO 0);  -- sfix55
  SIGNAL Delay10_PS_17_out1               : signed(54 DOWNTO 0);  -- sfix55
  SIGNAL R_mant_b_norm_out1_12            : signed(54 DOWNTO 0);  -- sfix55
  SIGNAL Bit_Slice_out1_12                : std_logic;  -- ufix1
  SIGNAL Logical_Operator_out1_12         : std_logic;  -- ufix1
  SIGNAL Bit_Concat_out1_12               : unsigned(12 DOWNTO 0);  -- ufix13
  SIGNAL Delay3_PS_18_out1                : unsigned(12 DOWNTO 0);  -- ufix13
  SIGNAL if_tmp_0_1_out1_11               : signed(54 DOWNTO 0);  -- sfix55
  SIGNAL bitsll_R_1_out1_12               : signed(54 DOWNTO 0);  -- sfix55
  SIGNAL Delay4_PS_18_out1                : signed(54 DOWNTO 0);  -- sfix55
  SIGNAL Delay11_PS_18_out1               : signed(54 DOWNTO 0);  -- sfix55
  SIGNAL R_mant_b_norm_out1_13            : signed(54 DOWNTO 0);  -- sfix55
  SIGNAL Bit_Slice_out1_13                : std_logic;  -- ufix1
  SIGNAL Logical_Operator_out1_13         : std_logic;  -- ufix1
  SIGNAL Bit_Concat_out1_13               : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL Delay18_PS_19_out1               : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL if_tmp_0_1_out1_12               : signed(54 DOWNTO 0);  -- sfix55
  SIGNAL bitsll_R_1_out1_13               : signed(54 DOWNTO 0);  -- sfix55
  SIGNAL Delay5_PS_19_out1                : signed(54 DOWNTO 0);  -- sfix55
  SIGNAL Delay19_PS_19_out1               : signed(54 DOWNTO 0);  -- sfix55
  SIGNAL R_mant_b_norm_out1_14            : signed(54 DOWNTO 0);  -- sfix55
  SIGNAL Bit_Slice_out1_14                : std_logic;  -- ufix1
  SIGNAL Logical_Operator_out1_14         : std_logic;  -- ufix1
  SIGNAL Bit_Concat_out1_14               : unsigned(14 DOWNTO 0);  -- ufix15
  SIGNAL Delay21_PS_20_out1               : unsigned(14 DOWNTO 0);  -- ufix15
  SIGNAL if_tmp_0_1_out1_13               : signed(54 DOWNTO 0);  -- sfix55
  SIGNAL bitsll_R_1_out1_14               : signed(54 DOWNTO 0);  -- sfix55
  SIGNAL Delay22_PS_20_out1               : signed(54 DOWNTO 0);  -- sfix55
  SIGNAL Delay20_PS_20_out1               : signed(54 DOWNTO 0);  -- sfix55
  SIGNAL R_mant_b_norm_out1_15            : signed(54 DOWNTO 0);  -- sfix55
  SIGNAL Bit_Slice_out1_15                : std_logic;  -- ufix1
  SIGNAL Logical_Operator_out1_15         : std_logic;  -- ufix1
  SIGNAL Bit_Concat_out1_15               : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL Delay24_PS_21_out1               : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL if_tmp_0_1_out1_14               : signed(54 DOWNTO 0);  -- sfix55
  SIGNAL bitsll_R_1_out1_15               : signed(54 DOWNTO 0);  -- sfix55
  SIGNAL Delay23_PS_21_out1               : signed(54 DOWNTO 0);  -- sfix55
  SIGNAL Delay2_PS_21_out1                : signed(54 DOWNTO 0);  -- sfix55
  SIGNAL R_mant_b_norm_out1_16            : signed(54 DOWNTO 0);  -- sfix55
  SIGNAL Bit_Slice_out1_16                : std_logic;  -- ufix1
  SIGNAL Logical_Operator_out1_16         : std_logic;  -- ufix1
  SIGNAL Bit_Concat_out1_16               : unsigned(16 DOWNTO 0);  -- ufix17
  SIGNAL Delay16_PS_22_out1               : unsigned(16 DOWNTO 0);  -- ufix17
  SIGNAL if_tmp_0_1_out1_15               : signed(54 DOWNTO 0);  -- sfix55
  SIGNAL bitsll_R_1_out1_16               : signed(54 DOWNTO 0);  -- sfix55
  SIGNAL Delay17_PS_22_out1               : signed(54 DOWNTO 0);  -- sfix55
  SIGNAL Delay1_PS_22_out1                : signed(54 DOWNTO 0);  -- sfix55
  SIGNAL R_mant_b_norm_out1_17            : signed(54 DOWNTO 0);  -- sfix55
  SIGNAL Bit_Slice_out1_17                : std_logic;  -- ufix1
  SIGNAL Logical_Operator_out1_17         : std_logic;  -- ufix1
  SIGNAL Bit_Concat_out1_17               : unsigned(17 DOWNTO 0);  -- ufix18
  SIGNAL Delay7_PS_23_out1                : unsigned(17 DOWNTO 0);  -- ufix18
  SIGNAL if_tmp_0_1_out1_16               : signed(54 DOWNTO 0);  -- sfix55
  SIGNAL bitsll_R_1_out1_17               : signed(54 DOWNTO 0);  -- sfix55
  SIGNAL Delay6_PS_23_out1                : signed(54 DOWNTO 0);  -- sfix55
  SIGNAL Delay8_PS_23_out1                : signed(54 DOWNTO 0);  -- sfix55
  SIGNAL R_mant_b_norm_out1_18            : signed(54 DOWNTO 0);  -- sfix55
  SIGNAL Bit_Slice_out1_18                : std_logic;  -- ufix1
  SIGNAL Logical_Operator_out1_18         : std_logic;  -- ufix1
  SIGNAL Bit_Concat_out1_18               : unsigned(18 DOWNTO 0);  -- ufix19
  SIGNAL Delay25_PS_24_out1               : unsigned(18 DOWNTO 0);  -- ufix19
  SIGNAL if_tmp_0_1_out1_17               : signed(54 DOWNTO 0);  -- sfix55
  SIGNAL bitsll_R_1_out1_18               : signed(54 DOWNTO 0);  -- sfix55
  SIGNAL Delay26_PS_24_out1               : signed(54 DOWNTO 0);  -- sfix55
  SIGNAL Delay9_PS_24_out1                : signed(54 DOWNTO 0);  -- sfix55
  SIGNAL R_mant_b_norm_out1_19            : signed(54 DOWNTO 0);  -- sfix55
  SIGNAL Bit_Slice_out1_19                : std_logic;  -- ufix1
  SIGNAL Logical_Operator_out1_19         : std_logic;  -- ufix1
  SIGNAL Bit_Concat_out1_19               : unsigned(19 DOWNTO 0);  -- ufix20
  SIGNAL Delay28_PS_25_out1               : unsigned(19 DOWNTO 0);  -- ufix20
  SIGNAL if_tmp_0_1_out1_18               : signed(54 DOWNTO 0);  -- sfix55
  SIGNAL bitsll_R_1_out1_19               : signed(54 DOWNTO 0);  -- sfix55
  SIGNAL Delay27_PS_25_out1               : signed(54 DOWNTO 0);  -- sfix55
  SIGNAL Delay10_PS_25_out1               : signed(54 DOWNTO 0);  -- sfix55
  SIGNAL R_mant_b_norm_out1_20            : signed(54 DOWNTO 0);  -- sfix55
  SIGNAL Bit_Slice_out1_20                : std_logic;  -- ufix1
  SIGNAL Logical_Operator_out1_20         : std_logic;  -- ufix1
  SIGNAL Bit_Concat_out1_20               : unsigned(20 DOWNTO 0);  -- ufix21
  SIGNAL Delay3_PS_26_out1                : unsigned(20 DOWNTO 0);  -- ufix21
  SIGNAL if_tmp_0_1_out1_19               : signed(54 DOWNTO 0);  -- sfix55
  SIGNAL bitsll_R_1_out1_20               : signed(54 DOWNTO 0);  -- sfix55
  SIGNAL Delay4_PS_26_out1                : signed(54 DOWNTO 0);  -- sfix55
  SIGNAL Delay11_PS_26_out1               : signed(54 DOWNTO 0);  -- sfix55
  SIGNAL R_mant_b_norm_out1_21            : signed(54 DOWNTO 0);  -- sfix55
  SIGNAL Bit_Slice_out1_21                : std_logic;  -- ufix1
  SIGNAL Logical_Operator_out1_21         : std_logic;  -- ufix1
  SIGNAL Bit_Concat_out1_21               : unsigned(21 DOWNTO 0);  -- ufix22
  SIGNAL Delay18_PS_27_out1               : unsigned(21 DOWNTO 0);  -- ufix22
  SIGNAL if_tmp_0_1_out1_20               : signed(54 DOWNTO 0);  -- sfix55
  SIGNAL bitsll_R_1_out1_21               : signed(54 DOWNTO 0);  -- sfix55
  SIGNAL Delay5_PS_27_out1                : signed(54 DOWNTO 0);  -- sfix55
  SIGNAL Delay19_PS_27_out1               : signed(54 DOWNTO 0);  -- sfix55
  SIGNAL R_mant_b_norm_out1_22            : signed(54 DOWNTO 0);  -- sfix55
  SIGNAL Bit_Slice_out1_22                : std_logic;  -- ufix1
  SIGNAL Logical_Operator_out1_22         : std_logic;  -- ufix1
  SIGNAL Bit_Concat_out1_22               : unsigned(22 DOWNTO 0);  -- ufix23
  SIGNAL Delay21_PS_28_out1               : unsigned(22 DOWNTO 0);  -- ufix23
  SIGNAL if_tmp_0_1_out1_21               : signed(54 DOWNTO 0);  -- sfix55
  SIGNAL bitsll_R_1_out1_22               : signed(54 DOWNTO 0);  -- sfix55
  SIGNAL Delay22_PS_28_out1               : signed(54 DOWNTO 0);  -- sfix55
  SIGNAL Delay20_PS_28_out1               : signed(54 DOWNTO 0);  -- sfix55
  SIGNAL R_mant_b_norm_out1_23            : signed(54 DOWNTO 0);  -- sfix55
  SIGNAL Bit_Slice_out1_23                : std_logic;  -- ufix1
  SIGNAL Logical_Operator_out1_23         : std_logic;  -- ufix1
  SIGNAL Bit_Concat_out1_23               : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL Delay24_PS_29_out1               : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL if_tmp_0_1_out1_22               : signed(54 DOWNTO 0);  -- sfix55
  SIGNAL bitsll_R_1_out1_23               : signed(54 DOWNTO 0);  -- sfix55
  SIGNAL Delay23_PS_29_out1               : signed(54 DOWNTO 0);  -- sfix55
  SIGNAL Delay2_PS_29_out1                : signed(54 DOWNTO 0);  -- sfix55
  SIGNAL R_mant_b_norm_out1_24            : signed(54 DOWNTO 0);  -- sfix55
  SIGNAL Bit_Slice_out1_24                : std_logic;  -- ufix1
  SIGNAL Logical_Operator_out1_24         : std_logic;  -- ufix1
  SIGNAL Bit_Concat_out1_24               : unsigned(24 DOWNTO 0);  -- ufix25
  SIGNAL Delay16_PS_30_out1               : unsigned(24 DOWNTO 0);  -- ufix25
  SIGNAL if_tmp_0_1_out1_23               : signed(54 DOWNTO 0);  -- sfix55
  SIGNAL bitsll_R_1_out1_24               : signed(54 DOWNTO 0);  -- sfix55
  SIGNAL Delay17_PS_30_out1               : signed(54 DOWNTO 0);  -- sfix55
  SIGNAL Delay1_PS_30_out1                : signed(54 DOWNTO 0);  -- sfix55
  SIGNAL R_mant_b_norm_out1_25            : signed(54 DOWNTO 0);  -- sfix55
  SIGNAL Bit_Slice_out1_25                : std_logic;  -- ufix1
  SIGNAL Logical_Operator_out1_25         : std_logic;  -- ufix1
  SIGNAL Bit_Concat_out1_25               : unsigned(25 DOWNTO 0);  -- ufix26
  SIGNAL Delay7_PS_31_out1                : unsigned(25 DOWNTO 0);  -- ufix26
  SIGNAL if_tmp_0_1_out1_24               : signed(54 DOWNTO 0);  -- sfix55
  SIGNAL bitsll_R_1_out1_25               : signed(54 DOWNTO 0);  -- sfix55
  SIGNAL Delay6_PS_31_out1                : signed(54 DOWNTO 0);  -- sfix55
  SIGNAL Delay8_PS_31_out1                : signed(54 DOWNTO 0);  -- sfix55
  SIGNAL R_mant_b_norm_out1_26            : signed(54 DOWNTO 0);  -- sfix55
  SIGNAL Bit_Slice_out1_26                : std_logic;  -- ufix1
  SIGNAL Logical_Operator_out1_26         : std_logic;  -- ufix1
  SIGNAL Bit_Concat_out1_26               : unsigned(26 DOWNTO 0);  -- ufix27
  SIGNAL Delay25_PS_32_out1               : unsigned(26 DOWNTO 0);  -- ufix27
  SIGNAL if_tmp_0_1_out1_25               : signed(54 DOWNTO 0);  -- sfix55
  SIGNAL bitsll_R_1_out1_26               : signed(54 DOWNTO 0);  -- sfix55
  SIGNAL Delay26_PS_32_out1               : signed(54 DOWNTO 0);  -- sfix55
  SIGNAL Delay9_PS_32_out1                : signed(54 DOWNTO 0);  -- sfix55
  SIGNAL R_mant_b_norm_out1_27            : signed(54 DOWNTO 0);  -- sfix55
  SIGNAL Bit_Slice_out1_27                : std_logic;  -- ufix1
  SIGNAL Logical_Operator_out1_27         : std_logic;  -- ufix1
  SIGNAL Bit_Concat_out1_27               : unsigned(27 DOWNTO 0);  -- ufix28
  SIGNAL Delay28_PS_33_out1               : unsigned(27 DOWNTO 0);  -- ufix28
  SIGNAL if_tmp_0_1_out1_26               : signed(54 DOWNTO 0);  -- sfix55
  SIGNAL bitsll_R_1_out1_27               : signed(54 DOWNTO 0);  -- sfix55
  SIGNAL Delay27_PS_33_out1               : signed(54 DOWNTO 0);  -- sfix55
  SIGNAL Delay10_PS_33_out1               : signed(54 DOWNTO 0);  -- sfix55
  SIGNAL R_mant_b_norm_out1_28            : signed(54 DOWNTO 0);  -- sfix55
  SIGNAL Bit_Slice_out1_28                : std_logic;  -- ufix1
  SIGNAL Logical_Operator_out1_28         : std_logic;  -- ufix1
  SIGNAL Bit_Concat_out1_28               : unsigned(28 DOWNTO 0);  -- ufix29
  SIGNAL Delay3_PS_34_out1                : unsigned(28 DOWNTO 0);  -- ufix29
  SIGNAL if_tmp_0_1_out1_27               : signed(54 DOWNTO 0);  -- sfix55
  SIGNAL bitsll_R_1_out1_28               : signed(54 DOWNTO 0);  -- sfix55
  SIGNAL Delay4_PS_34_out1                : signed(54 DOWNTO 0);  -- sfix55
  SIGNAL Delay11_PS_34_out1               : signed(54 DOWNTO 0);  -- sfix55
  SIGNAL R_mant_b_norm_out1_29            : signed(54 DOWNTO 0);  -- sfix55
  SIGNAL Bit_Slice_out1_29                : std_logic;  -- ufix1
  SIGNAL Logical_Operator_out1_29         : std_logic;  -- ufix1
  SIGNAL Bit_Concat_out1_29               : unsigned(29 DOWNTO 0);  -- ufix30
  SIGNAL Delay18_PS_35_out1               : unsigned(29 DOWNTO 0);  -- ufix30
  SIGNAL if_tmp_0_1_out1_28               : signed(54 DOWNTO 0);  -- sfix55
  SIGNAL bitsll_R_1_out1_29               : signed(54 DOWNTO 0);  -- sfix55
  SIGNAL Delay5_PS_35_out1                : signed(54 DOWNTO 0);  -- sfix55
  SIGNAL Delay19_PS_35_out1               : signed(54 DOWNTO 0);  -- sfix55
  SIGNAL R_mant_b_norm_out1_30            : signed(54 DOWNTO 0);  -- sfix55
  SIGNAL Bit_Slice_out1_30                : std_logic;  -- ufix1
  SIGNAL Logical_Operator_out1_30         : std_logic;  -- ufix1
  SIGNAL Bit_Concat_out1_30               : unsigned(30 DOWNTO 0);  -- ufix31
  SIGNAL Delay21_PS_36_out1               : unsigned(30 DOWNTO 0);  -- ufix31
  SIGNAL if_tmp_0_1_out1_29               : signed(54 DOWNTO 0);  -- sfix55
  SIGNAL bitsll_R_1_out1_30               : signed(54 DOWNTO 0);  -- sfix55
  SIGNAL Delay22_PS_36_out1               : signed(54 DOWNTO 0);  -- sfix55
  SIGNAL Delay20_PS_36_out1               : signed(54 DOWNTO 0);  -- sfix55
  SIGNAL R_mant_b_norm_out1_31            : signed(54 DOWNTO 0);  -- sfix55
  SIGNAL Bit_Slice_out1_31                : std_logic;  -- ufix1
  SIGNAL Logical_Operator_out1_31         : std_logic;  -- ufix1
  SIGNAL Bit_Concat_out1_31               : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL Delay24_PS_37_out1               : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL if_tmp_0_1_out1_30               : signed(54 DOWNTO 0);  -- sfix55
  SIGNAL bitsll_R_1_out1_31               : signed(54 DOWNTO 0);  -- sfix55
  SIGNAL Delay23_PS_37_out1               : signed(54 DOWNTO 0);  -- sfix55
  SIGNAL Delay2_PS_37_out1                : signed(54 DOWNTO 0);  -- sfix55
  SIGNAL R_mant_b_norm_out1_32            : signed(54 DOWNTO 0);  -- sfix55
  SIGNAL Bit_Slice_out1_32                : std_logic;  -- ufix1
  SIGNAL Logical_Operator_out1_32         : std_logic;  -- ufix1
  SIGNAL Bit_Concat_out1_32               : unsigned(32 DOWNTO 0);  -- ufix33
  SIGNAL Delay16_PS_38_out1               : unsigned(32 DOWNTO 0);  -- ufix33
  SIGNAL if_tmp_0_1_out1_31               : signed(54 DOWNTO 0);  -- sfix55
  SIGNAL bitsll_R_1_out1_32               : signed(54 DOWNTO 0);  -- sfix55
  SIGNAL Delay17_PS_38_out1               : signed(54 DOWNTO 0);  -- sfix55
  SIGNAL Delay1_PS_38_out1                : signed(54 DOWNTO 0);  -- sfix55
  SIGNAL R_mant_b_norm_out1_33            : signed(54 DOWNTO 0);  -- sfix55
  SIGNAL Bit_Slice_out1_33                : std_logic;  -- ufix1
  SIGNAL Logical_Operator_out1_33         : std_logic;  -- ufix1
  SIGNAL Bit_Concat_out1_33               : unsigned(33 DOWNTO 0);  -- ufix34
  SIGNAL Delay7_PS_39_out1                : unsigned(33 DOWNTO 0);  -- ufix34
  SIGNAL if_tmp_0_1_out1_32               : signed(54 DOWNTO 0);  -- sfix55
  SIGNAL bitsll_R_1_out1_33               : signed(54 DOWNTO 0);  -- sfix55
  SIGNAL Delay6_PS_39_out1                : signed(54 DOWNTO 0);  -- sfix55
  SIGNAL Delay8_PS_39_out1                : signed(54 DOWNTO 0);  -- sfix55
  SIGNAL R_mant_b_norm_out1_34            : signed(54 DOWNTO 0);  -- sfix55
  SIGNAL Bit_Slice_out1_34                : std_logic;  -- ufix1
  SIGNAL Logical_Operator_out1_34         : std_logic;  -- ufix1
  SIGNAL Bit_Concat_out1_34               : unsigned(34 DOWNTO 0);  -- ufix35
  SIGNAL Delay25_PS_40_out1               : unsigned(34 DOWNTO 0);  -- ufix35
  SIGNAL if_tmp_0_1_out1_33               : signed(54 DOWNTO 0);  -- sfix55
  SIGNAL bitsll_R_1_out1_34               : signed(54 DOWNTO 0);  -- sfix55
  SIGNAL Delay26_PS_40_out1               : signed(54 DOWNTO 0);  -- sfix55
  SIGNAL Delay9_PS_40_out1                : signed(54 DOWNTO 0);  -- sfix55
  SIGNAL R_mant_b_norm_out1_35            : signed(54 DOWNTO 0);  -- sfix55
  SIGNAL Bit_Slice_out1_35                : std_logic;  -- ufix1
  SIGNAL Logical_Operator_out1_35         : std_logic;  -- ufix1
  SIGNAL Bit_Concat_out1_35               : unsigned(35 DOWNTO 0);  -- ufix36
  SIGNAL Delay28_PS_41_out1               : unsigned(35 DOWNTO 0);  -- ufix36
  SIGNAL if_tmp_0_1_out1_34               : signed(54 DOWNTO 0);  -- sfix55
  SIGNAL bitsll_R_1_out1_35               : signed(54 DOWNTO 0);  -- sfix55
  SIGNAL Delay27_PS_41_out1               : signed(54 DOWNTO 0);  -- sfix55
  SIGNAL Delay10_PS_41_out1               : signed(54 DOWNTO 0);  -- sfix55
  SIGNAL R_mant_b_norm_out1_36            : signed(54 DOWNTO 0);  -- sfix55
  SIGNAL Bit_Slice_out1_36                : std_logic;  -- ufix1
  SIGNAL Logical_Operator_out1_36         : std_logic;  -- ufix1
  SIGNAL Bit_Concat_out1_36               : unsigned(36 DOWNTO 0);  -- ufix37
  SIGNAL Delay3_PS_42_out1                : unsigned(36 DOWNTO 0);  -- ufix37
  SIGNAL if_tmp_0_1_out1_35               : signed(54 DOWNTO 0);  -- sfix55
  SIGNAL bitsll_R_1_out1_36               : signed(54 DOWNTO 0);  -- sfix55
  SIGNAL Delay4_PS_42_out1                : signed(54 DOWNTO 0);  -- sfix55
  SIGNAL Delay11_PS_42_out1               : signed(54 DOWNTO 0);  -- sfix55
  SIGNAL R_mant_b_norm_out1_37            : signed(54 DOWNTO 0);  -- sfix55
  SIGNAL Bit_Slice_out1_37                : std_logic;  -- ufix1
  SIGNAL Logical_Operator_out1_37         : std_logic;  -- ufix1
  SIGNAL Bit_Concat_out1_37               : unsigned(37 DOWNTO 0);  -- ufix38
  SIGNAL Delay18_PS_43_out1               : unsigned(37 DOWNTO 0);  -- ufix38
  SIGNAL if_tmp_0_1_out1_36               : signed(54 DOWNTO 0);  -- sfix55
  SIGNAL bitsll_R_1_out1_37               : signed(54 DOWNTO 0);  -- sfix55
  SIGNAL Delay5_PS_43_out1                : signed(54 DOWNTO 0);  -- sfix55
  SIGNAL Delay_PS_43_out1                 : signed(54 DOWNTO 0);  -- sfix55
  SIGNAL R_mant_b_norm_out1_38            : signed(54 DOWNTO 0);  -- sfix55
  SIGNAL Bit_Slice_out1_38                : std_logic;  -- ufix1
  SIGNAL Logical_Operator_out1_38         : std_logic;  -- ufix1
  SIGNAL Bit_Concat_out1_38               : unsigned(38 DOWNTO 0);  -- ufix39
  SIGNAL Delay21_PS_44_out1               : unsigned(38 DOWNTO 0);  -- ufix39
  SIGNAL if_tmp_0_1_out1_37               : signed(54 DOWNTO 0);  -- sfix55
  SIGNAL bitsll_R_1_out1_38               : signed(54 DOWNTO 0);  -- sfix55
  SIGNAL Delay22_PS_44_out1               : signed(54 DOWNTO 0);  -- sfix55
  SIGNAL Delay20_PS_44_out1               : signed(54 DOWNTO 0);  -- sfix55
  SIGNAL R_mant_b_norm_out1_39            : signed(54 DOWNTO 0);  -- sfix55
  SIGNAL Bit_Slice_out1_39                : std_logic;  -- ufix1
  SIGNAL Logical_Operator_out1_39         : std_logic;  -- ufix1
  SIGNAL Bit_Concat_out1_39               : unsigned(39 DOWNTO 0);  -- ufix40
  SIGNAL Delay24_PS_45_out1               : unsigned(39 DOWNTO 0);  -- ufix40
  SIGNAL if_tmp_0_1_out1_38               : signed(54 DOWNTO 0);  -- sfix55
  SIGNAL bitsll_R_1_out1_39               : signed(54 DOWNTO 0);  -- sfix55
  SIGNAL Delay23_PS_45_out1               : signed(54 DOWNTO 0);  -- sfix55
  SIGNAL Delay2_PS_45_out1                : signed(54 DOWNTO 0);  -- sfix55
  SIGNAL R_mant_b_norm_out1_40            : signed(54 DOWNTO 0);  -- sfix55
  SIGNAL Bit_Slice_out1_40                : std_logic;  -- ufix1
  SIGNAL Logical_Operator_out1_40         : std_logic;  -- ufix1
  SIGNAL Bit_Concat_out1_40               : unsigned(40 DOWNTO 0);  -- ufix41
  SIGNAL Delay16_PS_46_out1               : unsigned(40 DOWNTO 0);  -- ufix41
  SIGNAL if_tmp_0_1_out1_39               : signed(54 DOWNTO 0);  -- sfix55
  SIGNAL bitsll_R_1_out1_40               : signed(54 DOWNTO 0);  -- sfix55
  SIGNAL Delay17_PS_46_out1               : signed(54 DOWNTO 0);  -- sfix55
  SIGNAL Delay1_PS_46_out1                : signed(54 DOWNTO 0);  -- sfix55
  SIGNAL R_mant_b_norm_out1_41            : signed(54 DOWNTO 0);  -- sfix55
  SIGNAL Bit_Slice_out1_41                : std_logic;  -- ufix1
  SIGNAL Logical_Operator_out1_41         : std_logic;  -- ufix1
  SIGNAL Bit_Concat_out1_41               : unsigned(41 DOWNTO 0);  -- ufix42
  SIGNAL Delay7_PS_47_out1                : unsigned(41 DOWNTO 0);  -- ufix42
  SIGNAL if_tmp_0_1_out1_40               : signed(54 DOWNTO 0);  -- sfix55
  SIGNAL bitsll_R_1_out1_41               : signed(54 DOWNTO 0);  -- sfix55
  SIGNAL Delay6_PS_47_out1                : signed(54 DOWNTO 0);  -- sfix55
  SIGNAL Delay8_PS_47_out1                : signed(54 DOWNTO 0);  -- sfix55
  SIGNAL R_mant_b_norm_out1_42            : signed(54 DOWNTO 0);  -- sfix55
  SIGNAL Bit_Slice_out1_42                : std_logic;  -- ufix1
  SIGNAL Logical_Operator_out1_42         : std_logic;  -- ufix1
  SIGNAL Bit_Concat_out1_42               : unsigned(42 DOWNTO 0);  -- ufix43
  SIGNAL Delay25_PS_48_out1               : unsigned(42 DOWNTO 0);  -- ufix43
  SIGNAL if_tmp_0_1_out1_41               : signed(54 DOWNTO 0);  -- sfix55
  SIGNAL bitsll_R_1_out1_42               : signed(54 DOWNTO 0);  -- sfix55
  SIGNAL Delay26_PS_48_out1               : signed(54 DOWNTO 0);  -- sfix55
  SIGNAL Delay9_PS_48_out1                : signed(54 DOWNTO 0);  -- sfix55
  SIGNAL R_mant_b_norm_out1_43            : signed(54 DOWNTO 0);  -- sfix55
  SIGNAL Bit_Slice_out1_43                : std_logic;  -- ufix1
  SIGNAL Logical_Operator_out1_43         : std_logic;  -- ufix1
  SIGNAL Bit_Concat_out1_43               : unsigned(43 DOWNTO 0);  -- ufix44
  SIGNAL Delay28_PS_49_out1               : unsigned(43 DOWNTO 0);  -- ufix44
  SIGNAL if_tmp_0_1_out1_42               : signed(54 DOWNTO 0);  -- sfix55
  SIGNAL bitsll_R_1_out1_43               : signed(54 DOWNTO 0);  -- sfix55
  SIGNAL Delay27_PS_49_out1               : signed(54 DOWNTO 0);  -- sfix55
  SIGNAL Delay10_PS_49_out1               : signed(54 DOWNTO 0);  -- sfix55
  SIGNAL R_mant_b_norm_out1_44            : signed(54 DOWNTO 0);  -- sfix55
  SIGNAL Bit_Slice_out1_44                : std_logic;  -- ufix1
  SIGNAL Logical_Operator_out1_44         : std_logic;  -- ufix1
  SIGNAL Bit_Concat_out1_44               : unsigned(44 DOWNTO 0);  -- ufix45
  SIGNAL Delay3_PS_50_out1                : unsigned(44 DOWNTO 0);  -- ufix45
  SIGNAL if_tmp_0_1_out1_43               : signed(54 DOWNTO 0);  -- sfix55
  SIGNAL bitsll_R_1_out1_44               : signed(54 DOWNTO 0);  -- sfix55
  SIGNAL Delay4_PS_50_out1                : signed(54 DOWNTO 0);  -- sfix55
  SIGNAL Delay11_PS_50_out1               : signed(54 DOWNTO 0);  -- sfix55
  SIGNAL R_mant_b_norm_out1_45            : signed(54 DOWNTO 0);  -- sfix55
  SIGNAL Bit_Slice_out1_45                : std_logic;  -- ufix1
  SIGNAL Logical_Operator_out1_45         : std_logic;  -- ufix1
  SIGNAL Bit_Concat_out1_45               : unsigned(45 DOWNTO 0);  -- ufix46
  SIGNAL Delay18_PS_51_out1               : unsigned(45 DOWNTO 0);  -- ufix46
  SIGNAL if_tmp_0_1_out1_44               : signed(54 DOWNTO 0);  -- sfix55
  SIGNAL bitsll_R_1_out1_45               : signed(54 DOWNTO 0);  -- sfix55
  SIGNAL Delay5_PS_51_out1                : signed(54 DOWNTO 0);  -- sfix55
  SIGNAL Delay19_PS_51_out1               : signed(54 DOWNTO 0);  -- sfix55
  SIGNAL R_mant_b_norm_out1_46            : signed(54 DOWNTO 0);  -- sfix55
  SIGNAL Bit_Slice_out1_46                : std_logic;  -- ufix1
  SIGNAL Logical_Operator_out1_46         : std_logic;  -- ufix1
  SIGNAL Bit_Concat_out1_46               : unsigned(46 DOWNTO 0);  -- ufix47
  SIGNAL Delay21_PS_52_out1               : unsigned(46 DOWNTO 0);  -- ufix47
  SIGNAL if_tmp_0_1_out1_45               : signed(54 DOWNTO 0);  -- sfix55
  SIGNAL bitsll_R_1_out1_46               : signed(54 DOWNTO 0);  -- sfix55
  SIGNAL Delay22_PS_52_out1               : signed(54 DOWNTO 0);  -- sfix55
  SIGNAL Delay20_PS_52_out1               : signed(54 DOWNTO 0);  -- sfix55
  SIGNAL R_mant_b_norm_out1_47            : signed(54 DOWNTO 0);  -- sfix55
  SIGNAL Bit_Slice_out1_47                : std_logic;  -- ufix1
  SIGNAL Logical_Operator_out1_47         : std_logic;  -- ufix1
  SIGNAL Bit_Concat_out1_47               : unsigned(47 DOWNTO 0);  -- ufix48
  SIGNAL Delay24_PS_53_out1               : unsigned(47 DOWNTO 0);  -- ufix48
  SIGNAL if_tmp_0_1_out1_46               : signed(54 DOWNTO 0);  -- sfix55
  SIGNAL bitsll_R_1_out1_47               : signed(54 DOWNTO 0);  -- sfix55
  SIGNAL Delay23_PS_53_out1               : signed(54 DOWNTO 0);  -- sfix55
  SIGNAL Delay2_PS_53_out1                : signed(54 DOWNTO 0);  -- sfix55
  SIGNAL R_mant_b_norm_out1_48            : signed(54 DOWNTO 0);  -- sfix55
  SIGNAL Bit_Slice_out1_48                : std_logic;  -- ufix1
  SIGNAL Logical_Operator_out1_48         : std_logic;  -- ufix1
  SIGNAL Bit_Concat_out1_48               : unsigned(48 DOWNTO 0);  -- ufix49
  SIGNAL Delay16_PS_54_out1               : unsigned(48 DOWNTO 0);  -- ufix49
  SIGNAL if_tmp_0_1_out1_47               : signed(54 DOWNTO 0);  -- sfix55
  SIGNAL bitsll_R_1_out1_48               : signed(54 DOWNTO 0);  -- sfix55
  SIGNAL Delay17_PS_54_out1               : signed(54 DOWNTO 0);  -- sfix55
  SIGNAL Delay1_PS_54_out1                : signed(54 DOWNTO 0);  -- sfix55
  SIGNAL R_mant_b_norm_out1_49            : signed(54 DOWNTO 0);  -- sfix55
  SIGNAL Bit_Slice_out1_49                : std_logic;  -- ufix1
  SIGNAL Logical_Operator_out1_49         : std_logic;  -- ufix1
  SIGNAL Bit_Concat_out1_49               : unsigned(49 DOWNTO 0);  -- ufix50
  SIGNAL Delay7_PS_55_out1                : unsigned(49 DOWNTO 0);  -- ufix50
  SIGNAL if_tmp_0_1_out1_48               : signed(54 DOWNTO 0);  -- sfix55
  SIGNAL bitsll_R_1_out1_49               : signed(54 DOWNTO 0);  -- sfix55
  SIGNAL Delay6_PS_55_out1                : signed(54 DOWNTO 0);  -- sfix55
  SIGNAL Delay8_PS_55_out1                : signed(54 DOWNTO 0);  -- sfix55
  SIGNAL R_mant_b_norm_out1_50            : signed(54 DOWNTO 0);  -- sfix55
  SIGNAL Bit_Slice_out1_50                : std_logic;  -- ufix1
  SIGNAL Logical_Operator_out1_50         : std_logic;  -- ufix1
  SIGNAL Bit_Concat_out1_50               : unsigned(50 DOWNTO 0);  -- ufix51
  SIGNAL Delay25_PS_56_out1               : unsigned(50 DOWNTO 0);  -- ufix51
  SIGNAL if_tmp_0_1_out1_49               : signed(54 DOWNTO 0);  -- sfix55
  SIGNAL bitsll_R_1_out1_50               : signed(54 DOWNTO 0);  -- sfix55
  SIGNAL Delay26_PS_56_out1               : signed(54 DOWNTO 0);  -- sfix55
  SIGNAL Delay9_PS_56_out1                : signed(54 DOWNTO 0);  -- sfix55
  SIGNAL R_mant_b_norm_out1_51            : signed(54 DOWNTO 0);  -- sfix55
  SIGNAL Bit_Slice_out1_51                : std_logic;  -- ufix1
  SIGNAL Logical_Operator_out1_51         : std_logic;  -- ufix1
  SIGNAL Bit_Concat_out1_51               : unsigned(51 DOWNTO 0);  -- ufix52
  SIGNAL Delay28_PS_57_out1               : unsigned(51 DOWNTO 0);  -- ufix52
  SIGNAL if_tmp_0_1_out1_50               : signed(54 DOWNTO 0);  -- sfix55
  SIGNAL bitsll_R_1_out1_51               : signed(54 DOWNTO 0);  -- sfix55
  SIGNAL Delay27_PS_57_out1               : signed(54 DOWNTO 0);  -- sfix55
  SIGNAL Delay10_PS_57_out1               : signed(54 DOWNTO 0);  -- sfix55
  SIGNAL R_mant_b_norm_out1_52            : signed(54 DOWNTO 0);  -- sfix55
  SIGNAL Bit_Slice_out1_52                : std_logic;  -- ufix1
  SIGNAL Logical_Operator_out1_52         : std_logic;  -- ufix1
  SIGNAL Bit_Concat_out1_52               : unsigned(52 DOWNTO 0);  -- ufix53
  SIGNAL Delay3_PS_58_out1                : unsigned(52 DOWNTO 0);  -- ufix53
  SIGNAL if_tmp_0_1_out1_51               : signed(54 DOWNTO 0);  -- sfix55
  SIGNAL bitsll_R_1_out1_52               : signed(54 DOWNTO 0);  -- sfix55
  SIGNAL Delay4_PS_58_out1                : signed(54 DOWNTO 0);  -- sfix55
  SIGNAL Delay11_PS_58_out1               : signed(54 DOWNTO 0);  -- sfix55
  SIGNAL R_mant_b_norm_out1_53            : signed(54 DOWNTO 0);  -- sfix55
  SIGNAL Bit_Slice_out1_53                : std_logic;  -- ufix1
  SIGNAL Logical_Operator_out1_53         : std_logic;  -- ufix1
  SIGNAL Bit_Concat_out1_53               : unsigned(53 DOWNTO 0);  -- ufix54
  SIGNAL Delay6_PS_59_out1                : unsigned(53 DOWNTO 0);  -- ufix54
  SIGNAL C_out1_4                         : unsigned(53 DOWNTO 0);  -- ufix54
  SIGNAL if_shift_length_1_out1           : unsigned(53 DOWNTO 0);  -- ufix54
  SIGNAL bitsrl_Q_1_out1                  : unsigned(53 DOWNTO 0);  -- ufix54
  SIGNAL if_shift_length_1_out1_1         : unsigned(53 DOWNTO 0);  -- ufix54
  SIGNAL BitSlice_out1                    : unsigned(52 DOWNTO 0);  -- ufix53
  SIGNAL Delay9_PS_60_out1                : unsigned(52 DOWNTO 0);  -- ufix53
  SIGNAL BitSlice1_out1                   : std_logic;  -- ufix1
  SIGNAL if_tmp_0_1_out1_52               : signed(54 DOWNTO 0);  -- sfix55
  SIGNAL bitsll_R_1_out1_53               : signed(54 DOWNTO 0);  -- sfix55
  SIGNAL Bit_Slice33_out1                 : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL Bit_Slice33_out1_is_not0         : std_logic;
  SIGNAL Bit_Slice33_out1_is_not0_1       : std_logic;
  SIGNAL Logical_Operator11_out1          : std_logic;  -- ufix1
  SIGNAL Bit_Slice1_out1_1                : std_logic;  -- ufix1
  SIGNAL Logical_Operator2_out1           : std_logic;  -- ufix1
  SIGNAL Logical_Operator1_out1           : std_logic;  -- ufix1
  SIGNAL Bit_Slice3_out1                  : std_logic;  -- ufix1
  SIGNAL Bit_Slice5_out1                  : std_logic;  -- ufix1
  SIGNAL Logical_Operator2_out1_1         : std_logic;  -- ufix1
  SIGNAL Bit_Slice1_out1_2                : std_logic;  -- ufix1
  SIGNAL Logical_Operator1_out1_1         : std_logic;  -- ufix1
  SIGNAL Bit_Slice2_out1                  : std_logic;  -- ufix1
  SIGNAL Bit_Slice_out1_54                : std_logic;  -- ufix1
  SIGNAL Logical_Operator7_out1           : std_logic;  -- ufix1
  SIGNAL Logical_Operator3_out1           : std_logic;  -- ufix1
  SIGNAL Bit_Slice32_out1                 : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL Bit_Reduce12_out1                : std_logic;  -- ufix1
  SIGNAL Bit_Slice30_out1                 : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL Bit_Reduce11_out1                : std_logic;  -- ufix1
  SIGNAL Bit_Slice24_out1                 : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL Bit_Reduce10_out1                : std_logic;  -- ufix1
  SIGNAL Bit_Slice28_out1                 : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL Bit_Reduce9_out1                 : std_logic;  -- ufix1
  SIGNAL Bit_Slice22_out1                 : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL Bit_Reduce8_out1                 : std_logic;  -- ufix1
  SIGNAL Bit_Slice20_out1                 : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL Bit_Reduce7_out1                 : std_logic;  -- ufix1
  SIGNAL Bit_Slice16_out1                 : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL Bit_Reduce6_out1                 : std_logic;  -- ufix1
  SIGNAL Bit_Slice14_out1                 : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL Bit_Reduce5_out1                 : std_logic;  -- ufix1
  SIGNAL Bit_Slice18_out1                 : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL Bit_Reduce4_out1                 : std_logic;  -- ufix1
  SIGNAL Bit_Slice12_out1                 : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL Bit_Reduce3_out1                 : std_logic;  -- ufix1
  SIGNAL Bit_Slice10_out1                 : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL Bit_Reduce2_out1                 : std_logic;  -- ufix1
  SIGNAL Bit_Slice8_out1                  : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL Bit_Reduce1_out1                 : std_logic;  -- ufix1
  SIGNAL Bit_Slice6_out1                  : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL Bit_Reduce_out1                  : std_logic;  -- ufix1
  SIGNAL Logical_Operator1_out1_2         : std_logic;  -- ufix1
  SIGNAL Logical_Operator2_out1_2         : std_logic;  -- ufix1
  SIGNAL Logical_Operator3_out1_1         : std_logic;  -- ufix1
  SIGNAL Logical_Operator4_out1           : std_logic;  -- ufix1
  SIGNAL Logical_Operator5_out1           : std_logic;  -- ufix1
  SIGNAL Logical_Operator6_out1           : std_logic;  -- ufix1
  SIGNAL Logical_Operator7_out1_1         : std_logic;  -- ufix1
  SIGNAL Logical_Operator8_out1           : std_logic;  -- ufix1
  SIGNAL Logical_Operator9_out1           : std_logic;  -- ufix1
  SIGNAL Logical_Operator10_out1          : std_logic;  -- ufix1
  SIGNAL Logical_Operator12_out1          : std_logic;  -- ufix1
  SIGNAL Logical_Operator4_out1_1         : std_logic;  -- ufix1
  SIGNAL Logical_Operator13_out1          : std_logic;  -- ufix1
  SIGNAL Logical_Operator6_out1_1         : std_logic;  -- ufix1
  SIGNAL Logical_Operator5_out1_1         : std_logic;  -- ufix1
  SIGNAL Bit_Slice31_out1                 : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL Bit_Slice2_out1_1                : std_logic;  -- ufix1
  SIGNAL Logical_Operator2_out1_3         : std_logic;  -- ufix1
  SIGNAL Bit_Slice1_out1_3                : std_logic;  -- ufix1
  SIGNAL Logical_Operator1_out1_3         : std_logic;  -- ufix1
  SIGNAL Logical_Operator4_out1_2         : std_logic;  -- ufix1
  SIGNAL Bit_Slice_out1_55                : std_logic;  -- ufix1
  SIGNAL Logical_Operator7_out1_2         : std_logic;  -- ufix1
  SIGNAL Logical_Operator3_out1_2         : std_logic;  -- ufix1
  SIGNAL Logical_Operator4_out1_3         : std_logic;  -- ufix1
  SIGNAL Logical_Operator3_out1_3         : std_logic;  -- ufix1
  SIGNAL Logical_Operator6_out1_2         : std_logic;  -- ufix1
  SIGNAL Logical_Operator5_out1_2         : std_logic;  -- ufix1
  SIGNAL Logical_Operator6_out1_3         : std_logic;  -- ufix1
  SIGNAL Logical_Operator5_out1_3         : std_logic;  -- ufix1
  SIGNAL Bit_Slice4_out1                  : std_logic;  -- ufix1
  SIGNAL Bit_Slice25_out1                 : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL Bit_Slice2_out1_2                : std_logic;  -- ufix1
  SIGNAL Logical_Operator2_out1_4         : std_logic;  -- ufix1
  SIGNAL Bit_Slice1_out1_4                : std_logic;  -- ufix1
  SIGNAL Logical_Operator1_out1_4         : std_logic;  -- ufix1
  SIGNAL Logical_Operator4_out1_4         : std_logic;  -- ufix1
  SIGNAL Bit_Slice_out1_56                : std_logic;  -- ufix1
  SIGNAL Logical_Operator7_out1_3         : std_logic;  -- ufix1
  SIGNAL Logical_Operator3_out1_4         : std_logic;  -- ufix1
  SIGNAL Logical_Operator6_out1_4         : std_logic;  -- ufix1
  SIGNAL Logical_Operator5_out1_4         : std_logic;  -- ufix1
  SIGNAL Bit_Slice29_out1                 : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL Bit_Slice2_out1_3                : std_logic;  -- ufix1
  SIGNAL Logical_Operator2_out1_5         : std_logic;  -- ufix1
  SIGNAL Bit_Slice1_out1_5                : std_logic;  -- ufix1
  SIGNAL Logical_Operator1_out1_5         : std_logic;  -- ufix1
  SIGNAL Logical_Operator4_out1_5         : std_logic;  -- ufix1
  SIGNAL Bit_Slice_out1_57                : std_logic;  -- ufix1
  SIGNAL Logical_Operator7_out1_4         : std_logic;  -- ufix1
  SIGNAL Logical_Operator3_out1_5         : std_logic;  -- ufix1
  SIGNAL Logical_Operator2_out1_6         : std_logic;  -- ufix1
  SIGNAL Logical_Operator6_out1_5         : std_logic;  -- ufix1
  SIGNAL Logical_Operator5_out1_5         : std_logic;  -- ufix1
  SIGNAL Logical_Operator1_out1_6         : std_logic;  -- ufix1
  SIGNAL Bit_Slice23_out1                 : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL Bit_Slice2_out1_4                : std_logic;  -- ufix1
  SIGNAL Logical_Operator2_out1_7         : std_logic;  -- ufix1
  SIGNAL Bit_Slice1_out1_6                : std_logic;  -- ufix1
  SIGNAL Logical_Operator1_out1_7         : std_logic;  -- ufix1
  SIGNAL Logical_Operator4_out1_6         : std_logic;  -- ufix1
  SIGNAL Bit_Slice_out1_58                : std_logic;  -- ufix1
  SIGNAL Logical_Operator7_out1_5         : std_logic;  -- ufix1
  SIGNAL Logical_Operator3_out1_6         : std_logic;  -- ufix1
  SIGNAL Logical_Operator6_out1_6         : std_logic;  -- ufix1
  SIGNAL Logical_Operator5_out1_6         : std_logic;  -- ufix1
  SIGNAL Bit_Slice21_out1                 : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL Bit_Slice2_out1_5                : std_logic;  -- ufix1
  SIGNAL Logical_Operator2_out1_8         : std_logic;  -- ufix1
  SIGNAL Bit_Slice1_out1_7                : std_logic;  -- ufix1
  SIGNAL Logical_Operator1_out1_8         : std_logic;  -- ufix1
  SIGNAL Logical_Operator4_out1_7         : std_logic;  -- ufix1
  SIGNAL Bit_Slice_out1_59                : std_logic;  -- ufix1
  SIGNAL Logical_Operator7_out1_6         : std_logic;  -- ufix1
  SIGNAL Logical_Operator3_out1_7         : std_logic;  -- ufix1
  SIGNAL Logical_Operator2_out1_9         : std_logic;  -- ufix1
  SIGNAL Logical_Operator4_out1_8         : std_logic;  -- ufix1
  SIGNAL Logical_Operator3_out1_8         : std_logic;  -- ufix1
  SIGNAL Logical_Operator6_out1_7         : std_logic;  -- ufix1
  SIGNAL Logical_Operator5_out1_7         : std_logic;  -- ufix1
  SIGNAL Logical_Operator6_out1_8         : std_logic;  -- ufix1
  SIGNAL Logical_Operator5_out1_8         : std_logic;  -- ufix1
  SIGNAL Logical_Operator1_out1_9         : std_logic;  -- ufix1
  SIGNAL Bit_Slice17_out1                 : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL Bit_Slice2_out1_6                : std_logic;  -- ufix1
  SIGNAL Logical_Operator2_out1_10        : std_logic;  -- ufix1
  SIGNAL Bit_Slice1_out1_8                : std_logic;  -- ufix1
  SIGNAL Logical_Operator1_out1_10        : std_logic;  -- ufix1
  SIGNAL Logical_Operator4_out1_9         : std_logic;  -- ufix1
  SIGNAL Bit_Slice_out1_60                : std_logic;  -- ufix1
  SIGNAL Logical_Operator7_out1_7         : std_logic;  -- ufix1
  SIGNAL Logical_Operator3_out1_9         : std_logic;  -- ufix1
  SIGNAL Logical_Operator6_out1_9         : std_logic;  -- ufix1
  SIGNAL Logical_Operator5_out1_9         : std_logic;  -- ufix1
  SIGNAL Bit_Slice15_out1                 : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL Bit_Slice2_out1_7                : std_logic;  -- ufix1
  SIGNAL Logical_Operator2_out1_11        : std_logic;  -- ufix1
  SIGNAL Bit_Slice1_out1_9                : std_logic;  -- ufix1
  SIGNAL Logical_Operator1_out1_11        : std_logic;  -- ufix1
  SIGNAL Logical_Operator4_out1_10        : std_logic;  -- ufix1
  SIGNAL Bit_Slice_out1_61                : std_logic;  -- ufix1
  SIGNAL Logical_Operator7_out1_8         : std_logic;  -- ufix1
  SIGNAL Logical_Operator3_out1_10        : std_logic;  -- ufix1
  SIGNAL Logical_Operator2_out1_12        : std_logic;  -- ufix1
  SIGNAL Logical_Operator6_out1_10        : std_logic;  -- ufix1
  SIGNAL Logical_Operator5_out1_10        : std_logic;  -- ufix1
  SIGNAL Logical_Operator1_out1_12        : std_logic;  -- ufix1
  SIGNAL Bit_Slice19_out1                 : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL Bit_Slice2_out1_8                : std_logic;  -- ufix1
  SIGNAL Logical_Operator2_out1_13        : std_logic;  -- ufix1
  SIGNAL Bit_Slice1_out1_10               : std_logic;  -- ufix1
  SIGNAL Logical_Operator1_out1_13        : std_logic;  -- ufix1
  SIGNAL Logical_Operator4_out1_11        : std_logic;  -- ufix1
  SIGNAL Bit_Slice_out1_62                : std_logic;  -- ufix1
  SIGNAL Logical_Operator7_out1_9         : std_logic;  -- ufix1
  SIGNAL Logical_Operator3_out1_11        : std_logic;  -- ufix1
  SIGNAL Logical_Operator6_out1_11        : std_logic;  -- ufix1
  SIGNAL Logical_Operator5_out1_11        : std_logic;  -- ufix1
  SIGNAL Bit_Slice13_out1                 : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL Bit_Slice2_out1_9                : std_logic;  -- ufix1
  SIGNAL Logical_Operator2_out1_14        : std_logic;  -- ufix1
  SIGNAL Bit_Slice1_out1_11               : std_logic;  -- ufix1
  SIGNAL Logical_Operator1_out1_14        : std_logic;  -- ufix1
  SIGNAL Logical_Operator4_out1_12        : std_logic;  -- ufix1
  SIGNAL Bit_Slice_out1_63                : std_logic;  -- ufix1
  SIGNAL Logical_Operator7_out1_10        : std_logic;  -- ufix1
  SIGNAL Logical_Operator3_out1_12        : std_logic;  -- ufix1
  SIGNAL Logical_Operator4_out1_13        : std_logic;  -- ufix1
  SIGNAL Logical_Operator3_out1_13        : std_logic;  -- ufix1
  SIGNAL Logical_Operator6_out1_12        : std_logic;  -- ufix1
  SIGNAL Logical_Operator5_out1_12        : std_logic;  -- ufix1
  SIGNAL Logical_Operator6_out1_13        : std_logic;  -- ufix1
  SIGNAL Logical_Operator5_out1_13        : std_logic;  -- ufix1
  SIGNAL Bit_Slice11_out1                 : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL Bit_Slice2_out1_10               : std_logic;  -- ufix1
  SIGNAL Logical_Operator2_out1_15        : std_logic;  -- ufix1
  SIGNAL Bit_Slice1_out1_12               : std_logic;  -- ufix1
  SIGNAL Logical_Operator1_out1_15        : std_logic;  -- ufix1
  SIGNAL Logical_Operator4_out1_14        : std_logic;  -- ufix1
  SIGNAL Bit_Slice_out1_64                : std_logic;  -- ufix1
  SIGNAL Logical_Operator7_out1_11        : std_logic;  -- ufix1
  SIGNAL Logical_Operator3_out1_14        : std_logic;  -- ufix1
  SIGNAL Logical_Operator6_out1_14        : std_logic;  -- ufix1
  SIGNAL Logical_Operator5_out1_14        : std_logic;  -- ufix1
  SIGNAL Bit_Slice9_out1                  : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL Bit_Slice2_out1_11               : std_logic;  -- ufix1
  SIGNAL Logical_Operator2_out1_16        : std_logic;  -- ufix1
  SIGNAL Bit_Slice1_out1_13               : std_logic;  -- ufix1
  SIGNAL Logical_Operator1_out1_16        : std_logic;  -- ufix1
  SIGNAL Logical_Operator4_out1_15        : std_logic;  -- ufix1
  SIGNAL Bit_Slice_out1_65                : std_logic;  -- ufix1
  SIGNAL Logical_Operator7_out1_12        : std_logic;  -- ufix1
  SIGNAL Logical_Operator3_out1_15        : std_logic;  -- ufix1
  SIGNAL Logical_Operator2_out1_17        : std_logic;  -- ufix1
  SIGNAL Logical_Operator6_out1_15        : std_logic;  -- ufix1
  SIGNAL Logical_Operator5_out1_15        : std_logic;  -- ufix1
  SIGNAL Logical_Operator1_out1_17        : std_logic;  -- ufix1
  SIGNAL Bit_Slice7_out1                  : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL Bit_Slice2_out1_12               : std_logic;  -- ufix1
  SIGNAL Logical_Operator2_out1_18        : std_logic;  -- ufix1
  SIGNAL Bit_Slice1_out1_14               : std_logic;  -- ufix1
  SIGNAL Logical_Operator1_out1_18        : std_logic;  -- ufix1
  SIGNAL Logical_Operator4_out1_16        : std_logic;  -- ufix1
  SIGNAL Bit_Slice_out1_66                : std_logic;  -- ufix1
  SIGNAL Logical_Operator7_out1_13        : std_logic;  -- ufix1
  SIGNAL Logical_Operator3_out1_16        : std_logic;  -- ufix1
  SIGNAL Logical_Operator6_out1_16        : std_logic;  -- ufix1
  SIGNAL Logical_Operator5_out1_16        : std_logic;  -- ufix1
  SIGNAL Bit_Slice_out1_67                : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL Bit_Slice2_out1_13               : std_logic;  -- ufix1
  SIGNAL Logical_Operator2_out1_19        : std_logic;  -- ufix1
  SIGNAL Bit_Slice1_out1_15               : std_logic;  -- ufix1
  SIGNAL Logical_Operator1_out1_19        : std_logic;  -- ufix1
  SIGNAL Bit_Slice_out1_68                : std_logic;  -- ufix1
  SIGNAL Logical_Operator7_out1_14        : std_logic;  -- ufix1
  SIGNAL Logical_Operator3_out1_17        : std_logic;  -- ufix1
  SIGNAL Delay7_PS_59_out1                : signed(54 DOWNTO 0);  -- sfix55
  SIGNAL R_0_out1                         : std_logic;  -- ufix1
  SIGNAL Bit_Slice27_out1                 : std_logic;  -- ufix1
  SIGNAL Logical_Operator4_out1_17        : std_logic;  -- ufix1
  SIGNAL Logical_Operator3_out1_18        : std_logic;  -- ufix1
  SIGNAL Logical_Operator4_out1_18        : std_logic;  -- ufix1
  SIGNAL Logical_Operator3_out1_19        : std_logic;  -- ufix1
  SIGNAL Logical_Operator4_out1_19        : std_logic;  -- ufix1
  SIGNAL Constant_out1_2                  : std_logic;  -- ufix1
  SIGNAL Logical_Operator6_out1_17        : std_logic;  -- ufix1
  SIGNAL Logical_Operator5_out1_17        : std_logic;  -- ufix1
  SIGNAL Logical_Operator6_out1_18        : std_logic;  -- ufix1
  SIGNAL Logical_Operator5_out1_18        : std_logic;  -- ufix1
  SIGNAL Logical_Operator6_out1_19        : std_logic;  -- ufix1
  SIGNAL Logical_Operator5_out1_19        : std_logic;  -- ufix1
  SIGNAL sticky_bitsll_Q_Q_WordLen_out1   : std_logic;  -- ufix1
  SIGNAL BitSlice_out1_1                  : std_logic;  -- ufix1
  SIGNAL Delay10_PS_60_out1               : std_logic;  -- ufix1
  SIGNAL alphabitget_Mant_tmp_2_0_out1    : std_logic;  -- ufix1
  SIGNAL alphabitget_Mant_tmp_1_0_out1    : std_logic;  -- ufix1
  SIGNAL alpha0_out1_3                    : std_logic;  -- ufix1
  SIGNAL BitSlice4_out1                   : unsigned(51 DOWNTO 0);  -- ufix52
  SIGNAL Bit_Concat_out1_54               : unsigned(52 DOWNTO 0);  -- ufix53
  SIGNAL alpha2_out1                      : unsigned(52 DOWNTO 0);  -- ufix53
  SIGNAL Mant_tmp_2_out1                  : unsigned(52 DOWNTO 0);  -- ufix53
  SIGNAL if_bitget_Mant_tmp_1_0_out1      : unsigned(52 DOWNTO 0);  -- ufix53
  SIGNAL BitSlice2_out1                   : std_logic;  -- ufix1
  SIGNAL DTC1_out1_1                      : unsigned(10 DOWNTO 0);  -- ufix11
  SIGNAL C2_out1                          : unsigned(10 DOWNTO 0);  -- ufix11
  SIGNAL if_exp_tmp_1_out1                : unsigned(10 DOWNTO 0);  -- ufix11
  SIGNAL C4_out1                          : unsigned(10 DOWNTO 0);  -- ufix11
  SIGNAL if_exp_tmp_2_cfType_ExponentB_out1 : unsigned(10 DOWNTO 0);  -- ufix11
  SIGNAL Delay8_PS_60_reg                 : vector_of_unsigned11(0 TO 53);  -- ufix11 [54]
  SIGNAL Delay8_PS_60_reg_next            : vector_of_unsigned11(0 TO 53);  -- ufix11 [54]
  SIGNAL Delay8_PS_60_out1                : unsigned(10 DOWNTO 0);  -- ufix11
  SIGNAL alpha1_out1_3                    : unsigned(10 DOWNTO 0);  -- ufix11
  SIGNAL Exp_1_out1                       : unsigned(10 DOWNTO 0);  -- ufix11
  SIGNAL if_bitget_Mant_tmp_Mant_tmp_Wor_out1 : unsigned(10 DOWNTO 0);  -- ufix11
  SIGNAL C4_out1_1                        : unsigned(10 DOWNTO 0);  -- ufix11
  SIGNAL if_bExponent_0_bMantissa_out1    : unsigned(10 DOWNTO 0);  -- ufix11
  SIGNAL C1_out1_1                        : unsigned(10 DOWNTO 0);  -- ufix11
  SIGNAL C_out1_5                         : unsigned(10 DOWNTO 0);  -- ufix11
  SIGNAL if_bExponent_0_bMantissa_out1_1  : unsigned(10 DOWNTO 0);  -- ufix11
  SIGNAL if_aExponent_0_aMantissa_out1    : unsigned(10 DOWNTO 0);  -- ufix11
  SIGNAL Delay57_PS_2_out1                : std_logic;  -- ufix1
  SIGNAL Delay59_PS_2_out1                : std_logic;  -- ufix1
  SIGNAL Delay3_PS_2_out1                 : unsigned(10 DOWNTO 0);  -- ufix11
  SIGNAL C1_out1_2                        : unsigned(10 DOWNTO 0);  -- ufix11
  SIGNAL if_mant_b_0_out1                 : unsigned(10 DOWNTO 0);  -- ufix11
  SIGNAL Delay1_PS_2_out1                 : unsigned(10 DOWNTO 0);  -- ufix11
  SIGNAL if_exp_a_cfType_Exponent_Inf_out1 : unsigned(10 DOWNTO 0);  -- ufix11
  SIGNAL Delay39PS_5_reg                  : vector_of_unsigned11(0 TO 2);  -- ufix11 [3]
  SIGNAL Delay39PS_5_reg_next             : vector_of_unsigned11(0 TO 2);  -- ufix11 [3]
  SIGNAL Delay39PS_5_out1                 : unsigned(10 DOWNTO 0);  -- ufix11
  SIGNAL Delay55_PS_60_reg                : vector_of_unsigned11(0 TO 54);  -- ufix11 [55]
  SIGNAL Delay55_PS_60_reg_next           : vector_of_unsigned11(0 TO 54);  -- ufix11 [55]
  SIGNAL Delay55_PS_60_out1               : unsigned(10 DOWNTO 0);  -- ufix11
  SIGNAL if_aExponent_cfType_Exponent_out1 : unsigned(10 DOWNTO 0);  -- ufix11
  SIGNAL Constant3_out1                   : unsigned(10 DOWNTO 0);  -- ufix11
  SIGNAL Switch6_out1                     : unsigned(10 DOWNTO 0);  -- ufix11
  SIGNAL Delay4_PS_61_out1                : unsigned(10 DOWNTO 0);  -- ufix11
  SIGNAL Compare_To_Zero_out1             : std_logic;  -- ufix1
  SIGNAL Logical_Operator_out1_54         : std_logic;  -- ufix1
  SIGNAL BitSlice3_out1                   : unsigned(51 DOWNTO 0);  -- ufix52
  SIGNAL C_out1_6                         : unsigned(51 DOWNTO 0);  -- ufix52
  SIGNAL if_bitget_Mant_tmp_Mant_tmp_Wor_1_out1 : unsigned(51 DOWNTO 0);  -- ufix52
  SIGNAL C5_out1_1                        : unsigned(51 DOWNTO 0);  -- ufix52
  SIGNAL if_bExponent_0_bMantissa_1_out1  : unsigned(51 DOWNTO 0);  -- ufix52
  SIGNAL C3_out1_1                        : unsigned(51 DOWNTO 0);  -- ufix52
  SIGNAL C2_out1_1                        : unsigned(51 DOWNTO 0);  -- ufix52
  SIGNAL if_bExponent_0_bMantissa_1_out1_1 : unsigned(51 DOWNTO 0);  -- ufix52
  SIGNAL if_aExponent_0_aMantissa_1_out1  : unsigned(51 DOWNTO 0);  -- ufix52
  SIGNAL Delay4_PS_2_out1                 : unsigned(51 DOWNTO 0);  -- ufix52
  SIGNAL C2_out1_2                        : unsigned(51 DOWNTO 0);  -- ufix52
  SIGNAL if_mant_b_0_1_out1               : unsigned(51 DOWNTO 0);  -- ufix52
  SIGNAL Delay58_PS_2_out1                : std_logic;  -- ufix1
  SIGNAL Delay2_PS_2_out1                 : unsigned(51 DOWNTO 0);  -- ufix52
  SIGNAL C_out1_7                         : unsigned(51 DOWNTO 0);  -- ufix52
  SIGNAL if_exp_b_cfType_Exponent_Inf_out1 : unsigned(51 DOWNTO 0);  -- ufix52
  SIGNAL if_exp_a_cfType_Exponent_Inf_1_out1 : unsigned(51 DOWNTO 0);  -- ufix52
  SIGNAL Delay49_PS_5_reg                 : vector_of_unsigned52(0 TO 2);  -- ufix52 [3]
  SIGNAL Delay49_PS_5_reg_next            : vector_of_unsigned52(0 TO 2);  -- ufix52 [3]
  SIGNAL Delay49_PS_5_out1                : unsigned(51 DOWNTO 0);  -- ufix52
  SIGNAL Delay56_PS_60_reg                : vector_of_unsigned52(0 TO 54);  -- ufix52 [55]
  SIGNAL Delay56_PS_60_reg_next           : vector_of_unsigned52(0 TO 54);  -- ufix52 [55]
  SIGNAL Delay56_PS_60_out1               : unsigned(51 DOWNTO 0);  -- ufix52
  SIGNAL if_aExponent_cfType_Exponent_1_out1 : unsigned(51 DOWNTO 0);  -- ufix52
  SIGNAL Constant2_out1                   : unsigned(51 DOWNTO 0);  -- ufix52
  SIGNAL Switch5_out1                     : unsigned(51 DOWNTO 0);  -- ufix52
  SIGNAL Delay5_PS_61_out1                : unsigned(51 DOWNTO 0);  -- ufix52
  SIGNAL nfp_out_pack                     : unsigned(63 DOWNTO 0);  -- ufix64

BEGIN
  Delay1_ctrl_const_out <= '1';

  Delay1_ctrl_delay_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay1_ctrl_delay_out <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay1_ctrl_delay_out <= Delay1_ctrl_const_out;
      END IF;
    END IF;
  END PROCESS Delay1_ctrl_delay_process;


  Delay1_Initial_Val_out <= '1';

  Constant8_out1 <= '1';

  Delay4_ctrl_const_out <= '1';

  Delay4_ctrl_delay_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay4_ctrl_delay_out <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay4_ctrl_delay_out <= Delay4_ctrl_const_out;
      END IF;
    END IF;
  END PROCESS Delay4_ctrl_delay_process;


  Delay4_Initial_Val_out <= '1';

  Constant7_out1 <= to_unsigned(16#3B#, 6);

  
  Delay4_out1 <= Delay4_Initial_Val_out WHEN Delay4_ctrl_delay_out = '0' ELSE
      Relational_Operator_out1;

  Logical_Operator_out1 <= Constant8_out1 AND Delay4_out1;

  Data_Type_Conversion_out1 <= Logical_Operator_out1;

  Delay3_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay3_out1 <= to_unsigned(16#00#, 6);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay3_out1 <= Add_out1;
      END IF;
    END IF;
  END PROCESS Delay3_process;


  Add_add_cast <= '0' & '0' & '0' & '0' & '0' & Data_Type_Conversion_out1;
  Add_out1 <= Delay3_out1 + Add_add_cast;

  
  Relational_Operator_relop1 <= '1' WHEN Add_out1 <= Constant7_out1 ELSE
      '0';

  reduced_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Relational_Operator_out1 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Relational_Operator_out1 <= Relational_Operator_relop1;
      END IF;
    END IF;
  END PROCESS reduced_process;


  
  Delay1_out1 <= Delay1_Initial_Val_out WHEN Delay1_ctrl_delay_out = '0' ELSE
      Relational_Operator_out1;

  nfp_in1_unsigned <= unsigned(nfp_in1);

  -- Split 64 bit word into FP sign, exponent, mantissa
  aSign <= nfp_in1_unsigned(63);
  aExponent <= nfp_in1_unsigned(62 DOWNTO 52);
  aMantissa <= nfp_in1_unsigned(51 DOWNTO 0);

  Delay15_PS_1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay15_PS_1_out1 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay15_PS_1_out1 <= aSign;
      END IF;
    END IF;
  END PROCESS Delay15_PS_1_process;


  nfp_in2_unsigned <= unsigned(nfp_in2);

  -- Split 64 bit word into FP sign, exponent, mantissa
  bSign <= nfp_in2_unsigned(63);
  bExponent <= nfp_in2_unsigned(62 DOWNTO 52);
  bMantissa <= nfp_in2_unsigned(51 DOWNTO 0);

  Delay18_PS_1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay18_PS_1_out1 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay18_PS_1_out1 <= bSign;
      END IF;
    END IF;
  END PROCESS Delay18_PS_1_process;


  tmp_out1 <= Delay15_PS_1_out1 XOR Delay18_PS_1_out1;

  Delay54_PS_60_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay54_PS_60_reg(0) <= '0';
      Delay54_PS_60_reg(1) <= '0';
      Delay54_PS_60_reg(2) <= '0';
      Delay54_PS_60_reg(3) <= '0';
      Delay54_PS_60_reg(4) <= '0';
      Delay54_PS_60_reg(5) <= '0';
      Delay54_PS_60_reg(6) <= '0';
      Delay54_PS_60_reg(7) <= '0';
      Delay54_PS_60_reg(8) <= '0';
      Delay54_PS_60_reg(9) <= '0';
      Delay54_PS_60_reg(10) <= '0';
      Delay54_PS_60_reg(11) <= '0';
      Delay54_PS_60_reg(12) <= '0';
      Delay54_PS_60_reg(13) <= '0';
      Delay54_PS_60_reg(14) <= '0';
      Delay54_PS_60_reg(15) <= '0';
      Delay54_PS_60_reg(16) <= '0';
      Delay54_PS_60_reg(17) <= '0';
      Delay54_PS_60_reg(18) <= '0';
      Delay54_PS_60_reg(19) <= '0';
      Delay54_PS_60_reg(20) <= '0';
      Delay54_PS_60_reg(21) <= '0';
      Delay54_PS_60_reg(22) <= '0';
      Delay54_PS_60_reg(23) <= '0';
      Delay54_PS_60_reg(24) <= '0';
      Delay54_PS_60_reg(25) <= '0';
      Delay54_PS_60_reg(26) <= '0';
      Delay54_PS_60_reg(27) <= '0';
      Delay54_PS_60_reg(28) <= '0';
      Delay54_PS_60_reg(29) <= '0';
      Delay54_PS_60_reg(30) <= '0';
      Delay54_PS_60_reg(31) <= '0';
      Delay54_PS_60_reg(32) <= '0';
      Delay54_PS_60_reg(33) <= '0';
      Delay54_PS_60_reg(34) <= '0';
      Delay54_PS_60_reg(35) <= '0';
      Delay54_PS_60_reg(36) <= '0';
      Delay54_PS_60_reg(37) <= '0';
      Delay54_PS_60_reg(38) <= '0';
      Delay54_PS_60_reg(39) <= '0';
      Delay54_PS_60_reg(40) <= '0';
      Delay54_PS_60_reg(41) <= '0';
      Delay54_PS_60_reg(42) <= '0';
      Delay54_PS_60_reg(43) <= '0';
      Delay54_PS_60_reg(44) <= '0';
      Delay54_PS_60_reg(45) <= '0';
      Delay54_PS_60_reg(46) <= '0';
      Delay54_PS_60_reg(47) <= '0';
      Delay54_PS_60_reg(48) <= '0';
      Delay54_PS_60_reg(49) <= '0';
      Delay54_PS_60_reg(50) <= '0';
      Delay54_PS_60_reg(51) <= '0';
      Delay54_PS_60_reg(52) <= '0';
      Delay54_PS_60_reg(53) <= '0';
      Delay54_PS_60_reg(54) <= '0';
      Delay54_PS_60_reg(55) <= '0';
      Delay54_PS_60_reg(56) <= '0';
      Delay54_PS_60_reg(57) <= '0';
      Delay54_PS_60_reg(58) <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay54_PS_60_reg(0) <= Delay54_PS_60_reg_next(0);
        Delay54_PS_60_reg(1) <= Delay54_PS_60_reg_next(1);
        Delay54_PS_60_reg(2) <= Delay54_PS_60_reg_next(2);
        Delay54_PS_60_reg(3) <= Delay54_PS_60_reg_next(3);
        Delay54_PS_60_reg(4) <= Delay54_PS_60_reg_next(4);
        Delay54_PS_60_reg(5) <= Delay54_PS_60_reg_next(5);
        Delay54_PS_60_reg(6) <= Delay54_PS_60_reg_next(6);
        Delay54_PS_60_reg(7) <= Delay54_PS_60_reg_next(7);
        Delay54_PS_60_reg(8) <= Delay54_PS_60_reg_next(8);
        Delay54_PS_60_reg(9) <= Delay54_PS_60_reg_next(9);
        Delay54_PS_60_reg(10) <= Delay54_PS_60_reg_next(10);
        Delay54_PS_60_reg(11) <= Delay54_PS_60_reg_next(11);
        Delay54_PS_60_reg(12) <= Delay54_PS_60_reg_next(12);
        Delay54_PS_60_reg(13) <= Delay54_PS_60_reg_next(13);
        Delay54_PS_60_reg(14) <= Delay54_PS_60_reg_next(14);
        Delay54_PS_60_reg(15) <= Delay54_PS_60_reg_next(15);
        Delay54_PS_60_reg(16) <= Delay54_PS_60_reg_next(16);
        Delay54_PS_60_reg(17) <= Delay54_PS_60_reg_next(17);
        Delay54_PS_60_reg(18) <= Delay54_PS_60_reg_next(18);
        Delay54_PS_60_reg(19) <= Delay54_PS_60_reg_next(19);
        Delay54_PS_60_reg(20) <= Delay54_PS_60_reg_next(20);
        Delay54_PS_60_reg(21) <= Delay54_PS_60_reg_next(21);
        Delay54_PS_60_reg(22) <= Delay54_PS_60_reg_next(22);
        Delay54_PS_60_reg(23) <= Delay54_PS_60_reg_next(23);
        Delay54_PS_60_reg(24) <= Delay54_PS_60_reg_next(24);
        Delay54_PS_60_reg(25) <= Delay54_PS_60_reg_next(25);
        Delay54_PS_60_reg(26) <= Delay54_PS_60_reg_next(26);
        Delay54_PS_60_reg(27) <= Delay54_PS_60_reg_next(27);
        Delay54_PS_60_reg(28) <= Delay54_PS_60_reg_next(28);
        Delay54_PS_60_reg(29) <= Delay54_PS_60_reg_next(29);
        Delay54_PS_60_reg(30) <= Delay54_PS_60_reg_next(30);
        Delay54_PS_60_reg(31) <= Delay54_PS_60_reg_next(31);
        Delay54_PS_60_reg(32) <= Delay54_PS_60_reg_next(32);
        Delay54_PS_60_reg(33) <= Delay54_PS_60_reg_next(33);
        Delay54_PS_60_reg(34) <= Delay54_PS_60_reg_next(34);
        Delay54_PS_60_reg(35) <= Delay54_PS_60_reg_next(35);
        Delay54_PS_60_reg(36) <= Delay54_PS_60_reg_next(36);
        Delay54_PS_60_reg(37) <= Delay54_PS_60_reg_next(37);
        Delay54_PS_60_reg(38) <= Delay54_PS_60_reg_next(38);
        Delay54_PS_60_reg(39) <= Delay54_PS_60_reg_next(39);
        Delay54_PS_60_reg(40) <= Delay54_PS_60_reg_next(40);
        Delay54_PS_60_reg(41) <= Delay54_PS_60_reg_next(41);
        Delay54_PS_60_reg(42) <= Delay54_PS_60_reg_next(42);
        Delay54_PS_60_reg(43) <= Delay54_PS_60_reg_next(43);
        Delay54_PS_60_reg(44) <= Delay54_PS_60_reg_next(44);
        Delay54_PS_60_reg(45) <= Delay54_PS_60_reg_next(45);
        Delay54_PS_60_reg(46) <= Delay54_PS_60_reg_next(46);
        Delay54_PS_60_reg(47) <= Delay54_PS_60_reg_next(47);
        Delay54_PS_60_reg(48) <= Delay54_PS_60_reg_next(48);
        Delay54_PS_60_reg(49) <= Delay54_PS_60_reg_next(49);
        Delay54_PS_60_reg(50) <= Delay54_PS_60_reg_next(50);
        Delay54_PS_60_reg(51) <= Delay54_PS_60_reg_next(51);
        Delay54_PS_60_reg(52) <= Delay54_PS_60_reg_next(52);
        Delay54_PS_60_reg(53) <= Delay54_PS_60_reg_next(53);
        Delay54_PS_60_reg(54) <= Delay54_PS_60_reg_next(54);
        Delay54_PS_60_reg(55) <= Delay54_PS_60_reg_next(55);
        Delay54_PS_60_reg(56) <= Delay54_PS_60_reg_next(56);
        Delay54_PS_60_reg(57) <= Delay54_PS_60_reg_next(57);
        Delay54_PS_60_reg(58) <= Delay54_PS_60_reg_next(58);
      END IF;
    END IF;
  END PROCESS Delay54_PS_60_process;

  Delay54_PS_60_out1 <= Delay54_PS_60_reg(58);
  Delay54_PS_60_reg_next(0) <= tmp_out1;
  Delay54_PS_60_reg_next(1) <= Delay54_PS_60_reg(0);
  Delay54_PS_60_reg_next(2) <= Delay54_PS_60_reg(1);
  Delay54_PS_60_reg_next(3) <= Delay54_PS_60_reg(2);
  Delay54_PS_60_reg_next(4) <= Delay54_PS_60_reg(3);
  Delay54_PS_60_reg_next(5) <= Delay54_PS_60_reg(4);
  Delay54_PS_60_reg_next(6) <= Delay54_PS_60_reg(5);
  Delay54_PS_60_reg_next(7) <= Delay54_PS_60_reg(6);
  Delay54_PS_60_reg_next(8) <= Delay54_PS_60_reg(7);
  Delay54_PS_60_reg_next(9) <= Delay54_PS_60_reg(8);
  Delay54_PS_60_reg_next(10) <= Delay54_PS_60_reg(9);
  Delay54_PS_60_reg_next(11) <= Delay54_PS_60_reg(10);
  Delay54_PS_60_reg_next(12) <= Delay54_PS_60_reg(11);
  Delay54_PS_60_reg_next(13) <= Delay54_PS_60_reg(12);
  Delay54_PS_60_reg_next(14) <= Delay54_PS_60_reg(13);
  Delay54_PS_60_reg_next(15) <= Delay54_PS_60_reg(14);
  Delay54_PS_60_reg_next(16) <= Delay54_PS_60_reg(15);
  Delay54_PS_60_reg_next(17) <= Delay54_PS_60_reg(16);
  Delay54_PS_60_reg_next(18) <= Delay54_PS_60_reg(17);
  Delay54_PS_60_reg_next(19) <= Delay54_PS_60_reg(18);
  Delay54_PS_60_reg_next(20) <= Delay54_PS_60_reg(19);
  Delay54_PS_60_reg_next(21) <= Delay54_PS_60_reg(20);
  Delay54_PS_60_reg_next(22) <= Delay54_PS_60_reg(21);
  Delay54_PS_60_reg_next(23) <= Delay54_PS_60_reg(22);
  Delay54_PS_60_reg_next(24) <= Delay54_PS_60_reg(23);
  Delay54_PS_60_reg_next(25) <= Delay54_PS_60_reg(24);
  Delay54_PS_60_reg_next(26) <= Delay54_PS_60_reg(25);
  Delay54_PS_60_reg_next(27) <= Delay54_PS_60_reg(26);
  Delay54_PS_60_reg_next(28) <= Delay54_PS_60_reg(27);
  Delay54_PS_60_reg_next(29) <= Delay54_PS_60_reg(28);
  Delay54_PS_60_reg_next(30) <= Delay54_PS_60_reg(29);
  Delay54_PS_60_reg_next(31) <= Delay54_PS_60_reg(30);
  Delay54_PS_60_reg_next(32) <= Delay54_PS_60_reg(31);
  Delay54_PS_60_reg_next(33) <= Delay54_PS_60_reg(32);
  Delay54_PS_60_reg_next(34) <= Delay54_PS_60_reg(33);
  Delay54_PS_60_reg_next(35) <= Delay54_PS_60_reg(34);
  Delay54_PS_60_reg_next(36) <= Delay54_PS_60_reg(35);
  Delay54_PS_60_reg_next(37) <= Delay54_PS_60_reg(36);
  Delay54_PS_60_reg_next(38) <= Delay54_PS_60_reg(37);
  Delay54_PS_60_reg_next(39) <= Delay54_PS_60_reg(38);
  Delay54_PS_60_reg_next(40) <= Delay54_PS_60_reg(39);
  Delay54_PS_60_reg_next(41) <= Delay54_PS_60_reg(40);
  Delay54_PS_60_reg_next(42) <= Delay54_PS_60_reg(41);
  Delay54_PS_60_reg_next(43) <= Delay54_PS_60_reg(42);
  Delay54_PS_60_reg_next(44) <= Delay54_PS_60_reg(43);
  Delay54_PS_60_reg_next(45) <= Delay54_PS_60_reg(44);
  Delay54_PS_60_reg_next(46) <= Delay54_PS_60_reg(45);
  Delay54_PS_60_reg_next(47) <= Delay54_PS_60_reg(46);
  Delay54_PS_60_reg_next(48) <= Delay54_PS_60_reg(47);
  Delay54_PS_60_reg_next(49) <= Delay54_PS_60_reg(48);
  Delay54_PS_60_reg_next(50) <= Delay54_PS_60_reg(49);
  Delay54_PS_60_reg_next(51) <= Delay54_PS_60_reg(50);
  Delay54_PS_60_reg_next(52) <= Delay54_PS_60_reg(51);
  Delay54_PS_60_reg_next(53) <= Delay54_PS_60_reg(52);
  Delay54_PS_60_reg_next(54) <= Delay54_PS_60_reg(53);
  Delay54_PS_60_reg_next(55) <= Delay54_PS_60_reg(54);
  Delay54_PS_60_reg_next(56) <= Delay54_PS_60_reg(55);
  Delay54_PS_60_reg_next(57) <= Delay54_PS_60_reg(56);
  Delay54_PS_60_reg_next(58) <= Delay54_PS_60_reg(57);

  Constant1_out1 <= '0';

  
  Switch1_out1 <= Delay54_PS_60_out1 WHEN Delay1_out1 = '0' ELSE
      Constant1_out1;

  Delay3_PS_61_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay3_PS_61_out1 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay3_PS_61_out1 <= Switch1_out1;
      END IF;
    END IF;
  END PROCESS Delay3_PS_61_process;


  Delay16_PS_1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay16_PS_1_out1 <= to_unsigned(16#000#, 11);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay16_PS_1_out1 <= aExponent;
      END IF;
    END IF;
  END PROCESS Delay16_PS_1_process;


  
  aExponent_cfType_Exponent_I_out1 <= '1' WHEN Delay16_PS_1_out1 = to_unsigned(16#7FF#, 11) ELSE
      '0';

  Delay19_PS_1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay19_PS_1_out1 <= to_unsigned(16#000#, 11);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay19_PS_1_out1 <= bExponent;
      END IF;
    END IF;
  END PROCESS Delay19_PS_1_process;


  
  bExponent_cfType_Exponent_I_out1 <= '1' WHEN Delay19_PS_1_out1 = to_unsigned(16#7FF#, 11) ELSE
      '0';

  alphaaExponent_cfType_Exponent_out1 <= aExponent_cfType_Exponent_I_out1 OR bExponent_cfType_Exponent_I_out1;

  Delay51_PS_60_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay51_PS_60_reg(0) <= '0';
      Delay51_PS_60_reg(1) <= '0';
      Delay51_PS_60_reg(2) <= '0';
      Delay51_PS_60_reg(3) <= '0';
      Delay51_PS_60_reg(4) <= '0';
      Delay51_PS_60_reg(5) <= '0';
      Delay51_PS_60_reg(6) <= '0';
      Delay51_PS_60_reg(7) <= '0';
      Delay51_PS_60_reg(8) <= '0';
      Delay51_PS_60_reg(9) <= '0';
      Delay51_PS_60_reg(10) <= '0';
      Delay51_PS_60_reg(11) <= '0';
      Delay51_PS_60_reg(12) <= '0';
      Delay51_PS_60_reg(13) <= '0';
      Delay51_PS_60_reg(14) <= '0';
      Delay51_PS_60_reg(15) <= '0';
      Delay51_PS_60_reg(16) <= '0';
      Delay51_PS_60_reg(17) <= '0';
      Delay51_PS_60_reg(18) <= '0';
      Delay51_PS_60_reg(19) <= '0';
      Delay51_PS_60_reg(20) <= '0';
      Delay51_PS_60_reg(21) <= '0';
      Delay51_PS_60_reg(22) <= '0';
      Delay51_PS_60_reg(23) <= '0';
      Delay51_PS_60_reg(24) <= '0';
      Delay51_PS_60_reg(25) <= '0';
      Delay51_PS_60_reg(26) <= '0';
      Delay51_PS_60_reg(27) <= '0';
      Delay51_PS_60_reg(28) <= '0';
      Delay51_PS_60_reg(29) <= '0';
      Delay51_PS_60_reg(30) <= '0';
      Delay51_PS_60_reg(31) <= '0';
      Delay51_PS_60_reg(32) <= '0';
      Delay51_PS_60_reg(33) <= '0';
      Delay51_PS_60_reg(34) <= '0';
      Delay51_PS_60_reg(35) <= '0';
      Delay51_PS_60_reg(36) <= '0';
      Delay51_PS_60_reg(37) <= '0';
      Delay51_PS_60_reg(38) <= '0';
      Delay51_PS_60_reg(39) <= '0';
      Delay51_PS_60_reg(40) <= '0';
      Delay51_PS_60_reg(41) <= '0';
      Delay51_PS_60_reg(42) <= '0';
      Delay51_PS_60_reg(43) <= '0';
      Delay51_PS_60_reg(44) <= '0';
      Delay51_PS_60_reg(45) <= '0';
      Delay51_PS_60_reg(46) <= '0';
      Delay51_PS_60_reg(47) <= '0';
      Delay51_PS_60_reg(48) <= '0';
      Delay51_PS_60_reg(49) <= '0';
      Delay51_PS_60_reg(50) <= '0';
      Delay51_PS_60_reg(51) <= '0';
      Delay51_PS_60_reg(52) <= '0';
      Delay51_PS_60_reg(53) <= '0';
      Delay51_PS_60_reg(54) <= '0';
      Delay51_PS_60_reg(55) <= '0';
      Delay51_PS_60_reg(56) <= '0';
      Delay51_PS_60_reg(57) <= '0';
      Delay51_PS_60_reg(58) <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay51_PS_60_reg(0) <= Delay51_PS_60_reg_next(0);
        Delay51_PS_60_reg(1) <= Delay51_PS_60_reg_next(1);
        Delay51_PS_60_reg(2) <= Delay51_PS_60_reg_next(2);
        Delay51_PS_60_reg(3) <= Delay51_PS_60_reg_next(3);
        Delay51_PS_60_reg(4) <= Delay51_PS_60_reg_next(4);
        Delay51_PS_60_reg(5) <= Delay51_PS_60_reg_next(5);
        Delay51_PS_60_reg(6) <= Delay51_PS_60_reg_next(6);
        Delay51_PS_60_reg(7) <= Delay51_PS_60_reg_next(7);
        Delay51_PS_60_reg(8) <= Delay51_PS_60_reg_next(8);
        Delay51_PS_60_reg(9) <= Delay51_PS_60_reg_next(9);
        Delay51_PS_60_reg(10) <= Delay51_PS_60_reg_next(10);
        Delay51_PS_60_reg(11) <= Delay51_PS_60_reg_next(11);
        Delay51_PS_60_reg(12) <= Delay51_PS_60_reg_next(12);
        Delay51_PS_60_reg(13) <= Delay51_PS_60_reg_next(13);
        Delay51_PS_60_reg(14) <= Delay51_PS_60_reg_next(14);
        Delay51_PS_60_reg(15) <= Delay51_PS_60_reg_next(15);
        Delay51_PS_60_reg(16) <= Delay51_PS_60_reg_next(16);
        Delay51_PS_60_reg(17) <= Delay51_PS_60_reg_next(17);
        Delay51_PS_60_reg(18) <= Delay51_PS_60_reg_next(18);
        Delay51_PS_60_reg(19) <= Delay51_PS_60_reg_next(19);
        Delay51_PS_60_reg(20) <= Delay51_PS_60_reg_next(20);
        Delay51_PS_60_reg(21) <= Delay51_PS_60_reg_next(21);
        Delay51_PS_60_reg(22) <= Delay51_PS_60_reg_next(22);
        Delay51_PS_60_reg(23) <= Delay51_PS_60_reg_next(23);
        Delay51_PS_60_reg(24) <= Delay51_PS_60_reg_next(24);
        Delay51_PS_60_reg(25) <= Delay51_PS_60_reg_next(25);
        Delay51_PS_60_reg(26) <= Delay51_PS_60_reg_next(26);
        Delay51_PS_60_reg(27) <= Delay51_PS_60_reg_next(27);
        Delay51_PS_60_reg(28) <= Delay51_PS_60_reg_next(28);
        Delay51_PS_60_reg(29) <= Delay51_PS_60_reg_next(29);
        Delay51_PS_60_reg(30) <= Delay51_PS_60_reg_next(30);
        Delay51_PS_60_reg(31) <= Delay51_PS_60_reg_next(31);
        Delay51_PS_60_reg(32) <= Delay51_PS_60_reg_next(32);
        Delay51_PS_60_reg(33) <= Delay51_PS_60_reg_next(33);
        Delay51_PS_60_reg(34) <= Delay51_PS_60_reg_next(34);
        Delay51_PS_60_reg(35) <= Delay51_PS_60_reg_next(35);
        Delay51_PS_60_reg(36) <= Delay51_PS_60_reg_next(36);
        Delay51_PS_60_reg(37) <= Delay51_PS_60_reg_next(37);
        Delay51_PS_60_reg(38) <= Delay51_PS_60_reg_next(38);
        Delay51_PS_60_reg(39) <= Delay51_PS_60_reg_next(39);
        Delay51_PS_60_reg(40) <= Delay51_PS_60_reg_next(40);
        Delay51_PS_60_reg(41) <= Delay51_PS_60_reg_next(41);
        Delay51_PS_60_reg(42) <= Delay51_PS_60_reg_next(42);
        Delay51_PS_60_reg(43) <= Delay51_PS_60_reg_next(43);
        Delay51_PS_60_reg(44) <= Delay51_PS_60_reg_next(44);
        Delay51_PS_60_reg(45) <= Delay51_PS_60_reg_next(45);
        Delay51_PS_60_reg(46) <= Delay51_PS_60_reg_next(46);
        Delay51_PS_60_reg(47) <= Delay51_PS_60_reg_next(47);
        Delay51_PS_60_reg(48) <= Delay51_PS_60_reg_next(48);
        Delay51_PS_60_reg(49) <= Delay51_PS_60_reg_next(49);
        Delay51_PS_60_reg(50) <= Delay51_PS_60_reg_next(50);
        Delay51_PS_60_reg(51) <= Delay51_PS_60_reg_next(51);
        Delay51_PS_60_reg(52) <= Delay51_PS_60_reg_next(52);
        Delay51_PS_60_reg(53) <= Delay51_PS_60_reg_next(53);
        Delay51_PS_60_reg(54) <= Delay51_PS_60_reg_next(54);
        Delay51_PS_60_reg(55) <= Delay51_PS_60_reg_next(55);
        Delay51_PS_60_reg(56) <= Delay51_PS_60_reg_next(56);
        Delay51_PS_60_reg(57) <= Delay51_PS_60_reg_next(57);
        Delay51_PS_60_reg(58) <= Delay51_PS_60_reg_next(58);
      END IF;
    END IF;
  END PROCESS Delay51_PS_60_process;

  Delay51_PS_60_out1 <= Delay51_PS_60_reg(58);
  Delay51_PS_60_reg_next(0) <= alphaaExponent_cfType_Exponent_out1;
  Delay51_PS_60_reg_next(1) <= Delay51_PS_60_reg(0);
  Delay51_PS_60_reg_next(2) <= Delay51_PS_60_reg(1);
  Delay51_PS_60_reg_next(3) <= Delay51_PS_60_reg(2);
  Delay51_PS_60_reg_next(4) <= Delay51_PS_60_reg(3);
  Delay51_PS_60_reg_next(5) <= Delay51_PS_60_reg(4);
  Delay51_PS_60_reg_next(6) <= Delay51_PS_60_reg(5);
  Delay51_PS_60_reg_next(7) <= Delay51_PS_60_reg(6);
  Delay51_PS_60_reg_next(8) <= Delay51_PS_60_reg(7);
  Delay51_PS_60_reg_next(9) <= Delay51_PS_60_reg(8);
  Delay51_PS_60_reg_next(10) <= Delay51_PS_60_reg(9);
  Delay51_PS_60_reg_next(11) <= Delay51_PS_60_reg(10);
  Delay51_PS_60_reg_next(12) <= Delay51_PS_60_reg(11);
  Delay51_PS_60_reg_next(13) <= Delay51_PS_60_reg(12);
  Delay51_PS_60_reg_next(14) <= Delay51_PS_60_reg(13);
  Delay51_PS_60_reg_next(15) <= Delay51_PS_60_reg(14);
  Delay51_PS_60_reg_next(16) <= Delay51_PS_60_reg(15);
  Delay51_PS_60_reg_next(17) <= Delay51_PS_60_reg(16);
  Delay51_PS_60_reg_next(18) <= Delay51_PS_60_reg(17);
  Delay51_PS_60_reg_next(19) <= Delay51_PS_60_reg(18);
  Delay51_PS_60_reg_next(20) <= Delay51_PS_60_reg(19);
  Delay51_PS_60_reg_next(21) <= Delay51_PS_60_reg(20);
  Delay51_PS_60_reg_next(22) <= Delay51_PS_60_reg(21);
  Delay51_PS_60_reg_next(23) <= Delay51_PS_60_reg(22);
  Delay51_PS_60_reg_next(24) <= Delay51_PS_60_reg(23);
  Delay51_PS_60_reg_next(25) <= Delay51_PS_60_reg(24);
  Delay51_PS_60_reg_next(26) <= Delay51_PS_60_reg(25);
  Delay51_PS_60_reg_next(27) <= Delay51_PS_60_reg(26);
  Delay51_PS_60_reg_next(28) <= Delay51_PS_60_reg(27);
  Delay51_PS_60_reg_next(29) <= Delay51_PS_60_reg(28);
  Delay51_PS_60_reg_next(30) <= Delay51_PS_60_reg(29);
  Delay51_PS_60_reg_next(31) <= Delay51_PS_60_reg(30);
  Delay51_PS_60_reg_next(32) <= Delay51_PS_60_reg(31);
  Delay51_PS_60_reg_next(33) <= Delay51_PS_60_reg(32);
  Delay51_PS_60_reg_next(34) <= Delay51_PS_60_reg(33);
  Delay51_PS_60_reg_next(35) <= Delay51_PS_60_reg(34);
  Delay51_PS_60_reg_next(36) <= Delay51_PS_60_reg(35);
  Delay51_PS_60_reg_next(37) <= Delay51_PS_60_reg(36);
  Delay51_PS_60_reg_next(38) <= Delay51_PS_60_reg(37);
  Delay51_PS_60_reg_next(39) <= Delay51_PS_60_reg(38);
  Delay51_PS_60_reg_next(40) <= Delay51_PS_60_reg(39);
  Delay51_PS_60_reg_next(41) <= Delay51_PS_60_reg(40);
  Delay51_PS_60_reg_next(42) <= Delay51_PS_60_reg(41);
  Delay51_PS_60_reg_next(43) <= Delay51_PS_60_reg(42);
  Delay51_PS_60_reg_next(44) <= Delay51_PS_60_reg(43);
  Delay51_PS_60_reg_next(45) <= Delay51_PS_60_reg(44);
  Delay51_PS_60_reg_next(46) <= Delay51_PS_60_reg(45);
  Delay51_PS_60_reg_next(47) <= Delay51_PS_60_reg(46);
  Delay51_PS_60_reg_next(48) <= Delay51_PS_60_reg(47);
  Delay51_PS_60_reg_next(49) <= Delay51_PS_60_reg(48);
  Delay51_PS_60_reg_next(50) <= Delay51_PS_60_reg(49);
  Delay51_PS_60_reg_next(51) <= Delay51_PS_60_reg(50);
  Delay51_PS_60_reg_next(52) <= Delay51_PS_60_reg(51);
  Delay51_PS_60_reg_next(53) <= Delay51_PS_60_reg(52);
  Delay51_PS_60_reg_next(54) <= Delay51_PS_60_reg(53);
  Delay51_PS_60_reg_next(55) <= Delay51_PS_60_reg(54);
  Delay51_PS_60_reg_next(56) <= Delay51_PS_60_reg(55);
  Delay51_PS_60_reg_next(57) <= Delay51_PS_60_reg(56);
  Delay51_PS_60_reg_next(58) <= Delay51_PS_60_reg(57);

  
  aExponent_0_out1 <= '1' WHEN Delay16_PS_1_out1 = to_unsigned(16#000#, 11) ELSE
      '0';

  Delay17_PS_1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay17_PS_1_out1 <= to_unsigned(0, 52);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay17_PS_1_out1 <= aMantissa;
      END IF;
    END IF;
  END PROCESS Delay17_PS_1_process;


  Constant_out1 <= to_unsigned(0, 52);

  
  Switch_out1 <= Delay17_PS_1_out1 WHEN aExponent_0_out1 = '0' ELSE
      Constant_out1;

  
  aMantissa_0_out1 <= '1' WHEN Switch_out1 = to_unsigned(0, 52) ELSE
      '0';

  alphaaExponent_0_aMantissa_out1 <= aExponent_0_out1 AND aMantissa_0_out1;

  Delay53_PS_60_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay53_PS_60_reg(0) <= '0';
      Delay53_PS_60_reg(1) <= '0';
      Delay53_PS_60_reg(2) <= '0';
      Delay53_PS_60_reg(3) <= '0';
      Delay53_PS_60_reg(4) <= '0';
      Delay53_PS_60_reg(5) <= '0';
      Delay53_PS_60_reg(6) <= '0';
      Delay53_PS_60_reg(7) <= '0';
      Delay53_PS_60_reg(8) <= '0';
      Delay53_PS_60_reg(9) <= '0';
      Delay53_PS_60_reg(10) <= '0';
      Delay53_PS_60_reg(11) <= '0';
      Delay53_PS_60_reg(12) <= '0';
      Delay53_PS_60_reg(13) <= '0';
      Delay53_PS_60_reg(14) <= '0';
      Delay53_PS_60_reg(15) <= '0';
      Delay53_PS_60_reg(16) <= '0';
      Delay53_PS_60_reg(17) <= '0';
      Delay53_PS_60_reg(18) <= '0';
      Delay53_PS_60_reg(19) <= '0';
      Delay53_PS_60_reg(20) <= '0';
      Delay53_PS_60_reg(21) <= '0';
      Delay53_PS_60_reg(22) <= '0';
      Delay53_PS_60_reg(23) <= '0';
      Delay53_PS_60_reg(24) <= '0';
      Delay53_PS_60_reg(25) <= '0';
      Delay53_PS_60_reg(26) <= '0';
      Delay53_PS_60_reg(27) <= '0';
      Delay53_PS_60_reg(28) <= '0';
      Delay53_PS_60_reg(29) <= '0';
      Delay53_PS_60_reg(30) <= '0';
      Delay53_PS_60_reg(31) <= '0';
      Delay53_PS_60_reg(32) <= '0';
      Delay53_PS_60_reg(33) <= '0';
      Delay53_PS_60_reg(34) <= '0';
      Delay53_PS_60_reg(35) <= '0';
      Delay53_PS_60_reg(36) <= '0';
      Delay53_PS_60_reg(37) <= '0';
      Delay53_PS_60_reg(38) <= '0';
      Delay53_PS_60_reg(39) <= '0';
      Delay53_PS_60_reg(40) <= '0';
      Delay53_PS_60_reg(41) <= '0';
      Delay53_PS_60_reg(42) <= '0';
      Delay53_PS_60_reg(43) <= '0';
      Delay53_PS_60_reg(44) <= '0';
      Delay53_PS_60_reg(45) <= '0';
      Delay53_PS_60_reg(46) <= '0';
      Delay53_PS_60_reg(47) <= '0';
      Delay53_PS_60_reg(48) <= '0';
      Delay53_PS_60_reg(49) <= '0';
      Delay53_PS_60_reg(50) <= '0';
      Delay53_PS_60_reg(51) <= '0';
      Delay53_PS_60_reg(52) <= '0';
      Delay53_PS_60_reg(53) <= '0';
      Delay53_PS_60_reg(54) <= '0';
      Delay53_PS_60_reg(55) <= '0';
      Delay53_PS_60_reg(56) <= '0';
      Delay53_PS_60_reg(57) <= '0';
      Delay53_PS_60_reg(58) <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay53_PS_60_reg(0) <= Delay53_PS_60_reg_next(0);
        Delay53_PS_60_reg(1) <= Delay53_PS_60_reg_next(1);
        Delay53_PS_60_reg(2) <= Delay53_PS_60_reg_next(2);
        Delay53_PS_60_reg(3) <= Delay53_PS_60_reg_next(3);
        Delay53_PS_60_reg(4) <= Delay53_PS_60_reg_next(4);
        Delay53_PS_60_reg(5) <= Delay53_PS_60_reg_next(5);
        Delay53_PS_60_reg(6) <= Delay53_PS_60_reg_next(6);
        Delay53_PS_60_reg(7) <= Delay53_PS_60_reg_next(7);
        Delay53_PS_60_reg(8) <= Delay53_PS_60_reg_next(8);
        Delay53_PS_60_reg(9) <= Delay53_PS_60_reg_next(9);
        Delay53_PS_60_reg(10) <= Delay53_PS_60_reg_next(10);
        Delay53_PS_60_reg(11) <= Delay53_PS_60_reg_next(11);
        Delay53_PS_60_reg(12) <= Delay53_PS_60_reg_next(12);
        Delay53_PS_60_reg(13) <= Delay53_PS_60_reg_next(13);
        Delay53_PS_60_reg(14) <= Delay53_PS_60_reg_next(14);
        Delay53_PS_60_reg(15) <= Delay53_PS_60_reg_next(15);
        Delay53_PS_60_reg(16) <= Delay53_PS_60_reg_next(16);
        Delay53_PS_60_reg(17) <= Delay53_PS_60_reg_next(17);
        Delay53_PS_60_reg(18) <= Delay53_PS_60_reg_next(18);
        Delay53_PS_60_reg(19) <= Delay53_PS_60_reg_next(19);
        Delay53_PS_60_reg(20) <= Delay53_PS_60_reg_next(20);
        Delay53_PS_60_reg(21) <= Delay53_PS_60_reg_next(21);
        Delay53_PS_60_reg(22) <= Delay53_PS_60_reg_next(22);
        Delay53_PS_60_reg(23) <= Delay53_PS_60_reg_next(23);
        Delay53_PS_60_reg(24) <= Delay53_PS_60_reg_next(24);
        Delay53_PS_60_reg(25) <= Delay53_PS_60_reg_next(25);
        Delay53_PS_60_reg(26) <= Delay53_PS_60_reg_next(26);
        Delay53_PS_60_reg(27) <= Delay53_PS_60_reg_next(27);
        Delay53_PS_60_reg(28) <= Delay53_PS_60_reg_next(28);
        Delay53_PS_60_reg(29) <= Delay53_PS_60_reg_next(29);
        Delay53_PS_60_reg(30) <= Delay53_PS_60_reg_next(30);
        Delay53_PS_60_reg(31) <= Delay53_PS_60_reg_next(31);
        Delay53_PS_60_reg(32) <= Delay53_PS_60_reg_next(32);
        Delay53_PS_60_reg(33) <= Delay53_PS_60_reg_next(33);
        Delay53_PS_60_reg(34) <= Delay53_PS_60_reg_next(34);
        Delay53_PS_60_reg(35) <= Delay53_PS_60_reg_next(35);
        Delay53_PS_60_reg(36) <= Delay53_PS_60_reg_next(36);
        Delay53_PS_60_reg(37) <= Delay53_PS_60_reg_next(37);
        Delay53_PS_60_reg(38) <= Delay53_PS_60_reg_next(38);
        Delay53_PS_60_reg(39) <= Delay53_PS_60_reg_next(39);
        Delay53_PS_60_reg(40) <= Delay53_PS_60_reg_next(40);
        Delay53_PS_60_reg(41) <= Delay53_PS_60_reg_next(41);
        Delay53_PS_60_reg(42) <= Delay53_PS_60_reg_next(42);
        Delay53_PS_60_reg(43) <= Delay53_PS_60_reg_next(43);
        Delay53_PS_60_reg(44) <= Delay53_PS_60_reg_next(44);
        Delay53_PS_60_reg(45) <= Delay53_PS_60_reg_next(45);
        Delay53_PS_60_reg(46) <= Delay53_PS_60_reg_next(46);
        Delay53_PS_60_reg(47) <= Delay53_PS_60_reg_next(47);
        Delay53_PS_60_reg(48) <= Delay53_PS_60_reg_next(48);
        Delay53_PS_60_reg(49) <= Delay53_PS_60_reg_next(49);
        Delay53_PS_60_reg(50) <= Delay53_PS_60_reg_next(50);
        Delay53_PS_60_reg(51) <= Delay53_PS_60_reg_next(51);
        Delay53_PS_60_reg(52) <= Delay53_PS_60_reg_next(52);
        Delay53_PS_60_reg(53) <= Delay53_PS_60_reg_next(53);
        Delay53_PS_60_reg(54) <= Delay53_PS_60_reg_next(54);
        Delay53_PS_60_reg(55) <= Delay53_PS_60_reg_next(55);
        Delay53_PS_60_reg(56) <= Delay53_PS_60_reg_next(56);
        Delay53_PS_60_reg(57) <= Delay53_PS_60_reg_next(57);
        Delay53_PS_60_reg(58) <= Delay53_PS_60_reg_next(58);
      END IF;
    END IF;
  END PROCESS Delay53_PS_60_process;

  Delay53_PS_60_out1 <= Delay53_PS_60_reg(58);
  Delay53_PS_60_reg_next(0) <= alphaaExponent_0_aMantissa_out1;
  Delay53_PS_60_reg_next(1) <= Delay53_PS_60_reg(0);
  Delay53_PS_60_reg_next(2) <= Delay53_PS_60_reg(1);
  Delay53_PS_60_reg_next(3) <= Delay53_PS_60_reg(2);
  Delay53_PS_60_reg_next(4) <= Delay53_PS_60_reg(3);
  Delay53_PS_60_reg_next(5) <= Delay53_PS_60_reg(4);
  Delay53_PS_60_reg_next(6) <= Delay53_PS_60_reg(5);
  Delay53_PS_60_reg_next(7) <= Delay53_PS_60_reg(6);
  Delay53_PS_60_reg_next(8) <= Delay53_PS_60_reg(7);
  Delay53_PS_60_reg_next(9) <= Delay53_PS_60_reg(8);
  Delay53_PS_60_reg_next(10) <= Delay53_PS_60_reg(9);
  Delay53_PS_60_reg_next(11) <= Delay53_PS_60_reg(10);
  Delay53_PS_60_reg_next(12) <= Delay53_PS_60_reg(11);
  Delay53_PS_60_reg_next(13) <= Delay53_PS_60_reg(12);
  Delay53_PS_60_reg_next(14) <= Delay53_PS_60_reg(13);
  Delay53_PS_60_reg_next(15) <= Delay53_PS_60_reg(14);
  Delay53_PS_60_reg_next(16) <= Delay53_PS_60_reg(15);
  Delay53_PS_60_reg_next(17) <= Delay53_PS_60_reg(16);
  Delay53_PS_60_reg_next(18) <= Delay53_PS_60_reg(17);
  Delay53_PS_60_reg_next(19) <= Delay53_PS_60_reg(18);
  Delay53_PS_60_reg_next(20) <= Delay53_PS_60_reg(19);
  Delay53_PS_60_reg_next(21) <= Delay53_PS_60_reg(20);
  Delay53_PS_60_reg_next(22) <= Delay53_PS_60_reg(21);
  Delay53_PS_60_reg_next(23) <= Delay53_PS_60_reg(22);
  Delay53_PS_60_reg_next(24) <= Delay53_PS_60_reg(23);
  Delay53_PS_60_reg_next(25) <= Delay53_PS_60_reg(24);
  Delay53_PS_60_reg_next(26) <= Delay53_PS_60_reg(25);
  Delay53_PS_60_reg_next(27) <= Delay53_PS_60_reg(26);
  Delay53_PS_60_reg_next(28) <= Delay53_PS_60_reg(27);
  Delay53_PS_60_reg_next(29) <= Delay53_PS_60_reg(28);
  Delay53_PS_60_reg_next(30) <= Delay53_PS_60_reg(29);
  Delay53_PS_60_reg_next(31) <= Delay53_PS_60_reg(30);
  Delay53_PS_60_reg_next(32) <= Delay53_PS_60_reg(31);
  Delay53_PS_60_reg_next(33) <= Delay53_PS_60_reg(32);
  Delay53_PS_60_reg_next(34) <= Delay53_PS_60_reg(33);
  Delay53_PS_60_reg_next(35) <= Delay53_PS_60_reg(34);
  Delay53_PS_60_reg_next(36) <= Delay53_PS_60_reg(35);
  Delay53_PS_60_reg_next(37) <= Delay53_PS_60_reg(36);
  Delay53_PS_60_reg_next(38) <= Delay53_PS_60_reg(37);
  Delay53_PS_60_reg_next(39) <= Delay53_PS_60_reg(38);
  Delay53_PS_60_reg_next(40) <= Delay53_PS_60_reg(39);
  Delay53_PS_60_reg_next(41) <= Delay53_PS_60_reg(40);
  Delay53_PS_60_reg_next(42) <= Delay53_PS_60_reg(41);
  Delay53_PS_60_reg_next(43) <= Delay53_PS_60_reg(42);
  Delay53_PS_60_reg_next(44) <= Delay53_PS_60_reg(43);
  Delay53_PS_60_reg_next(45) <= Delay53_PS_60_reg(44);
  Delay53_PS_60_reg_next(46) <= Delay53_PS_60_reg(45);
  Delay53_PS_60_reg_next(47) <= Delay53_PS_60_reg(46);
  Delay53_PS_60_reg_next(48) <= Delay53_PS_60_reg(47);
  Delay53_PS_60_reg_next(49) <= Delay53_PS_60_reg(48);
  Delay53_PS_60_reg_next(50) <= Delay53_PS_60_reg(49);
  Delay53_PS_60_reg_next(51) <= Delay53_PS_60_reg(50);
  Delay53_PS_60_reg_next(52) <= Delay53_PS_60_reg(51);
  Delay53_PS_60_reg_next(53) <= Delay53_PS_60_reg(52);
  Delay53_PS_60_reg_next(54) <= Delay53_PS_60_reg(53);
  Delay53_PS_60_reg_next(55) <= Delay53_PS_60_reg(54);
  Delay53_PS_60_reg_next(56) <= Delay53_PS_60_reg(55);
  Delay53_PS_60_reg_next(57) <= Delay53_PS_60_reg(56);
  Delay53_PS_60_reg_next(58) <= Delay53_PS_60_reg(57);

  
  bExponent_0_out1 <= '1' WHEN Delay19_PS_1_out1 = to_unsigned(16#000#, 11) ELSE
      '0';

  Delay20_PS_1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay20_PS_1_out1 <= to_unsigned(0, 52);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay20_PS_1_out1 <= bMantissa;
      END IF;
    END IF;
  END PROCESS Delay20_PS_1_process;


  Constant_out1_1 <= to_unsigned(0, 52);

  
  Switch_out1_1 <= Delay20_PS_1_out1 WHEN bExponent_0_out1 = '0' ELSE
      Constant_out1_1;

  
  bMantissa_0_out1 <= '1' WHEN Switch_out1_1 = to_unsigned(0, 52) ELSE
      '0';

  alphabExponent_0_bMantissa_out1 <= bExponent_0_out1 AND bMantissa_0_out1;

  Delay52_PS_60_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay52_PS_60_reg(0) <= '0';
      Delay52_PS_60_reg(1) <= '0';
      Delay52_PS_60_reg(2) <= '0';
      Delay52_PS_60_reg(3) <= '0';
      Delay52_PS_60_reg(4) <= '0';
      Delay52_PS_60_reg(5) <= '0';
      Delay52_PS_60_reg(6) <= '0';
      Delay52_PS_60_reg(7) <= '0';
      Delay52_PS_60_reg(8) <= '0';
      Delay52_PS_60_reg(9) <= '0';
      Delay52_PS_60_reg(10) <= '0';
      Delay52_PS_60_reg(11) <= '0';
      Delay52_PS_60_reg(12) <= '0';
      Delay52_PS_60_reg(13) <= '0';
      Delay52_PS_60_reg(14) <= '0';
      Delay52_PS_60_reg(15) <= '0';
      Delay52_PS_60_reg(16) <= '0';
      Delay52_PS_60_reg(17) <= '0';
      Delay52_PS_60_reg(18) <= '0';
      Delay52_PS_60_reg(19) <= '0';
      Delay52_PS_60_reg(20) <= '0';
      Delay52_PS_60_reg(21) <= '0';
      Delay52_PS_60_reg(22) <= '0';
      Delay52_PS_60_reg(23) <= '0';
      Delay52_PS_60_reg(24) <= '0';
      Delay52_PS_60_reg(25) <= '0';
      Delay52_PS_60_reg(26) <= '0';
      Delay52_PS_60_reg(27) <= '0';
      Delay52_PS_60_reg(28) <= '0';
      Delay52_PS_60_reg(29) <= '0';
      Delay52_PS_60_reg(30) <= '0';
      Delay52_PS_60_reg(31) <= '0';
      Delay52_PS_60_reg(32) <= '0';
      Delay52_PS_60_reg(33) <= '0';
      Delay52_PS_60_reg(34) <= '0';
      Delay52_PS_60_reg(35) <= '0';
      Delay52_PS_60_reg(36) <= '0';
      Delay52_PS_60_reg(37) <= '0';
      Delay52_PS_60_reg(38) <= '0';
      Delay52_PS_60_reg(39) <= '0';
      Delay52_PS_60_reg(40) <= '0';
      Delay52_PS_60_reg(41) <= '0';
      Delay52_PS_60_reg(42) <= '0';
      Delay52_PS_60_reg(43) <= '0';
      Delay52_PS_60_reg(44) <= '0';
      Delay52_PS_60_reg(45) <= '0';
      Delay52_PS_60_reg(46) <= '0';
      Delay52_PS_60_reg(47) <= '0';
      Delay52_PS_60_reg(48) <= '0';
      Delay52_PS_60_reg(49) <= '0';
      Delay52_PS_60_reg(50) <= '0';
      Delay52_PS_60_reg(51) <= '0';
      Delay52_PS_60_reg(52) <= '0';
      Delay52_PS_60_reg(53) <= '0';
      Delay52_PS_60_reg(54) <= '0';
      Delay52_PS_60_reg(55) <= '0';
      Delay52_PS_60_reg(56) <= '0';
      Delay52_PS_60_reg(57) <= '0';
      Delay52_PS_60_reg(58) <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay52_PS_60_reg(0) <= Delay52_PS_60_reg_next(0);
        Delay52_PS_60_reg(1) <= Delay52_PS_60_reg_next(1);
        Delay52_PS_60_reg(2) <= Delay52_PS_60_reg_next(2);
        Delay52_PS_60_reg(3) <= Delay52_PS_60_reg_next(3);
        Delay52_PS_60_reg(4) <= Delay52_PS_60_reg_next(4);
        Delay52_PS_60_reg(5) <= Delay52_PS_60_reg_next(5);
        Delay52_PS_60_reg(6) <= Delay52_PS_60_reg_next(6);
        Delay52_PS_60_reg(7) <= Delay52_PS_60_reg_next(7);
        Delay52_PS_60_reg(8) <= Delay52_PS_60_reg_next(8);
        Delay52_PS_60_reg(9) <= Delay52_PS_60_reg_next(9);
        Delay52_PS_60_reg(10) <= Delay52_PS_60_reg_next(10);
        Delay52_PS_60_reg(11) <= Delay52_PS_60_reg_next(11);
        Delay52_PS_60_reg(12) <= Delay52_PS_60_reg_next(12);
        Delay52_PS_60_reg(13) <= Delay52_PS_60_reg_next(13);
        Delay52_PS_60_reg(14) <= Delay52_PS_60_reg_next(14);
        Delay52_PS_60_reg(15) <= Delay52_PS_60_reg_next(15);
        Delay52_PS_60_reg(16) <= Delay52_PS_60_reg_next(16);
        Delay52_PS_60_reg(17) <= Delay52_PS_60_reg_next(17);
        Delay52_PS_60_reg(18) <= Delay52_PS_60_reg_next(18);
        Delay52_PS_60_reg(19) <= Delay52_PS_60_reg_next(19);
        Delay52_PS_60_reg(20) <= Delay52_PS_60_reg_next(20);
        Delay52_PS_60_reg(21) <= Delay52_PS_60_reg_next(21);
        Delay52_PS_60_reg(22) <= Delay52_PS_60_reg_next(22);
        Delay52_PS_60_reg(23) <= Delay52_PS_60_reg_next(23);
        Delay52_PS_60_reg(24) <= Delay52_PS_60_reg_next(24);
        Delay52_PS_60_reg(25) <= Delay52_PS_60_reg_next(25);
        Delay52_PS_60_reg(26) <= Delay52_PS_60_reg_next(26);
        Delay52_PS_60_reg(27) <= Delay52_PS_60_reg_next(27);
        Delay52_PS_60_reg(28) <= Delay52_PS_60_reg_next(28);
        Delay52_PS_60_reg(29) <= Delay52_PS_60_reg_next(29);
        Delay52_PS_60_reg(30) <= Delay52_PS_60_reg_next(30);
        Delay52_PS_60_reg(31) <= Delay52_PS_60_reg_next(31);
        Delay52_PS_60_reg(32) <= Delay52_PS_60_reg_next(32);
        Delay52_PS_60_reg(33) <= Delay52_PS_60_reg_next(33);
        Delay52_PS_60_reg(34) <= Delay52_PS_60_reg_next(34);
        Delay52_PS_60_reg(35) <= Delay52_PS_60_reg_next(35);
        Delay52_PS_60_reg(36) <= Delay52_PS_60_reg_next(36);
        Delay52_PS_60_reg(37) <= Delay52_PS_60_reg_next(37);
        Delay52_PS_60_reg(38) <= Delay52_PS_60_reg_next(38);
        Delay52_PS_60_reg(39) <= Delay52_PS_60_reg_next(39);
        Delay52_PS_60_reg(40) <= Delay52_PS_60_reg_next(40);
        Delay52_PS_60_reg(41) <= Delay52_PS_60_reg_next(41);
        Delay52_PS_60_reg(42) <= Delay52_PS_60_reg_next(42);
        Delay52_PS_60_reg(43) <= Delay52_PS_60_reg_next(43);
        Delay52_PS_60_reg(44) <= Delay52_PS_60_reg_next(44);
        Delay52_PS_60_reg(45) <= Delay52_PS_60_reg_next(45);
        Delay52_PS_60_reg(46) <= Delay52_PS_60_reg_next(46);
        Delay52_PS_60_reg(47) <= Delay52_PS_60_reg_next(47);
        Delay52_PS_60_reg(48) <= Delay52_PS_60_reg_next(48);
        Delay52_PS_60_reg(49) <= Delay52_PS_60_reg_next(49);
        Delay52_PS_60_reg(50) <= Delay52_PS_60_reg_next(50);
        Delay52_PS_60_reg(51) <= Delay52_PS_60_reg_next(51);
        Delay52_PS_60_reg(52) <= Delay52_PS_60_reg_next(52);
        Delay52_PS_60_reg(53) <= Delay52_PS_60_reg_next(53);
        Delay52_PS_60_reg(54) <= Delay52_PS_60_reg_next(54);
        Delay52_PS_60_reg(55) <= Delay52_PS_60_reg_next(55);
        Delay52_PS_60_reg(56) <= Delay52_PS_60_reg_next(56);
        Delay52_PS_60_reg(57) <= Delay52_PS_60_reg_next(57);
        Delay52_PS_60_reg(58) <= Delay52_PS_60_reg_next(58);
      END IF;
    END IF;
  END PROCESS Delay52_PS_60_process;

  Delay52_PS_60_out1 <= Delay52_PS_60_reg(58);
  Delay52_PS_60_reg_next(0) <= alphabExponent_0_bMantissa_out1;
  Delay52_PS_60_reg_next(1) <= Delay52_PS_60_reg(0);
  Delay52_PS_60_reg_next(2) <= Delay52_PS_60_reg(1);
  Delay52_PS_60_reg_next(3) <= Delay52_PS_60_reg(2);
  Delay52_PS_60_reg_next(4) <= Delay52_PS_60_reg(3);
  Delay52_PS_60_reg_next(5) <= Delay52_PS_60_reg(4);
  Delay52_PS_60_reg_next(6) <= Delay52_PS_60_reg(5);
  Delay52_PS_60_reg_next(7) <= Delay52_PS_60_reg(6);
  Delay52_PS_60_reg_next(8) <= Delay52_PS_60_reg(7);
  Delay52_PS_60_reg_next(9) <= Delay52_PS_60_reg(8);
  Delay52_PS_60_reg_next(10) <= Delay52_PS_60_reg(9);
  Delay52_PS_60_reg_next(11) <= Delay52_PS_60_reg(10);
  Delay52_PS_60_reg_next(12) <= Delay52_PS_60_reg(11);
  Delay52_PS_60_reg_next(13) <= Delay52_PS_60_reg(12);
  Delay52_PS_60_reg_next(14) <= Delay52_PS_60_reg(13);
  Delay52_PS_60_reg_next(15) <= Delay52_PS_60_reg(14);
  Delay52_PS_60_reg_next(16) <= Delay52_PS_60_reg(15);
  Delay52_PS_60_reg_next(17) <= Delay52_PS_60_reg(16);
  Delay52_PS_60_reg_next(18) <= Delay52_PS_60_reg(17);
  Delay52_PS_60_reg_next(19) <= Delay52_PS_60_reg(18);
  Delay52_PS_60_reg_next(20) <= Delay52_PS_60_reg(19);
  Delay52_PS_60_reg_next(21) <= Delay52_PS_60_reg(20);
  Delay52_PS_60_reg_next(22) <= Delay52_PS_60_reg(21);
  Delay52_PS_60_reg_next(23) <= Delay52_PS_60_reg(22);
  Delay52_PS_60_reg_next(24) <= Delay52_PS_60_reg(23);
  Delay52_PS_60_reg_next(25) <= Delay52_PS_60_reg(24);
  Delay52_PS_60_reg_next(26) <= Delay52_PS_60_reg(25);
  Delay52_PS_60_reg_next(27) <= Delay52_PS_60_reg(26);
  Delay52_PS_60_reg_next(28) <= Delay52_PS_60_reg(27);
  Delay52_PS_60_reg_next(29) <= Delay52_PS_60_reg(28);
  Delay52_PS_60_reg_next(30) <= Delay52_PS_60_reg(29);
  Delay52_PS_60_reg_next(31) <= Delay52_PS_60_reg(30);
  Delay52_PS_60_reg_next(32) <= Delay52_PS_60_reg(31);
  Delay52_PS_60_reg_next(33) <= Delay52_PS_60_reg(32);
  Delay52_PS_60_reg_next(34) <= Delay52_PS_60_reg(33);
  Delay52_PS_60_reg_next(35) <= Delay52_PS_60_reg(34);
  Delay52_PS_60_reg_next(36) <= Delay52_PS_60_reg(35);
  Delay52_PS_60_reg_next(37) <= Delay52_PS_60_reg(36);
  Delay52_PS_60_reg_next(38) <= Delay52_PS_60_reg(37);
  Delay52_PS_60_reg_next(39) <= Delay52_PS_60_reg(38);
  Delay52_PS_60_reg_next(40) <= Delay52_PS_60_reg(39);
  Delay52_PS_60_reg_next(41) <= Delay52_PS_60_reg(40);
  Delay52_PS_60_reg_next(42) <= Delay52_PS_60_reg(41);
  Delay52_PS_60_reg_next(43) <= Delay52_PS_60_reg(42);
  Delay52_PS_60_reg_next(44) <= Delay52_PS_60_reg(43);
  Delay52_PS_60_reg_next(45) <= Delay52_PS_60_reg(44);
  Delay52_PS_60_reg_next(46) <= Delay52_PS_60_reg(45);
  Delay52_PS_60_reg_next(47) <= Delay52_PS_60_reg(46);
  Delay52_PS_60_reg_next(48) <= Delay52_PS_60_reg(47);
  Delay52_PS_60_reg_next(49) <= Delay52_PS_60_reg(48);
  Delay52_PS_60_reg_next(50) <= Delay52_PS_60_reg(49);
  Delay52_PS_60_reg_next(51) <= Delay52_PS_60_reg(50);
  Delay52_PS_60_reg_next(52) <= Delay52_PS_60_reg(51);
  Delay52_PS_60_reg_next(53) <= Delay52_PS_60_reg(52);
  Delay52_PS_60_reg_next(54) <= Delay52_PS_60_reg(53);
  Delay52_PS_60_reg_next(55) <= Delay52_PS_60_reg(54);
  Delay52_PS_60_reg_next(56) <= Delay52_PS_60_reg(55);
  Delay52_PS_60_reg_next(57) <= Delay52_PS_60_reg(56);
  Delay52_PS_60_reg_next(58) <= Delay52_PS_60_reg(57);

  alphaExponent_0_cfType_Exp_out1 <= aExponent_0_out1 OR aExponent_cfType_Exponent_I_out1;

  alpha1_out1 <= '1';

  alpha0_out1 <= '0';

  
  if_Exponent_0_cfType_Exp_out1 <= alpha1_out1 WHEN alphaExponent_0_cfType_Exp_out1 = '0' ELSE
      alpha0_out1;

  Bit_Concat1_out1 <= if_Exponent_0_cfType_Exp_out1 & Switch_out1;

  Delay2_PS_3_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay2_PS_3_reg(0) <= to_unsigned(0, 53);
      Delay2_PS_3_reg(1) <= to_unsigned(0, 53);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay2_PS_3_reg(0) <= Delay2_PS_3_reg_next(0);
        Delay2_PS_3_reg(1) <= Delay2_PS_3_reg_next(1);
      END IF;
    END IF;
  END PROCESS Delay2_PS_3_process;

  Delay2_PS_3_out1 <= Delay2_PS_3_reg(1);
  Delay2_PS_3_reg_next(0) <= Bit_Concat1_out1;
  Delay2_PS_3_reg_next(1) <= Delay2_PS_3_reg(0);

  alphaExponent_0_cfType_Exp_out1_1 <= bExponent_0_out1 OR bExponent_cfType_Exponent_I_out1;

  alpha1_out1_1 <= '1';

  alpha0_out1_1 <= '0';

  
  if_Exponent_0_cfType_Exp_out1_1 <= alpha1_out1_1 WHEN alphaExponent_0_cfType_Exp_out1_1 = '0' ELSE
      alpha0_out1_1;

  Bit_Concat1_out1_1 <= if_Exponent_0_cfType_Exp_out1_1 & Switch_out1_1;

  Delay1_PS_3_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay1_PS_3_reg(0) <= to_unsigned(0, 53);
      Delay1_PS_3_reg(1) <= to_unsigned(0, 53);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay1_PS_3_reg(0) <= Delay1_PS_3_reg_next(0);
        Delay1_PS_3_reg(1) <= Delay1_PS_3_reg_next(1);
      END IF;
    END IF;
  END PROCESS Delay1_PS_3_process;

  Delay1_PS_3_out1 <= Delay1_PS_3_reg(1);
  Delay1_PS_3_reg_next(0) <= Bit_Concat1_out1_1;
  Delay1_PS_3_reg_next(1) <= Delay1_PS_3_reg(0);

  
  mant_a_norm_mant_b_norm_relop1 <= '1' WHEN Delay2_PS_3_out1 < Delay1_PS_3_out1 ELSE
      '0';

  Delay2_PS_4_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay2_PS_4_out1 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay2_PS_4_out1 <= mant_a_norm_mant_b_norm_relop1;
      END IF;
    END IF;
  END PROCESS Delay2_PS_4_process;


  C_out1 <= to_unsigned(16#001#, 11);

  
  if_Exponent_0_out1 <= Delay16_PS_1_out1 WHEN aExponent_0_out1 = '0' ELSE
      C_out1;

  Delay3_PS_3_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay3_PS_3_reg(0) <= to_unsigned(16#000#, 11);
      Delay3_PS_3_reg(1) <= to_unsigned(16#000#, 11);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay3_PS_3_reg(0) <= Delay3_PS_3_reg_next(0);
        Delay3_PS_3_reg(1) <= Delay3_PS_3_reg_next(1);
      END IF;
    END IF;
  END PROCESS Delay3_PS_3_process;

  Delay3_PS_3_out1 <= Delay3_PS_3_reg(1);
  Delay3_PS_3_reg_next(0) <= if_Exponent_0_out1;
  Delay3_PS_3_reg_next(1) <= Delay3_PS_3_reg(0);

  DTC_out1 <= signed(resize(Delay3_PS_3_out1, 13));

  Delay6_PS_4_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay6_PS_4_out1 <= to_signed(16#0000#, 13);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay6_PS_4_out1 <= DTC_out1;
      END IF;
    END IF;
  END PROCESS Delay6_PS_4_process;


  cast_1_out1 <= to_signed(16#001#, 10);

  exp_a_norm_cast_1_out1 <= DTC_out1 - resize(cast_1_out1, 13);

  Delay7_PS_4_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay7_PS_4_out1 <= to_signed(16#0000#, 13);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay7_PS_4_out1 <= exp_a_norm_cast_1_out1;
      END IF;
    END IF;
  END PROCESS Delay7_PS_4_process;


  
  if_mant_a_norm_mant_b_norm_out1 <= Delay6_PS_4_out1 WHEN Delay2_PS_4_out1 = '0' ELSE
      Delay7_PS_4_out1;

  Delay4_PS_5_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay4_PS_5_out1 <= to_signed(16#0000#, 13);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay4_PS_5_out1 <= if_mant_a_norm_mant_b_norm_out1;
      END IF;
    END IF;
  END PROCESS Delay4_PS_5_process;


  C_out1_1 <= to_unsigned(16#001#, 11);

  
  if_Exponent_0_out1_1 <= Delay19_PS_1_out1 WHEN bExponent_0_out1 = '0' ELSE
      C_out1_1;

  Delay_PS_3_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay_PS_3_reg(0) <= to_unsigned(16#000#, 11);
      Delay_PS_3_reg(1) <= to_unsigned(16#000#, 11);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay_PS_3_reg(0) <= Delay_PS_3_reg_next(0);
        Delay_PS_3_reg(1) <= Delay_PS_3_reg_next(1);
      END IF;
    END IF;
  END PROCESS Delay_PS_3_process;

  Delay_PS_3_out1 <= Delay_PS_3_reg(1);
  Delay_PS_3_reg_next(0) <= if_Exponent_0_out1_1;
  Delay_PS_3_reg_next(1) <= Delay_PS_3_reg(0);

  DTC1_out1 <= signed(resize(Delay_PS_3_out1, 13));

  Delay5_PS_4_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay5_PS_4_out1 <= to_signed(16#0000#, 13);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay5_PS_4_out1 <= DTC1_out1;
      END IF;
    END IF;
  END PROCESS Delay5_PS_4_process;


  Delay1_PS_5_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay1_PS_5_out1 <= to_signed(16#0000#, 13);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay1_PS_5_out1 <= Delay5_PS_4_out1;
      END IF;
    END IF;
  END PROCESS Delay1_PS_5_process;


  exp_a_norm_exp_b_norm_out1 <= Delay4_PS_5_out1 - Delay1_PS_5_out1;

  cfType_ExponentBiasout1 <= to_signed(16#03FF#, 13);

  exp_a_norm_exp_b_norm_cast_out1 <= exp_a_norm_exp_b_norm_out1 + cfType_ExponentBiasout1;

  Delay_PS_6_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay_out1 <= to_signed(16#0000#, 13);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay_out1 <= exp_a_norm_exp_b_norm_cast_out1;
      END IF;
    END IF;
  END PROCESS Delay_PS_6_process;


  
  exp_tmp_2_cfType_ExponentBi_out1 <= '1' WHEN Delay_out1 >= to_signed(16#07FF#, 13) ELSE
      '0';

  
  exp_tmp_1_out1 <= '1' WHEN Delay_out1 < to_signed(16#0001#, 13) ELSE
      '0';

  C3_out1 <= to_unsigned(16#00#, 6);

  
  exp_tmp_0_out1 <= '1' WHEN Delay_out1 = to_signed(16#0000#, 13) ELSE
      '0';

  C1_out1 <= to_unsigned(16#36#, 6);

  C_out1_2 <= to_unsigned(16#01#, 6);

  
  if_exp_tmp_0_out1 <= C1_out1 WHEN exp_tmp_0_out1 = '0' ELSE
      C_out1_2;

  
  if_exp_tmp_1_1_out1 <= C3_out1 WHEN exp_tmp_1_out1 = '0' ELSE
      if_exp_tmp_0_out1;

  C5_out1 <= to_unsigned(16#36#, 6);

  
  if_exp_tmp_2_cfType_ExponentB_1_out1 <= if_exp_tmp_1_1_out1 WHEN exp_tmp_2_cfType_ExponentBi_out1 = '0' ELSE
      C5_out1;

  Delay11_PS_7_59_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay11_PS_7_59_reg(0) <= to_unsigned(16#00#, 6);
      Delay11_PS_7_59_reg(1) <= to_unsigned(16#00#, 6);
      Delay11_PS_7_59_reg(2) <= to_unsigned(16#00#, 6);
      Delay11_PS_7_59_reg(3) <= to_unsigned(16#00#, 6);
      Delay11_PS_7_59_reg(4) <= to_unsigned(16#00#, 6);
      Delay11_PS_7_59_reg(5) <= to_unsigned(16#00#, 6);
      Delay11_PS_7_59_reg(6) <= to_unsigned(16#00#, 6);
      Delay11_PS_7_59_reg(7) <= to_unsigned(16#00#, 6);
      Delay11_PS_7_59_reg(8) <= to_unsigned(16#00#, 6);
      Delay11_PS_7_59_reg(9) <= to_unsigned(16#00#, 6);
      Delay11_PS_7_59_reg(10) <= to_unsigned(16#00#, 6);
      Delay11_PS_7_59_reg(11) <= to_unsigned(16#00#, 6);
      Delay11_PS_7_59_reg(12) <= to_unsigned(16#00#, 6);
      Delay11_PS_7_59_reg(13) <= to_unsigned(16#00#, 6);
      Delay11_PS_7_59_reg(14) <= to_unsigned(16#00#, 6);
      Delay11_PS_7_59_reg(15) <= to_unsigned(16#00#, 6);
      Delay11_PS_7_59_reg(16) <= to_unsigned(16#00#, 6);
      Delay11_PS_7_59_reg(17) <= to_unsigned(16#00#, 6);
      Delay11_PS_7_59_reg(18) <= to_unsigned(16#00#, 6);
      Delay11_PS_7_59_reg(19) <= to_unsigned(16#00#, 6);
      Delay11_PS_7_59_reg(20) <= to_unsigned(16#00#, 6);
      Delay11_PS_7_59_reg(21) <= to_unsigned(16#00#, 6);
      Delay11_PS_7_59_reg(22) <= to_unsigned(16#00#, 6);
      Delay11_PS_7_59_reg(23) <= to_unsigned(16#00#, 6);
      Delay11_PS_7_59_reg(24) <= to_unsigned(16#00#, 6);
      Delay11_PS_7_59_reg(25) <= to_unsigned(16#00#, 6);
      Delay11_PS_7_59_reg(26) <= to_unsigned(16#00#, 6);
      Delay11_PS_7_59_reg(27) <= to_unsigned(16#00#, 6);
      Delay11_PS_7_59_reg(28) <= to_unsigned(16#00#, 6);
      Delay11_PS_7_59_reg(29) <= to_unsigned(16#00#, 6);
      Delay11_PS_7_59_reg(30) <= to_unsigned(16#00#, 6);
      Delay11_PS_7_59_reg(31) <= to_unsigned(16#00#, 6);
      Delay11_PS_7_59_reg(32) <= to_unsigned(16#00#, 6);
      Delay11_PS_7_59_reg(33) <= to_unsigned(16#00#, 6);
      Delay11_PS_7_59_reg(34) <= to_unsigned(16#00#, 6);
      Delay11_PS_7_59_reg(35) <= to_unsigned(16#00#, 6);
      Delay11_PS_7_59_reg(36) <= to_unsigned(16#00#, 6);
      Delay11_PS_7_59_reg(37) <= to_unsigned(16#00#, 6);
      Delay11_PS_7_59_reg(38) <= to_unsigned(16#00#, 6);
      Delay11_PS_7_59_reg(39) <= to_unsigned(16#00#, 6);
      Delay11_PS_7_59_reg(40) <= to_unsigned(16#00#, 6);
      Delay11_PS_7_59_reg(41) <= to_unsigned(16#00#, 6);
      Delay11_PS_7_59_reg(42) <= to_unsigned(16#00#, 6);
      Delay11_PS_7_59_reg(43) <= to_unsigned(16#00#, 6);
      Delay11_PS_7_59_reg(44) <= to_unsigned(16#00#, 6);
      Delay11_PS_7_59_reg(45) <= to_unsigned(16#00#, 6);
      Delay11_PS_7_59_reg(46) <= to_unsigned(16#00#, 6);
      Delay11_PS_7_59_reg(47) <= to_unsigned(16#00#, 6);
      Delay11_PS_7_59_reg(48) <= to_unsigned(16#00#, 6);
      Delay11_PS_7_59_reg(49) <= to_unsigned(16#00#, 6);
      Delay11_PS_7_59_reg(50) <= to_unsigned(16#00#, 6);
      Delay11_PS_7_59_reg(51) <= to_unsigned(16#00#, 6);
      Delay11_PS_7_59_reg(52) <= to_unsigned(16#00#, 6);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay11_PS_7_59_reg(0) <= Delay11_PS_7_59_reg_next(0);
        Delay11_PS_7_59_reg(1) <= Delay11_PS_7_59_reg_next(1);
        Delay11_PS_7_59_reg(2) <= Delay11_PS_7_59_reg_next(2);
        Delay11_PS_7_59_reg(3) <= Delay11_PS_7_59_reg_next(3);
        Delay11_PS_7_59_reg(4) <= Delay11_PS_7_59_reg_next(4);
        Delay11_PS_7_59_reg(5) <= Delay11_PS_7_59_reg_next(5);
        Delay11_PS_7_59_reg(6) <= Delay11_PS_7_59_reg_next(6);
        Delay11_PS_7_59_reg(7) <= Delay11_PS_7_59_reg_next(7);
        Delay11_PS_7_59_reg(8) <= Delay11_PS_7_59_reg_next(8);
        Delay11_PS_7_59_reg(9) <= Delay11_PS_7_59_reg_next(9);
        Delay11_PS_7_59_reg(10) <= Delay11_PS_7_59_reg_next(10);
        Delay11_PS_7_59_reg(11) <= Delay11_PS_7_59_reg_next(11);
        Delay11_PS_7_59_reg(12) <= Delay11_PS_7_59_reg_next(12);
        Delay11_PS_7_59_reg(13) <= Delay11_PS_7_59_reg_next(13);
        Delay11_PS_7_59_reg(14) <= Delay11_PS_7_59_reg_next(14);
        Delay11_PS_7_59_reg(15) <= Delay11_PS_7_59_reg_next(15);
        Delay11_PS_7_59_reg(16) <= Delay11_PS_7_59_reg_next(16);
        Delay11_PS_7_59_reg(17) <= Delay11_PS_7_59_reg_next(17);
        Delay11_PS_7_59_reg(18) <= Delay11_PS_7_59_reg_next(18);
        Delay11_PS_7_59_reg(19) <= Delay11_PS_7_59_reg_next(19);
        Delay11_PS_7_59_reg(20) <= Delay11_PS_7_59_reg_next(20);
        Delay11_PS_7_59_reg(21) <= Delay11_PS_7_59_reg_next(21);
        Delay11_PS_7_59_reg(22) <= Delay11_PS_7_59_reg_next(22);
        Delay11_PS_7_59_reg(23) <= Delay11_PS_7_59_reg_next(23);
        Delay11_PS_7_59_reg(24) <= Delay11_PS_7_59_reg_next(24);
        Delay11_PS_7_59_reg(25) <= Delay11_PS_7_59_reg_next(25);
        Delay11_PS_7_59_reg(26) <= Delay11_PS_7_59_reg_next(26);
        Delay11_PS_7_59_reg(27) <= Delay11_PS_7_59_reg_next(27);
        Delay11_PS_7_59_reg(28) <= Delay11_PS_7_59_reg_next(28);
        Delay11_PS_7_59_reg(29) <= Delay11_PS_7_59_reg_next(29);
        Delay11_PS_7_59_reg(30) <= Delay11_PS_7_59_reg_next(30);
        Delay11_PS_7_59_reg(31) <= Delay11_PS_7_59_reg_next(31);
        Delay11_PS_7_59_reg(32) <= Delay11_PS_7_59_reg_next(32);
        Delay11_PS_7_59_reg(33) <= Delay11_PS_7_59_reg_next(33);
        Delay11_PS_7_59_reg(34) <= Delay11_PS_7_59_reg_next(34);
        Delay11_PS_7_59_reg(35) <= Delay11_PS_7_59_reg_next(35);
        Delay11_PS_7_59_reg(36) <= Delay11_PS_7_59_reg_next(36);
        Delay11_PS_7_59_reg(37) <= Delay11_PS_7_59_reg_next(37);
        Delay11_PS_7_59_reg(38) <= Delay11_PS_7_59_reg_next(38);
        Delay11_PS_7_59_reg(39) <= Delay11_PS_7_59_reg_next(39);
        Delay11_PS_7_59_reg(40) <= Delay11_PS_7_59_reg_next(40);
        Delay11_PS_7_59_reg(41) <= Delay11_PS_7_59_reg_next(41);
        Delay11_PS_7_59_reg(42) <= Delay11_PS_7_59_reg_next(42);
        Delay11_PS_7_59_reg(43) <= Delay11_PS_7_59_reg_next(43);
        Delay11_PS_7_59_reg(44) <= Delay11_PS_7_59_reg_next(44);
        Delay11_PS_7_59_reg(45) <= Delay11_PS_7_59_reg_next(45);
        Delay11_PS_7_59_reg(46) <= Delay11_PS_7_59_reg_next(46);
        Delay11_PS_7_59_reg(47) <= Delay11_PS_7_59_reg_next(47);
        Delay11_PS_7_59_reg(48) <= Delay11_PS_7_59_reg_next(48);
        Delay11_PS_7_59_reg(49) <= Delay11_PS_7_59_reg_next(49);
        Delay11_PS_7_59_reg(50) <= Delay11_PS_7_59_reg_next(50);
        Delay11_PS_7_59_reg(51) <= Delay11_PS_7_59_reg_next(51);
        Delay11_PS_7_59_reg(52) <= Delay11_PS_7_59_reg_next(52);
      END IF;
    END IF;
  END PROCESS Delay11_PS_7_59_process;

  Delay11_PS_7_59_out1 <= Delay11_PS_7_59_reg(52);
  Delay11_PS_7_59_reg_next(0) <= if_exp_tmp_2_cfType_ExponentB_1_out1;
  Delay11_PS_7_59_reg_next(1) <= Delay11_PS_7_59_reg(0);
  Delay11_PS_7_59_reg_next(2) <= Delay11_PS_7_59_reg(1);
  Delay11_PS_7_59_reg_next(3) <= Delay11_PS_7_59_reg(2);
  Delay11_PS_7_59_reg_next(4) <= Delay11_PS_7_59_reg(3);
  Delay11_PS_7_59_reg_next(5) <= Delay11_PS_7_59_reg(4);
  Delay11_PS_7_59_reg_next(6) <= Delay11_PS_7_59_reg(5);
  Delay11_PS_7_59_reg_next(7) <= Delay11_PS_7_59_reg(6);
  Delay11_PS_7_59_reg_next(8) <= Delay11_PS_7_59_reg(7);
  Delay11_PS_7_59_reg_next(9) <= Delay11_PS_7_59_reg(8);
  Delay11_PS_7_59_reg_next(10) <= Delay11_PS_7_59_reg(9);
  Delay11_PS_7_59_reg_next(11) <= Delay11_PS_7_59_reg(10);
  Delay11_PS_7_59_reg_next(12) <= Delay11_PS_7_59_reg(11);
  Delay11_PS_7_59_reg_next(13) <= Delay11_PS_7_59_reg(12);
  Delay11_PS_7_59_reg_next(14) <= Delay11_PS_7_59_reg(13);
  Delay11_PS_7_59_reg_next(15) <= Delay11_PS_7_59_reg(14);
  Delay11_PS_7_59_reg_next(16) <= Delay11_PS_7_59_reg(15);
  Delay11_PS_7_59_reg_next(17) <= Delay11_PS_7_59_reg(16);
  Delay11_PS_7_59_reg_next(18) <= Delay11_PS_7_59_reg(17);
  Delay11_PS_7_59_reg_next(19) <= Delay11_PS_7_59_reg(18);
  Delay11_PS_7_59_reg_next(20) <= Delay11_PS_7_59_reg(19);
  Delay11_PS_7_59_reg_next(21) <= Delay11_PS_7_59_reg(20);
  Delay11_PS_7_59_reg_next(22) <= Delay11_PS_7_59_reg(21);
  Delay11_PS_7_59_reg_next(23) <= Delay11_PS_7_59_reg(22);
  Delay11_PS_7_59_reg_next(24) <= Delay11_PS_7_59_reg(23);
  Delay11_PS_7_59_reg_next(25) <= Delay11_PS_7_59_reg(24);
  Delay11_PS_7_59_reg_next(26) <= Delay11_PS_7_59_reg(25);
  Delay11_PS_7_59_reg_next(27) <= Delay11_PS_7_59_reg(26);
  Delay11_PS_7_59_reg_next(28) <= Delay11_PS_7_59_reg(27);
  Delay11_PS_7_59_reg_next(29) <= Delay11_PS_7_59_reg(28);
  Delay11_PS_7_59_reg_next(30) <= Delay11_PS_7_59_reg(29);
  Delay11_PS_7_59_reg_next(31) <= Delay11_PS_7_59_reg(30);
  Delay11_PS_7_59_reg_next(32) <= Delay11_PS_7_59_reg(31);
  Delay11_PS_7_59_reg_next(33) <= Delay11_PS_7_59_reg(32);
  Delay11_PS_7_59_reg_next(34) <= Delay11_PS_7_59_reg(33);
  Delay11_PS_7_59_reg_next(35) <= Delay11_PS_7_59_reg(34);
  Delay11_PS_7_59_reg_next(36) <= Delay11_PS_7_59_reg(35);
  Delay11_PS_7_59_reg_next(37) <= Delay11_PS_7_59_reg(36);
  Delay11_PS_7_59_reg_next(38) <= Delay11_PS_7_59_reg(37);
  Delay11_PS_7_59_reg_next(39) <= Delay11_PS_7_59_reg(38);
  Delay11_PS_7_59_reg_next(40) <= Delay11_PS_7_59_reg(39);
  Delay11_PS_7_59_reg_next(41) <= Delay11_PS_7_59_reg(40);
  Delay11_PS_7_59_reg_next(42) <= Delay11_PS_7_59_reg(41);
  Delay11_PS_7_59_reg_next(43) <= Delay11_PS_7_59_reg(42);
  Delay11_PS_7_59_reg_next(44) <= Delay11_PS_7_59_reg(43);
  Delay11_PS_7_59_reg_next(45) <= Delay11_PS_7_59_reg(44);
  Delay11_PS_7_59_reg_next(46) <= Delay11_PS_7_59_reg(45);
  Delay11_PS_7_59_reg_next(47) <= Delay11_PS_7_59_reg(46);
  Delay11_PS_7_59_reg_next(48) <= Delay11_PS_7_59_reg(47);
  Delay11_PS_7_59_reg_next(49) <= Delay11_PS_7_59_reg(48);
  Delay11_PS_7_59_reg_next(50) <= Delay11_PS_7_59_reg(49);
  Delay11_PS_7_59_reg_next(51) <= Delay11_PS_7_59_reg(50);
  Delay11_PS_7_59_reg_next(52) <= Delay11_PS_7_59_reg(51);

  
  shift_length_1_out1 <= '1' WHEN Delay11_PS_7_59_out1 = to_unsigned(16#01#, 6) ELSE
      '0';

  
  shift_length_1_out1_1 <= '1' WHEN Delay11_PS_7_59_out1 > to_unsigned(16#01#, 6) ELSE
      '0';

  C_out1_3 <= '1';

  Delay16_PS_6_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay16_PS_6_out1 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay16_PS_6_out1 <= C_out1_3;
      END IF;
    END IF;
  END PROCESS Delay16_PS_6_process;


  alpha0_out1_2 <= to_unsigned(16#0#, 4);

  Bit_Concat_out1 <= alpha0_out1_2 & Delay2_PS_3_out1;

  reinterpretcast_bitconcat_fi_0_out1 <= signed(Bit_Concat_out1);

  Delay3_PS_4_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay3_PS_4_out1 <= to_signed(0, 57);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay3_PS_4_out1 <= reinterpretcast_bitconcat_fi_0_out1;
      END IF;
    END IF;
  END PROCESS Delay3_PS_4_process;


  bitsll_mant_a_norm_1_out1 <= reinterpretcast_bitconcat_fi_0_out1 sll 1;

  Delay1_PS_4_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay1_PS_4_out1 <= to_signed(0, 57);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay1_PS_4_out1 <= bitsll_mant_a_norm_1_out1;
      END IF;
    END IF;
  END PROCESS Delay1_PS_4_process;


  
  if_mant_a_norm_mant_b_norm_1_out1 <= Delay3_PS_4_out1 WHEN Delay2_PS_4_out1 = '0' ELSE
      Delay1_PS_4_out1;

  Delay3_PS_5_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay3_PS_5_out1 <= to_signed(0, 57);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay3_PS_5_out1 <= if_mant_a_norm_mant_b_norm_1_out1;
      END IF;
    END IF;
  END PROCESS Delay3_PS_5_process;


  Bit_Slice1_out1 <= unsigned(Delay3_PS_5_out1(54 DOWNTO 0));

  Data_Type_Conversion1_out1 <= signed(Bit_Slice1_out1);

  alpha1_out1_2 <= to_unsigned(16#0#, 4);

  Bit_Concat1_out1_2 <= alpha1_out1_2 & Delay1_PS_3_out1;

  reinterpretcast_bitconcat_fi_0_out1_1 <= signed(Bit_Concat1_out1_2);

  Unary_Minus2_in0 <=  - (resize(reinterpretcast_bitconcat_fi_0_out1_1, 58));
  Unary_Minus2_out1 <= Unary_Minus2_in0(56 DOWNTO 0);

  Delay4_PS_4_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay4_PS_4_out1 <= to_signed(0, 57);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay4_PS_4_out1 <= Unary_Minus2_out1;
      END IF;
    END IF;
  END PROCESS Delay4_PS_4_process;


  Delay2_PS_5_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay2_PS_5_out1 <= to_signed(0, 57);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay2_PS_5_out1 <= Delay4_PS_4_out1;
      END IF;
    END IF;
  END PROCESS Delay2_PS_5_process;


  Bit_Slice_out1 <= unsigned(Delay2_PS_5_out1(54 DOWNTO 0));

  Data_Type_Conversion_out1_1 <= signed(Bit_Slice_out1);

  R_mant_b_norm_out1 <= Data_Type_Conversion1_out1 + Data_Type_Conversion_out1_1;

  bitsll_R_1_out1 <= R_mant_b_norm_out1 sll 1;

  Delay17_PS_6_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay17_PS_6_out1 <= to_signed(0, 55);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay17_PS_6_out1 <= bitsll_R_1_out1;
      END IF;
    END IF;
  END PROCESS Delay17_PS_6_process;


  Delay1_PS_6_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay1_PS_6_out1 <= to_signed(0, 55);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay1_PS_6_out1 <= Data_Type_Conversion_out1_1;
      END IF;
    END IF;
  END PROCESS Delay1_PS_6_process;


  R_mant_b_norm_out1_1 <= Delay17_PS_6_out1 + Delay1_PS_6_out1;

  Bit_Slice_out1_1 <= R_mant_b_norm_out1_1(54);

  Logical_Operator_out1_1 <=  NOT Bit_Slice_out1_1;

  Bit_Concat_out1_1 <= unsigned'(Delay16_PS_6_out1 & Logical_Operator_out1_1);

  Delay3_PS_7_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay3_PS_7_out1 <= to_unsigned(16#0#, 2);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay3_PS_7_out1 <= Bit_Concat_out1_1;
      END IF;
    END IF;
  END PROCESS Delay3_PS_7_process;


  
  if_tmp_0_1_out1 <= R_mant_b_norm_out1_1 WHEN Bit_Slice_out1_1 = '0' ELSE
      Delay17_PS_6_out1;

  bitsll_R_1_out1_1 <= if_tmp_0_1_out1 sll 1;

  Delay_PS_7_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay_PS_7_out1 <= to_signed(0, 55);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay_PS_7_out1 <= bitsll_R_1_out1_1;
      END IF;
    END IF;
  END PROCESS Delay_PS_7_process;


  Delay4_PS_7_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay4_PS_7_out1 <= to_signed(0, 55);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay4_PS_7_out1 <= Delay1_PS_6_out1;
      END IF;
    END IF;
  END PROCESS Delay4_PS_7_process;


  R_mant_b_norm_out1_2 <= Delay_PS_7_out1 + Delay4_PS_7_out1;

  Bit_Slice_out1_2 <= R_mant_b_norm_out1_2(54);

  Logical_Operator_out1_2 <=  NOT Bit_Slice_out1_2;

  Bit_Concat_out1_2 <= Delay3_PS_7_out1 & Logical_Operator_out1_2;

  Delay6_PS_8_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay6_PS_8_out1 <= to_unsigned(16#0#, 3);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay6_PS_8_out1 <= Bit_Concat_out1_2;
      END IF;
    END IF;
  END PROCESS Delay6_PS_8_process;


  
  if_tmp_0_1_out1_1 <= R_mant_b_norm_out1_2 WHEN Bit_Slice_out1_2 = '0' ELSE
      Delay_PS_7_out1;

  bitsll_R_1_out1_2 <= if_tmp_0_1_out1_1 sll 1;

  Delay7_PS_8_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay7_PS_8_out1 <= to_signed(0, 55);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay7_PS_8_out1 <= bitsll_R_1_out1_2;
      END IF;
    END IF;
  END PROCESS Delay7_PS_8_process;


  Delay5_PS_8_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay5_PS_8_out1 <= to_signed(0, 55);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay5_PS_8_out1 <= Delay4_PS_7_out1;
      END IF;
    END IF;
  END PROCESS Delay5_PS_8_process;


  R_mant_b_norm_out1_3 <= Delay7_PS_8_out1 + Delay5_PS_8_out1;

  Bit_Slice_out1_3 <= R_mant_b_norm_out1_3(54);

  Logical_Operator_out1_3 <=  NOT Bit_Slice_out1_3;

  Bit_Concat_out1_3 <= Delay6_PS_8_out1 & Logical_Operator_out1_3;

  Delay_PS_9_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay_PS_9_out1 <= to_unsigned(16#0#, 4);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay_PS_9_out1 <= Bit_Concat_out1_3;
      END IF;
    END IF;
  END PROCESS Delay_PS_9_process;


  
  if_tmp_0_1_out1_2 <= R_mant_b_norm_out1_3 WHEN Bit_Slice_out1_3 = '0' ELSE
      Delay7_PS_8_out1;

  bitsll_R_1_out1_3 <= if_tmp_0_1_out1_2 sll 1;

  Delay8_PS_9_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay8_PS_9_out1 <= to_signed(0, 55);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay8_PS_9_out1 <= bitsll_R_1_out1_3;
      END IF;
    END IF;
  END PROCESS Delay8_PS_9_process;


  Delay10_PS_9_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay10_PS_9_out1 <= to_signed(0, 55);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay10_PS_9_out1 <= Delay5_PS_8_out1;
      END IF;
    END IF;
  END PROCESS Delay10_PS_9_process;


  R_mant_b_norm_out1_4 <= Delay8_PS_9_out1 + Delay10_PS_9_out1;

  Bit_Slice_out1_4 <= R_mant_b_norm_out1_4(54);

  Logical_Operator_out1_4 <=  NOT Bit_Slice_out1_4;

  Bit_Concat_out1_4 <= Delay_PS_9_out1 & Logical_Operator_out1_4;

  Delay13_PS_10_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay13_PS_10_out1 <= to_unsigned(16#00#, 5);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay13_PS_10_out1 <= Bit_Concat_out1_4;
      END IF;
    END IF;
  END PROCESS Delay13_PS_10_process;


  
  if_tmp_0_1_out1_3 <= R_mant_b_norm_out1_4 WHEN Bit_Slice_out1_4 = '0' ELSE
      Delay8_PS_9_out1;

  bitsll_R_1_out1_4 <= if_tmp_0_1_out1_3 sll 1;

  Delay14_PS_10_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay14_PS_10_out1 <= to_signed(0, 55);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay14_PS_10_out1 <= bitsll_R_1_out1_4;
      END IF;
    END IF;
  END PROCESS Delay14_PS_10_process;


  Delay11_PS_10_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay11_PS_10_out1 <= to_signed(0, 55);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay11_PS_10_out1 <= Delay10_PS_9_out1;
      END IF;
    END IF;
  END PROCESS Delay11_PS_10_process;


  R_mant_b_norm_out1_5 <= Delay14_PS_10_out1 + Delay11_PS_10_out1;

  Bit_Slice_out1_5 <= R_mant_b_norm_out1_5(54);

  Logical_Operator_out1_5 <=  NOT Bit_Slice_out1_5;

  Bit_Concat_out1_5 <= Delay13_PS_10_out1 & Logical_Operator_out1_5;

  Delay18_PS_11_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay18_PS_11_out1 <= to_unsigned(16#00#, 6);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay18_PS_11_out1 <= Bit_Concat_out1_5;
      END IF;
    END IF;
  END PROCESS Delay18_PS_11_process;


  
  if_tmp_0_1_out1_4 <= R_mant_b_norm_out1_5 WHEN Bit_Slice_out1_5 = '0' ELSE
      Delay14_PS_10_out1;

  bitsll_R_1_out1_5 <= if_tmp_0_1_out1_4 sll 1;

  Delay15_PS_11_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay15_PS_11_out1 <= to_signed(0, 55);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay15_PS_11_out1 <= bitsll_R_1_out1_5;
      END IF;
    END IF;
  END PROCESS Delay15_PS_11_process;


  Delay19_PS_11_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay19_PS_11_out1 <= to_signed(0, 55);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay19_PS_11_out1 <= Delay11_PS_10_out1;
      END IF;
    END IF;
  END PROCESS Delay19_PS_11_process;


  R_mant_b_norm_out1_6 <= Delay15_PS_11_out1 + Delay19_PS_11_out1;

  Bit_Slice_out1_6 <= R_mant_b_norm_out1_6(54);

  Logical_Operator_out1_6 <=  NOT Bit_Slice_out1_6;

  Bit_Concat_out1_6 <= Delay18_PS_11_out1 & Logical_Operator_out1_6;

  Delay21_PS_12_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay21_PS_12_out1 <= to_unsigned(16#00#, 7);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay21_PS_12_out1 <= Bit_Concat_out1_6;
      END IF;
    END IF;
  END PROCESS Delay21_PS_12_process;


  
  if_tmp_0_1_out1_5 <= R_mant_b_norm_out1_6 WHEN Bit_Slice_out1_6 = '0' ELSE
      Delay15_PS_11_out1;

  bitsll_R_1_out1_6 <= if_tmp_0_1_out1_5 sll 1;

  Delay22_PS_12_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay22_PS_12_out1 <= to_signed(0, 55);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay22_PS_12_out1 <= bitsll_R_1_out1_6;
      END IF;
    END IF;
  END PROCESS Delay22_PS_12_process;


  Delay20_PS_12_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay20_PS_12_out1 <= to_signed(0, 55);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay20_PS_12_out1 <= Delay19_PS_11_out1;
      END IF;
    END IF;
  END PROCESS Delay20_PS_12_process;


  R_mant_b_norm_out1_7 <= Delay22_PS_12_out1 + Delay20_PS_12_out1;

  Bit_Slice_out1_7 <= R_mant_b_norm_out1_7(54);

  Logical_Operator_out1_7 <=  NOT Bit_Slice_out1_7;

  Bit_Concat_out1_7 <= Delay21_PS_12_out1 & Logical_Operator_out1_7;

  Delay24_PS_13_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay24_PS_13_out1 <= to_unsigned(16#00#, 8);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay24_PS_13_out1 <= Bit_Concat_out1_7;
      END IF;
    END IF;
  END PROCESS Delay24_PS_13_process;


  
  if_tmp_0_1_out1_6 <= R_mant_b_norm_out1_7 WHEN Bit_Slice_out1_7 = '0' ELSE
      Delay22_PS_12_out1;

  bitsll_R_1_out1_7 <= if_tmp_0_1_out1_6 sll 1;

  Delay23_PS_13_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay23_PS_13_out1 <= to_signed(0, 55);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay23_PS_13_out1 <= bitsll_R_1_out1_7;
      END IF;
    END IF;
  END PROCESS Delay23_PS_13_process;


  Delay12_PS_13_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay12_PS_13_out1 <= to_signed(0, 55);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay12_PS_13_out1 <= Delay20_PS_12_out1;
      END IF;
    END IF;
  END PROCESS Delay12_PS_13_process;


  R_mant_b_norm_out1_8 <= Delay23_PS_13_out1 + Delay12_PS_13_out1;

  Bit_Slice_out1_8 <= R_mant_b_norm_out1_8(54);

  Logical_Operator_out1_8 <=  NOT Bit_Slice_out1_8;

  Bit_Concat_out1_8 <= Delay24_PS_13_out1 & Logical_Operator_out1_8;

  Delay16_PS_14_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay16_PS_14_out1 <= to_unsigned(16#000#, 9);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay16_PS_14_out1 <= Bit_Concat_out1_8;
      END IF;
    END IF;
  END PROCESS Delay16_PS_14_process;


  
  if_tmp_0_1_out1_7 <= R_mant_b_norm_out1_8 WHEN Bit_Slice_out1_8 = '0' ELSE
      Delay23_PS_13_out1;

  bitsll_R_1_out1_8 <= if_tmp_0_1_out1_7 sll 1;

  Delay17_PS_14_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay17_PS_14_out1 <= to_signed(0, 55);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay17_PS_14_out1 <= bitsll_R_1_out1_8;
      END IF;
    END IF;
  END PROCESS Delay17_PS_14_process;


  Delay1_PS_14_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay1_PS_14_out1 <= to_signed(0, 55);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay1_PS_14_out1 <= Delay12_PS_13_out1;
      END IF;
    END IF;
  END PROCESS Delay1_PS_14_process;


  R_mant_b_norm_out1_9 <= Delay17_PS_14_out1 + Delay1_PS_14_out1;

  Bit_Slice_out1_9 <= R_mant_b_norm_out1_9(54);

  Logical_Operator_out1_9 <=  NOT Bit_Slice_out1_9;

  Bit_Concat_out1_9 <= Delay16_PS_14_out1 & Logical_Operator_out1_9;

  Delay7_PS_15_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay7_PS_15_out1 <= to_unsigned(16#000#, 10);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay7_PS_15_out1 <= Bit_Concat_out1_9;
      END IF;
    END IF;
  END PROCESS Delay7_PS_15_process;


  
  if_tmp_0_1_out1_8 <= R_mant_b_norm_out1_9 WHEN Bit_Slice_out1_9 = '0' ELSE
      Delay17_PS_14_out1;

  bitsll_R_1_out1_9 <= if_tmp_0_1_out1_8 sll 1;

  Delay6_PS_15_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay6_PS_15_out1 <= to_signed(0, 55);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay6_PS_15_out1 <= bitsll_R_1_out1_9;
      END IF;
    END IF;
  END PROCESS Delay6_PS_15_process;


  Delay8_PS_15_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay8_PS_15_out1 <= to_signed(0, 55);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay8_PS_15_out1 <= Delay1_PS_14_out1;
      END IF;
    END IF;
  END PROCESS Delay8_PS_15_process;


  R_mant_b_norm_out1_10 <= Delay6_PS_15_out1 + Delay8_PS_15_out1;

  Bit_Slice_out1_10 <= R_mant_b_norm_out1_10(54);

  Logical_Operator_out1_10 <=  NOT Bit_Slice_out1_10;

  Bit_Concat_out1_10 <= Delay7_PS_15_out1 & Logical_Operator_out1_10;

  Delay25_PS_16_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay25_PS_16_out1 <= to_unsigned(16#000#, 11);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay25_PS_16_out1 <= Bit_Concat_out1_10;
      END IF;
    END IF;
  END PROCESS Delay25_PS_16_process;


  
  if_tmp_0_1_out1_9 <= R_mant_b_norm_out1_10 WHEN Bit_Slice_out1_10 = '0' ELSE
      Delay6_PS_15_out1;

  bitsll_R_1_out1_10 <= if_tmp_0_1_out1_9 sll 1;

  Delay26_PS_16_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay26_PS_16_out1 <= to_signed(0, 55);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay26_PS_16_out1 <= bitsll_R_1_out1_10;
      END IF;
    END IF;
  END PROCESS Delay26_PS_16_process;


  Delay9_PS_16_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay9_PS_16_out1 <= to_signed(0, 55);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay9_PS_16_out1 <= Delay8_PS_15_out1;
      END IF;
    END IF;
  END PROCESS Delay9_PS_16_process;


  R_mant_b_norm_out1_11 <= Delay26_PS_16_out1 + Delay9_PS_16_out1;

  Bit_Slice_out1_11 <= R_mant_b_norm_out1_11(54);

  Logical_Operator_out1_11 <=  NOT Bit_Slice_out1_11;

  Bit_Concat_out1_11 <= Delay25_PS_16_out1 & Logical_Operator_out1_11;

  Delay28_PS_17_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay28_PS_17_out1 <= to_unsigned(16#000#, 12);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay28_PS_17_out1 <= Bit_Concat_out1_11;
      END IF;
    END IF;
  END PROCESS Delay28_PS_17_process;


  
  if_tmp_0_1_out1_10 <= R_mant_b_norm_out1_11 WHEN Bit_Slice_out1_11 = '0' ELSE
      Delay26_PS_16_out1;

  bitsll_R_1_out1_11 <= if_tmp_0_1_out1_10 sll 1;

  Delay27_PS_17_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay27_PS_17_out1 <= to_signed(0, 55);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay27_PS_17_out1 <= bitsll_R_1_out1_11;
      END IF;
    END IF;
  END PROCESS Delay27_PS_17_process;


  Delay10_PS_17_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay10_PS_17_out1 <= to_signed(0, 55);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay10_PS_17_out1 <= Delay9_PS_16_out1;
      END IF;
    END IF;
  END PROCESS Delay10_PS_17_process;


  R_mant_b_norm_out1_12 <= Delay27_PS_17_out1 + Delay10_PS_17_out1;

  Bit_Slice_out1_12 <= R_mant_b_norm_out1_12(54);

  Logical_Operator_out1_12 <=  NOT Bit_Slice_out1_12;

  Bit_Concat_out1_12 <= Delay28_PS_17_out1 & Logical_Operator_out1_12;

  Delay3_PS_18_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay3_PS_18_out1 <= to_unsigned(16#0000#, 13);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay3_PS_18_out1 <= Bit_Concat_out1_12;
      END IF;
    END IF;
  END PROCESS Delay3_PS_18_process;


  
  if_tmp_0_1_out1_11 <= R_mant_b_norm_out1_12 WHEN Bit_Slice_out1_12 = '0' ELSE
      Delay27_PS_17_out1;

  bitsll_R_1_out1_12 <= if_tmp_0_1_out1_11 sll 1;

  Delay4_PS_18_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay4_PS_18_out1 <= to_signed(0, 55);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay4_PS_18_out1 <= bitsll_R_1_out1_12;
      END IF;
    END IF;
  END PROCESS Delay4_PS_18_process;


  Delay11_PS_18_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay11_PS_18_out1 <= to_signed(0, 55);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay11_PS_18_out1 <= Delay10_PS_17_out1;
      END IF;
    END IF;
  END PROCESS Delay11_PS_18_process;


  R_mant_b_norm_out1_13 <= Delay4_PS_18_out1 + Delay11_PS_18_out1;

  Bit_Slice_out1_13 <= R_mant_b_norm_out1_13(54);

  Logical_Operator_out1_13 <=  NOT Bit_Slice_out1_13;

  Bit_Concat_out1_13 <= Delay3_PS_18_out1 & Logical_Operator_out1_13;

  Delay18_PS_19_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay18_PS_19_out1 <= to_unsigned(16#0000#, 14);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay18_PS_19_out1 <= Bit_Concat_out1_13;
      END IF;
    END IF;
  END PROCESS Delay18_PS_19_process;


  
  if_tmp_0_1_out1_12 <= R_mant_b_norm_out1_13 WHEN Bit_Slice_out1_13 = '0' ELSE
      Delay4_PS_18_out1;

  bitsll_R_1_out1_13 <= if_tmp_0_1_out1_12 sll 1;

  Delay5_PS_19_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay5_PS_19_out1 <= to_signed(0, 55);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay5_PS_19_out1 <= bitsll_R_1_out1_13;
      END IF;
    END IF;
  END PROCESS Delay5_PS_19_process;


  Delay19_PS_19_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay19_PS_19_out1 <= to_signed(0, 55);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay19_PS_19_out1 <= Delay11_PS_18_out1;
      END IF;
    END IF;
  END PROCESS Delay19_PS_19_process;


  R_mant_b_norm_out1_14 <= Delay5_PS_19_out1 + Delay19_PS_19_out1;

  Bit_Slice_out1_14 <= R_mant_b_norm_out1_14(54);

  Logical_Operator_out1_14 <=  NOT Bit_Slice_out1_14;

  Bit_Concat_out1_14 <= Delay18_PS_19_out1 & Logical_Operator_out1_14;

  Delay21_PS_20_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay21_PS_20_out1 <= to_unsigned(16#0000#, 15);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay21_PS_20_out1 <= Bit_Concat_out1_14;
      END IF;
    END IF;
  END PROCESS Delay21_PS_20_process;


  
  if_tmp_0_1_out1_13 <= R_mant_b_norm_out1_14 WHEN Bit_Slice_out1_14 = '0' ELSE
      Delay5_PS_19_out1;

  bitsll_R_1_out1_14 <= if_tmp_0_1_out1_13 sll 1;

  Delay22_PS_20_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay22_PS_20_out1 <= to_signed(0, 55);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay22_PS_20_out1 <= bitsll_R_1_out1_14;
      END IF;
    END IF;
  END PROCESS Delay22_PS_20_process;


  Delay20_PS_20_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay20_PS_20_out1 <= to_signed(0, 55);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay20_PS_20_out1 <= Delay19_PS_19_out1;
      END IF;
    END IF;
  END PROCESS Delay20_PS_20_process;


  R_mant_b_norm_out1_15 <= Delay22_PS_20_out1 + Delay20_PS_20_out1;

  Bit_Slice_out1_15 <= R_mant_b_norm_out1_15(54);

  Logical_Operator_out1_15 <=  NOT Bit_Slice_out1_15;

  Bit_Concat_out1_15 <= Delay21_PS_20_out1 & Logical_Operator_out1_15;

  Delay24_PS_21_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay24_PS_21_out1 <= to_unsigned(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay24_PS_21_out1 <= Bit_Concat_out1_15;
      END IF;
    END IF;
  END PROCESS Delay24_PS_21_process;


  
  if_tmp_0_1_out1_14 <= R_mant_b_norm_out1_15 WHEN Bit_Slice_out1_15 = '0' ELSE
      Delay22_PS_20_out1;

  bitsll_R_1_out1_15 <= if_tmp_0_1_out1_14 sll 1;

  Delay23_PS_21_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay23_PS_21_out1 <= to_signed(0, 55);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay23_PS_21_out1 <= bitsll_R_1_out1_15;
      END IF;
    END IF;
  END PROCESS Delay23_PS_21_process;


  Delay2_PS_21_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay2_PS_21_out1 <= to_signed(0, 55);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay2_PS_21_out1 <= Delay20_PS_20_out1;
      END IF;
    END IF;
  END PROCESS Delay2_PS_21_process;


  R_mant_b_norm_out1_16 <= Delay23_PS_21_out1 + Delay2_PS_21_out1;

  Bit_Slice_out1_16 <= R_mant_b_norm_out1_16(54);

  Logical_Operator_out1_16 <=  NOT Bit_Slice_out1_16;

  Bit_Concat_out1_16 <= Delay24_PS_21_out1 & Logical_Operator_out1_16;

  Delay16_PS_22_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay16_PS_22_out1 <= to_unsigned(16#00000#, 17);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay16_PS_22_out1 <= Bit_Concat_out1_16;
      END IF;
    END IF;
  END PROCESS Delay16_PS_22_process;


  
  if_tmp_0_1_out1_15 <= R_mant_b_norm_out1_16 WHEN Bit_Slice_out1_16 = '0' ELSE
      Delay23_PS_21_out1;

  bitsll_R_1_out1_16 <= if_tmp_0_1_out1_15 sll 1;

  Delay17_PS_22_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay17_PS_22_out1 <= to_signed(0, 55);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay17_PS_22_out1 <= bitsll_R_1_out1_16;
      END IF;
    END IF;
  END PROCESS Delay17_PS_22_process;


  Delay1_PS_22_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay1_PS_22_out1 <= to_signed(0, 55);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay1_PS_22_out1 <= Delay2_PS_21_out1;
      END IF;
    END IF;
  END PROCESS Delay1_PS_22_process;


  R_mant_b_norm_out1_17 <= Delay17_PS_22_out1 + Delay1_PS_22_out1;

  Bit_Slice_out1_17 <= R_mant_b_norm_out1_17(54);

  Logical_Operator_out1_17 <=  NOT Bit_Slice_out1_17;

  Bit_Concat_out1_17 <= Delay16_PS_22_out1 & Logical_Operator_out1_17;

  Delay7_PS_23_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay7_PS_23_out1 <= to_unsigned(16#00000#, 18);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay7_PS_23_out1 <= Bit_Concat_out1_17;
      END IF;
    END IF;
  END PROCESS Delay7_PS_23_process;


  
  if_tmp_0_1_out1_16 <= R_mant_b_norm_out1_17 WHEN Bit_Slice_out1_17 = '0' ELSE
      Delay17_PS_22_out1;

  bitsll_R_1_out1_17 <= if_tmp_0_1_out1_16 sll 1;

  Delay6_PS_23_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay6_PS_23_out1 <= to_signed(0, 55);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay6_PS_23_out1 <= bitsll_R_1_out1_17;
      END IF;
    END IF;
  END PROCESS Delay6_PS_23_process;


  Delay8_PS_23_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay8_PS_23_out1 <= to_signed(0, 55);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay8_PS_23_out1 <= Delay1_PS_22_out1;
      END IF;
    END IF;
  END PROCESS Delay8_PS_23_process;


  R_mant_b_norm_out1_18 <= Delay6_PS_23_out1 + Delay8_PS_23_out1;

  Bit_Slice_out1_18 <= R_mant_b_norm_out1_18(54);

  Logical_Operator_out1_18 <=  NOT Bit_Slice_out1_18;

  Bit_Concat_out1_18 <= Delay7_PS_23_out1 & Logical_Operator_out1_18;

  Delay25_PS_24_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay25_PS_24_out1 <= to_unsigned(16#00000#, 19);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay25_PS_24_out1 <= Bit_Concat_out1_18;
      END IF;
    END IF;
  END PROCESS Delay25_PS_24_process;


  
  if_tmp_0_1_out1_17 <= R_mant_b_norm_out1_18 WHEN Bit_Slice_out1_18 = '0' ELSE
      Delay6_PS_23_out1;

  bitsll_R_1_out1_18 <= if_tmp_0_1_out1_17 sll 1;

  Delay26_PS_24_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay26_PS_24_out1 <= to_signed(0, 55);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay26_PS_24_out1 <= bitsll_R_1_out1_18;
      END IF;
    END IF;
  END PROCESS Delay26_PS_24_process;


  Delay9_PS_24_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay9_PS_24_out1 <= to_signed(0, 55);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay9_PS_24_out1 <= Delay8_PS_23_out1;
      END IF;
    END IF;
  END PROCESS Delay9_PS_24_process;


  R_mant_b_norm_out1_19 <= Delay26_PS_24_out1 + Delay9_PS_24_out1;

  Bit_Slice_out1_19 <= R_mant_b_norm_out1_19(54);

  Logical_Operator_out1_19 <=  NOT Bit_Slice_out1_19;

  Bit_Concat_out1_19 <= Delay25_PS_24_out1 & Logical_Operator_out1_19;

  Delay28_PS_25_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay28_PS_25_out1 <= to_unsigned(16#00000#, 20);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay28_PS_25_out1 <= Bit_Concat_out1_19;
      END IF;
    END IF;
  END PROCESS Delay28_PS_25_process;


  
  if_tmp_0_1_out1_18 <= R_mant_b_norm_out1_19 WHEN Bit_Slice_out1_19 = '0' ELSE
      Delay26_PS_24_out1;

  bitsll_R_1_out1_19 <= if_tmp_0_1_out1_18 sll 1;

  Delay27_PS_25_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay27_PS_25_out1 <= to_signed(0, 55);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay27_PS_25_out1 <= bitsll_R_1_out1_19;
      END IF;
    END IF;
  END PROCESS Delay27_PS_25_process;


  Delay10_PS_25_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay10_PS_25_out1 <= to_signed(0, 55);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay10_PS_25_out1 <= Delay9_PS_24_out1;
      END IF;
    END IF;
  END PROCESS Delay10_PS_25_process;


  R_mant_b_norm_out1_20 <= Delay27_PS_25_out1 + Delay10_PS_25_out1;

  Bit_Slice_out1_20 <= R_mant_b_norm_out1_20(54);

  Logical_Operator_out1_20 <=  NOT Bit_Slice_out1_20;

  Bit_Concat_out1_20 <= Delay28_PS_25_out1 & Logical_Operator_out1_20;

  Delay3_PS_26_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay3_PS_26_out1 <= to_unsigned(16#000000#, 21);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay3_PS_26_out1 <= Bit_Concat_out1_20;
      END IF;
    END IF;
  END PROCESS Delay3_PS_26_process;


  
  if_tmp_0_1_out1_19 <= R_mant_b_norm_out1_20 WHEN Bit_Slice_out1_20 = '0' ELSE
      Delay27_PS_25_out1;

  bitsll_R_1_out1_20 <= if_tmp_0_1_out1_19 sll 1;

  Delay4_PS_26_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay4_PS_26_out1 <= to_signed(0, 55);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay4_PS_26_out1 <= bitsll_R_1_out1_20;
      END IF;
    END IF;
  END PROCESS Delay4_PS_26_process;


  Delay11_PS_26_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay11_PS_26_out1 <= to_signed(0, 55);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay11_PS_26_out1 <= Delay10_PS_25_out1;
      END IF;
    END IF;
  END PROCESS Delay11_PS_26_process;


  R_mant_b_norm_out1_21 <= Delay4_PS_26_out1 + Delay11_PS_26_out1;

  Bit_Slice_out1_21 <= R_mant_b_norm_out1_21(54);

  Logical_Operator_out1_21 <=  NOT Bit_Slice_out1_21;

  Bit_Concat_out1_21 <= Delay3_PS_26_out1 & Logical_Operator_out1_21;

  Delay18_PS_27_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay18_PS_27_out1 <= to_unsigned(16#000000#, 22);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay18_PS_27_out1 <= Bit_Concat_out1_21;
      END IF;
    END IF;
  END PROCESS Delay18_PS_27_process;


  
  if_tmp_0_1_out1_20 <= R_mant_b_norm_out1_21 WHEN Bit_Slice_out1_21 = '0' ELSE
      Delay4_PS_26_out1;

  bitsll_R_1_out1_21 <= if_tmp_0_1_out1_20 sll 1;

  Delay5_PS_27_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay5_PS_27_out1 <= to_signed(0, 55);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay5_PS_27_out1 <= bitsll_R_1_out1_21;
      END IF;
    END IF;
  END PROCESS Delay5_PS_27_process;


  Delay19_PS_27_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay19_PS_27_out1 <= to_signed(0, 55);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay19_PS_27_out1 <= Delay11_PS_26_out1;
      END IF;
    END IF;
  END PROCESS Delay19_PS_27_process;


  R_mant_b_norm_out1_22 <= Delay5_PS_27_out1 + Delay19_PS_27_out1;

  Bit_Slice_out1_22 <= R_mant_b_norm_out1_22(54);

  Logical_Operator_out1_22 <=  NOT Bit_Slice_out1_22;

  Bit_Concat_out1_22 <= Delay18_PS_27_out1 & Logical_Operator_out1_22;

  Delay21_PS_28_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay21_PS_28_out1 <= to_unsigned(16#000000#, 23);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay21_PS_28_out1 <= Bit_Concat_out1_22;
      END IF;
    END IF;
  END PROCESS Delay21_PS_28_process;


  
  if_tmp_0_1_out1_21 <= R_mant_b_norm_out1_22 WHEN Bit_Slice_out1_22 = '0' ELSE
      Delay5_PS_27_out1;

  bitsll_R_1_out1_22 <= if_tmp_0_1_out1_21 sll 1;

  Delay22_PS_28_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay22_PS_28_out1 <= to_signed(0, 55);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay22_PS_28_out1 <= bitsll_R_1_out1_22;
      END IF;
    END IF;
  END PROCESS Delay22_PS_28_process;


  Delay20_PS_28_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay20_PS_28_out1 <= to_signed(0, 55);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay20_PS_28_out1 <= Delay19_PS_27_out1;
      END IF;
    END IF;
  END PROCESS Delay20_PS_28_process;


  R_mant_b_norm_out1_23 <= Delay22_PS_28_out1 + Delay20_PS_28_out1;

  Bit_Slice_out1_23 <= R_mant_b_norm_out1_23(54);

  Logical_Operator_out1_23 <=  NOT Bit_Slice_out1_23;

  Bit_Concat_out1_23 <= Delay21_PS_28_out1 & Logical_Operator_out1_23;

  Delay24_PS_29_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay24_PS_29_out1 <= to_unsigned(16#000000#, 24);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay24_PS_29_out1 <= Bit_Concat_out1_23;
      END IF;
    END IF;
  END PROCESS Delay24_PS_29_process;


  
  if_tmp_0_1_out1_22 <= R_mant_b_norm_out1_23 WHEN Bit_Slice_out1_23 = '0' ELSE
      Delay22_PS_28_out1;

  bitsll_R_1_out1_23 <= if_tmp_0_1_out1_22 sll 1;

  Delay23_PS_29_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay23_PS_29_out1 <= to_signed(0, 55);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay23_PS_29_out1 <= bitsll_R_1_out1_23;
      END IF;
    END IF;
  END PROCESS Delay23_PS_29_process;


  Delay2_PS_29_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay2_PS_29_out1 <= to_signed(0, 55);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay2_PS_29_out1 <= Delay20_PS_28_out1;
      END IF;
    END IF;
  END PROCESS Delay2_PS_29_process;


  R_mant_b_norm_out1_24 <= Delay23_PS_29_out1 + Delay2_PS_29_out1;

  Bit_Slice_out1_24 <= R_mant_b_norm_out1_24(54);

  Logical_Operator_out1_24 <=  NOT Bit_Slice_out1_24;

  Bit_Concat_out1_24 <= Delay24_PS_29_out1 & Logical_Operator_out1_24;

  Delay16_PS_30_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay16_PS_30_out1 <= to_unsigned(16#0000000#, 25);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay16_PS_30_out1 <= Bit_Concat_out1_24;
      END IF;
    END IF;
  END PROCESS Delay16_PS_30_process;


  
  if_tmp_0_1_out1_23 <= R_mant_b_norm_out1_24 WHEN Bit_Slice_out1_24 = '0' ELSE
      Delay23_PS_29_out1;

  bitsll_R_1_out1_24 <= if_tmp_0_1_out1_23 sll 1;

  Delay17_PS_30_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay17_PS_30_out1 <= to_signed(0, 55);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay17_PS_30_out1 <= bitsll_R_1_out1_24;
      END IF;
    END IF;
  END PROCESS Delay17_PS_30_process;


  Delay1_PS_30_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay1_PS_30_out1 <= to_signed(0, 55);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay1_PS_30_out1 <= Delay2_PS_29_out1;
      END IF;
    END IF;
  END PROCESS Delay1_PS_30_process;


  R_mant_b_norm_out1_25 <= Delay17_PS_30_out1 + Delay1_PS_30_out1;

  Bit_Slice_out1_25 <= R_mant_b_norm_out1_25(54);

  Logical_Operator_out1_25 <=  NOT Bit_Slice_out1_25;

  Bit_Concat_out1_25 <= Delay16_PS_30_out1 & Logical_Operator_out1_25;

  Delay7_PS_31_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay7_PS_31_out1 <= to_unsigned(16#0000000#, 26);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay7_PS_31_out1 <= Bit_Concat_out1_25;
      END IF;
    END IF;
  END PROCESS Delay7_PS_31_process;


  
  if_tmp_0_1_out1_24 <= R_mant_b_norm_out1_25 WHEN Bit_Slice_out1_25 = '0' ELSE
      Delay17_PS_30_out1;

  bitsll_R_1_out1_25 <= if_tmp_0_1_out1_24 sll 1;

  Delay6_PS_31_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay6_PS_31_out1 <= to_signed(0, 55);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay6_PS_31_out1 <= bitsll_R_1_out1_25;
      END IF;
    END IF;
  END PROCESS Delay6_PS_31_process;


  Delay8_PS_31_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay8_PS_31_out1 <= to_signed(0, 55);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay8_PS_31_out1 <= Delay1_PS_30_out1;
      END IF;
    END IF;
  END PROCESS Delay8_PS_31_process;


  R_mant_b_norm_out1_26 <= Delay6_PS_31_out1 + Delay8_PS_31_out1;

  Bit_Slice_out1_26 <= R_mant_b_norm_out1_26(54);

  Logical_Operator_out1_26 <=  NOT Bit_Slice_out1_26;

  Bit_Concat_out1_26 <= Delay7_PS_31_out1 & Logical_Operator_out1_26;

  Delay25_PS_32_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay25_PS_32_out1 <= to_unsigned(16#0000000#, 27);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay25_PS_32_out1 <= Bit_Concat_out1_26;
      END IF;
    END IF;
  END PROCESS Delay25_PS_32_process;


  
  if_tmp_0_1_out1_25 <= R_mant_b_norm_out1_26 WHEN Bit_Slice_out1_26 = '0' ELSE
      Delay6_PS_31_out1;

  bitsll_R_1_out1_26 <= if_tmp_0_1_out1_25 sll 1;

  Delay26_PS_32_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay26_PS_32_out1 <= to_signed(0, 55);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay26_PS_32_out1 <= bitsll_R_1_out1_26;
      END IF;
    END IF;
  END PROCESS Delay26_PS_32_process;


  Delay9_PS_32_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay9_PS_32_out1 <= to_signed(0, 55);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay9_PS_32_out1 <= Delay8_PS_31_out1;
      END IF;
    END IF;
  END PROCESS Delay9_PS_32_process;


  R_mant_b_norm_out1_27 <= Delay26_PS_32_out1 + Delay9_PS_32_out1;

  Bit_Slice_out1_27 <= R_mant_b_norm_out1_27(54);

  Logical_Operator_out1_27 <=  NOT Bit_Slice_out1_27;

  Bit_Concat_out1_27 <= Delay25_PS_32_out1 & Logical_Operator_out1_27;

  Delay28_PS_33_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay28_PS_33_out1 <= to_unsigned(16#0000000#, 28);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay28_PS_33_out1 <= Bit_Concat_out1_27;
      END IF;
    END IF;
  END PROCESS Delay28_PS_33_process;


  
  if_tmp_0_1_out1_26 <= R_mant_b_norm_out1_27 WHEN Bit_Slice_out1_27 = '0' ELSE
      Delay26_PS_32_out1;

  bitsll_R_1_out1_27 <= if_tmp_0_1_out1_26 sll 1;

  Delay27_PS_33_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay27_PS_33_out1 <= to_signed(0, 55);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay27_PS_33_out1 <= bitsll_R_1_out1_27;
      END IF;
    END IF;
  END PROCESS Delay27_PS_33_process;


  Delay10_PS_33_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay10_PS_33_out1 <= to_signed(0, 55);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay10_PS_33_out1 <= Delay9_PS_32_out1;
      END IF;
    END IF;
  END PROCESS Delay10_PS_33_process;


  R_mant_b_norm_out1_28 <= Delay27_PS_33_out1 + Delay10_PS_33_out1;

  Bit_Slice_out1_28 <= R_mant_b_norm_out1_28(54);

  Logical_Operator_out1_28 <=  NOT Bit_Slice_out1_28;

  Bit_Concat_out1_28 <= Delay28_PS_33_out1 & Logical_Operator_out1_28;

  Delay3_PS_34_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay3_PS_34_out1 <= to_unsigned(16#00000000#, 29);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay3_PS_34_out1 <= Bit_Concat_out1_28;
      END IF;
    END IF;
  END PROCESS Delay3_PS_34_process;


  
  if_tmp_0_1_out1_27 <= R_mant_b_norm_out1_28 WHEN Bit_Slice_out1_28 = '0' ELSE
      Delay27_PS_33_out1;

  bitsll_R_1_out1_28 <= if_tmp_0_1_out1_27 sll 1;

  Delay4_PS_34_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay4_PS_34_out1 <= to_signed(0, 55);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay4_PS_34_out1 <= bitsll_R_1_out1_28;
      END IF;
    END IF;
  END PROCESS Delay4_PS_34_process;


  Delay11_PS_34_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay11_PS_34_out1 <= to_signed(0, 55);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay11_PS_34_out1 <= Delay10_PS_33_out1;
      END IF;
    END IF;
  END PROCESS Delay11_PS_34_process;


  R_mant_b_norm_out1_29 <= Delay4_PS_34_out1 + Delay11_PS_34_out1;

  Bit_Slice_out1_29 <= R_mant_b_norm_out1_29(54);

  Logical_Operator_out1_29 <=  NOT Bit_Slice_out1_29;

  Bit_Concat_out1_29 <= Delay3_PS_34_out1 & Logical_Operator_out1_29;

  Delay18_PS_35_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay18_PS_35_out1 <= to_unsigned(16#00000000#, 30);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay18_PS_35_out1 <= Bit_Concat_out1_29;
      END IF;
    END IF;
  END PROCESS Delay18_PS_35_process;


  
  if_tmp_0_1_out1_28 <= R_mant_b_norm_out1_29 WHEN Bit_Slice_out1_29 = '0' ELSE
      Delay4_PS_34_out1;

  bitsll_R_1_out1_29 <= if_tmp_0_1_out1_28 sll 1;

  Delay5_PS_35_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay5_PS_35_out1 <= to_signed(0, 55);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay5_PS_35_out1 <= bitsll_R_1_out1_29;
      END IF;
    END IF;
  END PROCESS Delay5_PS_35_process;


  Delay19_PS_35_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay19_PS_35_out1 <= to_signed(0, 55);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay19_PS_35_out1 <= Delay11_PS_34_out1;
      END IF;
    END IF;
  END PROCESS Delay19_PS_35_process;


  R_mant_b_norm_out1_30 <= Delay5_PS_35_out1 + Delay19_PS_35_out1;

  Bit_Slice_out1_30 <= R_mant_b_norm_out1_30(54);

  Logical_Operator_out1_30 <=  NOT Bit_Slice_out1_30;

  Bit_Concat_out1_30 <= Delay18_PS_35_out1 & Logical_Operator_out1_30;

  Delay21_PS_36_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay21_PS_36_out1 <= to_unsigned(16#00000000#, 31);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay21_PS_36_out1 <= Bit_Concat_out1_30;
      END IF;
    END IF;
  END PROCESS Delay21_PS_36_process;


  
  if_tmp_0_1_out1_29 <= R_mant_b_norm_out1_30 WHEN Bit_Slice_out1_30 = '0' ELSE
      Delay5_PS_35_out1;

  bitsll_R_1_out1_30 <= if_tmp_0_1_out1_29 sll 1;

  Delay22_PS_36_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay22_PS_36_out1 <= to_signed(0, 55);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay22_PS_36_out1 <= bitsll_R_1_out1_30;
      END IF;
    END IF;
  END PROCESS Delay22_PS_36_process;


  Delay20_PS_36_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay20_PS_36_out1 <= to_signed(0, 55);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay20_PS_36_out1 <= Delay19_PS_35_out1;
      END IF;
    END IF;
  END PROCESS Delay20_PS_36_process;


  R_mant_b_norm_out1_31 <= Delay22_PS_36_out1 + Delay20_PS_36_out1;

  Bit_Slice_out1_31 <= R_mant_b_norm_out1_31(54);

  Logical_Operator_out1_31 <=  NOT Bit_Slice_out1_31;

  Bit_Concat_out1_31 <= Delay21_PS_36_out1 & Logical_Operator_out1_31;

  Delay24_PS_37_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay24_PS_37_out1 <= to_unsigned(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay24_PS_37_out1 <= Bit_Concat_out1_31;
      END IF;
    END IF;
  END PROCESS Delay24_PS_37_process;


  
  if_tmp_0_1_out1_30 <= R_mant_b_norm_out1_31 WHEN Bit_Slice_out1_31 = '0' ELSE
      Delay22_PS_36_out1;

  bitsll_R_1_out1_31 <= if_tmp_0_1_out1_30 sll 1;

  Delay23_PS_37_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay23_PS_37_out1 <= to_signed(0, 55);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay23_PS_37_out1 <= bitsll_R_1_out1_31;
      END IF;
    END IF;
  END PROCESS Delay23_PS_37_process;


  Delay2_PS_37_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay2_PS_37_out1 <= to_signed(0, 55);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay2_PS_37_out1 <= Delay20_PS_36_out1;
      END IF;
    END IF;
  END PROCESS Delay2_PS_37_process;


  R_mant_b_norm_out1_32 <= Delay23_PS_37_out1 + Delay2_PS_37_out1;

  Bit_Slice_out1_32 <= R_mant_b_norm_out1_32(54);

  Logical_Operator_out1_32 <=  NOT Bit_Slice_out1_32;

  Bit_Concat_out1_32 <= Delay24_PS_37_out1 & Logical_Operator_out1_32;

  Delay16_PS_38_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay16_PS_38_out1 <= to_unsigned(0, 33);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay16_PS_38_out1 <= Bit_Concat_out1_32;
      END IF;
    END IF;
  END PROCESS Delay16_PS_38_process;


  
  if_tmp_0_1_out1_31 <= R_mant_b_norm_out1_32 WHEN Bit_Slice_out1_32 = '0' ELSE
      Delay23_PS_37_out1;

  bitsll_R_1_out1_32 <= if_tmp_0_1_out1_31 sll 1;

  Delay17_PS_38_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay17_PS_38_out1 <= to_signed(0, 55);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay17_PS_38_out1 <= bitsll_R_1_out1_32;
      END IF;
    END IF;
  END PROCESS Delay17_PS_38_process;


  Delay1_PS_38_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay1_PS_38_out1 <= to_signed(0, 55);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay1_PS_38_out1 <= Delay2_PS_37_out1;
      END IF;
    END IF;
  END PROCESS Delay1_PS_38_process;


  R_mant_b_norm_out1_33 <= Delay17_PS_38_out1 + Delay1_PS_38_out1;

  Bit_Slice_out1_33 <= R_mant_b_norm_out1_33(54);

  Logical_Operator_out1_33 <=  NOT Bit_Slice_out1_33;

  Bit_Concat_out1_33 <= Delay16_PS_38_out1 & Logical_Operator_out1_33;

  Delay7_PS_39_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay7_PS_39_out1 <= to_unsigned(0, 34);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay7_PS_39_out1 <= Bit_Concat_out1_33;
      END IF;
    END IF;
  END PROCESS Delay7_PS_39_process;


  
  if_tmp_0_1_out1_32 <= R_mant_b_norm_out1_33 WHEN Bit_Slice_out1_33 = '0' ELSE
      Delay17_PS_38_out1;

  bitsll_R_1_out1_33 <= if_tmp_0_1_out1_32 sll 1;

  Delay6_PS_39_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay6_PS_39_out1 <= to_signed(0, 55);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay6_PS_39_out1 <= bitsll_R_1_out1_33;
      END IF;
    END IF;
  END PROCESS Delay6_PS_39_process;


  Delay8_PS_39_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay8_PS_39_out1 <= to_signed(0, 55);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay8_PS_39_out1 <= Delay1_PS_38_out1;
      END IF;
    END IF;
  END PROCESS Delay8_PS_39_process;


  R_mant_b_norm_out1_34 <= Delay6_PS_39_out1 + Delay8_PS_39_out1;

  Bit_Slice_out1_34 <= R_mant_b_norm_out1_34(54);

  Logical_Operator_out1_34 <=  NOT Bit_Slice_out1_34;

  Bit_Concat_out1_34 <= Delay7_PS_39_out1 & Logical_Operator_out1_34;

  Delay25_PS_40_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay25_PS_40_out1 <= to_unsigned(0, 35);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay25_PS_40_out1 <= Bit_Concat_out1_34;
      END IF;
    END IF;
  END PROCESS Delay25_PS_40_process;


  
  if_tmp_0_1_out1_33 <= R_mant_b_norm_out1_34 WHEN Bit_Slice_out1_34 = '0' ELSE
      Delay6_PS_39_out1;

  bitsll_R_1_out1_34 <= if_tmp_0_1_out1_33 sll 1;

  Delay26_PS_40_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay26_PS_40_out1 <= to_signed(0, 55);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay26_PS_40_out1 <= bitsll_R_1_out1_34;
      END IF;
    END IF;
  END PROCESS Delay26_PS_40_process;


  Delay9_PS_40_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay9_PS_40_out1 <= to_signed(0, 55);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay9_PS_40_out1 <= Delay8_PS_39_out1;
      END IF;
    END IF;
  END PROCESS Delay9_PS_40_process;


  R_mant_b_norm_out1_35 <= Delay26_PS_40_out1 + Delay9_PS_40_out1;

  Bit_Slice_out1_35 <= R_mant_b_norm_out1_35(54);

  Logical_Operator_out1_35 <=  NOT Bit_Slice_out1_35;

  Bit_Concat_out1_35 <= Delay25_PS_40_out1 & Logical_Operator_out1_35;

  Delay28_PS_41_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay28_PS_41_out1 <= to_unsigned(0, 36);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay28_PS_41_out1 <= Bit_Concat_out1_35;
      END IF;
    END IF;
  END PROCESS Delay28_PS_41_process;


  
  if_tmp_0_1_out1_34 <= R_mant_b_norm_out1_35 WHEN Bit_Slice_out1_35 = '0' ELSE
      Delay26_PS_40_out1;

  bitsll_R_1_out1_35 <= if_tmp_0_1_out1_34 sll 1;

  Delay27_PS_41_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay27_PS_41_out1 <= to_signed(0, 55);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay27_PS_41_out1 <= bitsll_R_1_out1_35;
      END IF;
    END IF;
  END PROCESS Delay27_PS_41_process;


  Delay10_PS_41_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay10_PS_41_out1 <= to_signed(0, 55);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay10_PS_41_out1 <= Delay9_PS_40_out1;
      END IF;
    END IF;
  END PROCESS Delay10_PS_41_process;


  R_mant_b_norm_out1_36 <= Delay27_PS_41_out1 + Delay10_PS_41_out1;

  Bit_Slice_out1_36 <= R_mant_b_norm_out1_36(54);

  Logical_Operator_out1_36 <=  NOT Bit_Slice_out1_36;

  Bit_Concat_out1_36 <= Delay28_PS_41_out1 & Logical_Operator_out1_36;

  Delay3_PS_42_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay3_PS_42_out1 <= to_unsigned(0, 37);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay3_PS_42_out1 <= Bit_Concat_out1_36;
      END IF;
    END IF;
  END PROCESS Delay3_PS_42_process;


  
  if_tmp_0_1_out1_35 <= R_mant_b_norm_out1_36 WHEN Bit_Slice_out1_36 = '0' ELSE
      Delay27_PS_41_out1;

  bitsll_R_1_out1_36 <= if_tmp_0_1_out1_35 sll 1;

  Delay4_PS_42_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay4_PS_42_out1 <= to_signed(0, 55);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay4_PS_42_out1 <= bitsll_R_1_out1_36;
      END IF;
    END IF;
  END PROCESS Delay4_PS_42_process;


  Delay11_PS_42_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay11_PS_42_out1 <= to_signed(0, 55);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay11_PS_42_out1 <= Delay10_PS_41_out1;
      END IF;
    END IF;
  END PROCESS Delay11_PS_42_process;


  R_mant_b_norm_out1_37 <= Delay4_PS_42_out1 + Delay11_PS_42_out1;

  Bit_Slice_out1_37 <= R_mant_b_norm_out1_37(54);

  Logical_Operator_out1_37 <=  NOT Bit_Slice_out1_37;

  Bit_Concat_out1_37 <= Delay3_PS_42_out1 & Logical_Operator_out1_37;

  Delay18_PS_43_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay18_PS_43_out1 <= to_unsigned(0, 38);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay18_PS_43_out1 <= Bit_Concat_out1_37;
      END IF;
    END IF;
  END PROCESS Delay18_PS_43_process;


  
  if_tmp_0_1_out1_36 <= R_mant_b_norm_out1_37 WHEN Bit_Slice_out1_37 = '0' ELSE
      Delay4_PS_42_out1;

  bitsll_R_1_out1_37 <= if_tmp_0_1_out1_36 sll 1;

  Delay5_PS_43_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay5_PS_43_out1 <= to_signed(0, 55);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay5_PS_43_out1 <= bitsll_R_1_out1_37;
      END IF;
    END IF;
  END PROCESS Delay5_PS_43_process;


  Delay_PS_43_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay_PS_43_out1 <= to_signed(0, 55);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay_PS_43_out1 <= Delay11_PS_42_out1;
      END IF;
    END IF;
  END PROCESS Delay_PS_43_process;


  R_mant_b_norm_out1_38 <= Delay5_PS_43_out1 + Delay_PS_43_out1;

  Bit_Slice_out1_38 <= R_mant_b_norm_out1_38(54);

  Logical_Operator_out1_38 <=  NOT Bit_Slice_out1_38;

  Bit_Concat_out1_38 <= Delay18_PS_43_out1 & Logical_Operator_out1_38;

  Delay21_PS_44_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay21_PS_44_out1 <= to_unsigned(0, 39);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay21_PS_44_out1 <= Bit_Concat_out1_38;
      END IF;
    END IF;
  END PROCESS Delay21_PS_44_process;


  
  if_tmp_0_1_out1_37 <= R_mant_b_norm_out1_38 WHEN Bit_Slice_out1_38 = '0' ELSE
      Delay5_PS_43_out1;

  bitsll_R_1_out1_38 <= if_tmp_0_1_out1_37 sll 1;

  Delay22_PS_44_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay22_PS_44_out1 <= to_signed(0, 55);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay22_PS_44_out1 <= bitsll_R_1_out1_38;
      END IF;
    END IF;
  END PROCESS Delay22_PS_44_process;


  Delay20_PS_44_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay20_PS_44_out1 <= to_signed(0, 55);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay20_PS_44_out1 <= Delay_PS_43_out1;
      END IF;
    END IF;
  END PROCESS Delay20_PS_44_process;


  R_mant_b_norm_out1_39 <= Delay22_PS_44_out1 + Delay20_PS_44_out1;

  Bit_Slice_out1_39 <= R_mant_b_norm_out1_39(54);

  Logical_Operator_out1_39 <=  NOT Bit_Slice_out1_39;

  Bit_Concat_out1_39 <= Delay21_PS_44_out1 & Logical_Operator_out1_39;

  Delay24_PS_45_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay24_PS_45_out1 <= to_unsigned(0, 40);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay24_PS_45_out1 <= Bit_Concat_out1_39;
      END IF;
    END IF;
  END PROCESS Delay24_PS_45_process;


  
  if_tmp_0_1_out1_38 <= R_mant_b_norm_out1_39 WHEN Bit_Slice_out1_39 = '0' ELSE
      Delay22_PS_44_out1;

  bitsll_R_1_out1_39 <= if_tmp_0_1_out1_38 sll 1;

  Delay23_PS_45_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay23_PS_45_out1 <= to_signed(0, 55);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay23_PS_45_out1 <= bitsll_R_1_out1_39;
      END IF;
    END IF;
  END PROCESS Delay23_PS_45_process;


  Delay2_PS_45_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay2_PS_45_out1 <= to_signed(0, 55);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay2_PS_45_out1 <= Delay20_PS_44_out1;
      END IF;
    END IF;
  END PROCESS Delay2_PS_45_process;


  R_mant_b_norm_out1_40 <= Delay23_PS_45_out1 + Delay2_PS_45_out1;

  Bit_Slice_out1_40 <= R_mant_b_norm_out1_40(54);

  Logical_Operator_out1_40 <=  NOT Bit_Slice_out1_40;

  Bit_Concat_out1_40 <= Delay24_PS_45_out1 & Logical_Operator_out1_40;

  Delay16_PS_46_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay16_PS_46_out1 <= to_unsigned(0, 41);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay16_PS_46_out1 <= Bit_Concat_out1_40;
      END IF;
    END IF;
  END PROCESS Delay16_PS_46_process;


  
  if_tmp_0_1_out1_39 <= R_mant_b_norm_out1_40 WHEN Bit_Slice_out1_40 = '0' ELSE
      Delay23_PS_45_out1;

  bitsll_R_1_out1_40 <= if_tmp_0_1_out1_39 sll 1;

  Delay17_PS_46_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay17_PS_46_out1 <= to_signed(0, 55);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay17_PS_46_out1 <= bitsll_R_1_out1_40;
      END IF;
    END IF;
  END PROCESS Delay17_PS_46_process;


  Delay1_PS_46_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay1_PS_46_out1 <= to_signed(0, 55);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay1_PS_46_out1 <= Delay2_PS_45_out1;
      END IF;
    END IF;
  END PROCESS Delay1_PS_46_process;


  R_mant_b_norm_out1_41 <= Delay17_PS_46_out1 + Delay1_PS_46_out1;

  Bit_Slice_out1_41 <= R_mant_b_norm_out1_41(54);

  Logical_Operator_out1_41 <=  NOT Bit_Slice_out1_41;

  Bit_Concat_out1_41 <= Delay16_PS_46_out1 & Logical_Operator_out1_41;

  Delay7_PS_47_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay7_PS_47_out1 <= to_unsigned(0, 42);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay7_PS_47_out1 <= Bit_Concat_out1_41;
      END IF;
    END IF;
  END PROCESS Delay7_PS_47_process;


  
  if_tmp_0_1_out1_40 <= R_mant_b_norm_out1_41 WHEN Bit_Slice_out1_41 = '0' ELSE
      Delay17_PS_46_out1;

  bitsll_R_1_out1_41 <= if_tmp_0_1_out1_40 sll 1;

  Delay6_PS_47_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay6_PS_47_out1 <= to_signed(0, 55);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay6_PS_47_out1 <= bitsll_R_1_out1_41;
      END IF;
    END IF;
  END PROCESS Delay6_PS_47_process;


  Delay8_PS_47_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay8_PS_47_out1 <= to_signed(0, 55);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay8_PS_47_out1 <= Delay1_PS_46_out1;
      END IF;
    END IF;
  END PROCESS Delay8_PS_47_process;


  R_mant_b_norm_out1_42 <= Delay6_PS_47_out1 + Delay8_PS_47_out1;

  Bit_Slice_out1_42 <= R_mant_b_norm_out1_42(54);

  Logical_Operator_out1_42 <=  NOT Bit_Slice_out1_42;

  Bit_Concat_out1_42 <= Delay7_PS_47_out1 & Logical_Operator_out1_42;

  Delay25_PS_48_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay25_PS_48_out1 <= to_unsigned(0, 43);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay25_PS_48_out1 <= Bit_Concat_out1_42;
      END IF;
    END IF;
  END PROCESS Delay25_PS_48_process;


  
  if_tmp_0_1_out1_41 <= R_mant_b_norm_out1_42 WHEN Bit_Slice_out1_42 = '0' ELSE
      Delay6_PS_47_out1;

  bitsll_R_1_out1_42 <= if_tmp_0_1_out1_41 sll 1;

  Delay26_PS_48_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay26_PS_48_out1 <= to_signed(0, 55);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay26_PS_48_out1 <= bitsll_R_1_out1_42;
      END IF;
    END IF;
  END PROCESS Delay26_PS_48_process;


  Delay9_PS_48_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay9_PS_48_out1 <= to_signed(0, 55);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay9_PS_48_out1 <= Delay8_PS_47_out1;
      END IF;
    END IF;
  END PROCESS Delay9_PS_48_process;


  R_mant_b_norm_out1_43 <= Delay26_PS_48_out1 + Delay9_PS_48_out1;

  Bit_Slice_out1_43 <= R_mant_b_norm_out1_43(54);

  Logical_Operator_out1_43 <=  NOT Bit_Slice_out1_43;

  Bit_Concat_out1_43 <= Delay25_PS_48_out1 & Logical_Operator_out1_43;

  Delay28_PS_49_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay28_PS_49_out1 <= to_unsigned(0, 44);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay28_PS_49_out1 <= Bit_Concat_out1_43;
      END IF;
    END IF;
  END PROCESS Delay28_PS_49_process;


  
  if_tmp_0_1_out1_42 <= R_mant_b_norm_out1_43 WHEN Bit_Slice_out1_43 = '0' ELSE
      Delay26_PS_48_out1;

  bitsll_R_1_out1_43 <= if_tmp_0_1_out1_42 sll 1;

  Delay27_PS_49_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay27_PS_49_out1 <= to_signed(0, 55);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay27_PS_49_out1 <= bitsll_R_1_out1_43;
      END IF;
    END IF;
  END PROCESS Delay27_PS_49_process;


  Delay10_PS_49_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay10_PS_49_out1 <= to_signed(0, 55);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay10_PS_49_out1 <= Delay9_PS_48_out1;
      END IF;
    END IF;
  END PROCESS Delay10_PS_49_process;


  R_mant_b_norm_out1_44 <= Delay27_PS_49_out1 + Delay10_PS_49_out1;

  Bit_Slice_out1_44 <= R_mant_b_norm_out1_44(54);

  Logical_Operator_out1_44 <=  NOT Bit_Slice_out1_44;

  Bit_Concat_out1_44 <= Delay28_PS_49_out1 & Logical_Operator_out1_44;

  Delay3_PS_50_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay3_PS_50_out1 <= to_unsigned(0, 45);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay3_PS_50_out1 <= Bit_Concat_out1_44;
      END IF;
    END IF;
  END PROCESS Delay3_PS_50_process;


  
  if_tmp_0_1_out1_43 <= R_mant_b_norm_out1_44 WHEN Bit_Slice_out1_44 = '0' ELSE
      Delay27_PS_49_out1;

  bitsll_R_1_out1_44 <= if_tmp_0_1_out1_43 sll 1;

  Delay4_PS_50_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay4_PS_50_out1 <= to_signed(0, 55);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay4_PS_50_out1 <= bitsll_R_1_out1_44;
      END IF;
    END IF;
  END PROCESS Delay4_PS_50_process;


  Delay11_PS_50_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay11_PS_50_out1 <= to_signed(0, 55);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay11_PS_50_out1 <= Delay10_PS_49_out1;
      END IF;
    END IF;
  END PROCESS Delay11_PS_50_process;


  R_mant_b_norm_out1_45 <= Delay4_PS_50_out1 + Delay11_PS_50_out1;

  Bit_Slice_out1_45 <= R_mant_b_norm_out1_45(54);

  Logical_Operator_out1_45 <=  NOT Bit_Slice_out1_45;

  Bit_Concat_out1_45 <= Delay3_PS_50_out1 & Logical_Operator_out1_45;

  Delay18_PS_51_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay18_PS_51_out1 <= to_unsigned(0, 46);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay18_PS_51_out1 <= Bit_Concat_out1_45;
      END IF;
    END IF;
  END PROCESS Delay18_PS_51_process;


  
  if_tmp_0_1_out1_44 <= R_mant_b_norm_out1_45 WHEN Bit_Slice_out1_45 = '0' ELSE
      Delay4_PS_50_out1;

  bitsll_R_1_out1_45 <= if_tmp_0_1_out1_44 sll 1;

  Delay5_PS_51_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay5_PS_51_out1 <= to_signed(0, 55);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay5_PS_51_out1 <= bitsll_R_1_out1_45;
      END IF;
    END IF;
  END PROCESS Delay5_PS_51_process;


  Delay19_PS_51_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay19_PS_51_out1 <= to_signed(0, 55);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay19_PS_51_out1 <= Delay11_PS_50_out1;
      END IF;
    END IF;
  END PROCESS Delay19_PS_51_process;


  R_mant_b_norm_out1_46 <= Delay5_PS_51_out1 + Delay19_PS_51_out1;

  Bit_Slice_out1_46 <= R_mant_b_norm_out1_46(54);

  Logical_Operator_out1_46 <=  NOT Bit_Slice_out1_46;

  Bit_Concat_out1_46 <= Delay18_PS_51_out1 & Logical_Operator_out1_46;

  Delay21_PS_52_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay21_PS_52_out1 <= to_unsigned(0, 47);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay21_PS_52_out1 <= Bit_Concat_out1_46;
      END IF;
    END IF;
  END PROCESS Delay21_PS_52_process;


  
  if_tmp_0_1_out1_45 <= R_mant_b_norm_out1_46 WHEN Bit_Slice_out1_46 = '0' ELSE
      Delay5_PS_51_out1;

  bitsll_R_1_out1_46 <= if_tmp_0_1_out1_45 sll 1;

  Delay22_PS_52_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay22_PS_52_out1 <= to_signed(0, 55);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay22_PS_52_out1 <= bitsll_R_1_out1_46;
      END IF;
    END IF;
  END PROCESS Delay22_PS_52_process;


  Delay20_PS_52_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay20_PS_52_out1 <= to_signed(0, 55);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay20_PS_52_out1 <= Delay19_PS_51_out1;
      END IF;
    END IF;
  END PROCESS Delay20_PS_52_process;


  R_mant_b_norm_out1_47 <= Delay22_PS_52_out1 + Delay20_PS_52_out1;

  Bit_Slice_out1_47 <= R_mant_b_norm_out1_47(54);

  Logical_Operator_out1_47 <=  NOT Bit_Slice_out1_47;

  Bit_Concat_out1_47 <= Delay21_PS_52_out1 & Logical_Operator_out1_47;

  Delay24_PS_53_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay24_PS_53_out1 <= to_unsigned(0, 48);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay24_PS_53_out1 <= Bit_Concat_out1_47;
      END IF;
    END IF;
  END PROCESS Delay24_PS_53_process;


  
  if_tmp_0_1_out1_46 <= R_mant_b_norm_out1_47 WHEN Bit_Slice_out1_47 = '0' ELSE
      Delay22_PS_52_out1;

  bitsll_R_1_out1_47 <= if_tmp_0_1_out1_46 sll 1;

  Delay23_PS_53_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay23_PS_53_out1 <= to_signed(0, 55);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay23_PS_53_out1 <= bitsll_R_1_out1_47;
      END IF;
    END IF;
  END PROCESS Delay23_PS_53_process;


  Delay2_PS_53_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay2_PS_53_out1 <= to_signed(0, 55);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay2_PS_53_out1 <= Delay20_PS_52_out1;
      END IF;
    END IF;
  END PROCESS Delay2_PS_53_process;


  R_mant_b_norm_out1_48 <= Delay23_PS_53_out1 + Delay2_PS_53_out1;

  Bit_Slice_out1_48 <= R_mant_b_norm_out1_48(54);

  Logical_Operator_out1_48 <=  NOT Bit_Slice_out1_48;

  Bit_Concat_out1_48 <= Delay24_PS_53_out1 & Logical_Operator_out1_48;

  Delay16_PS_54_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay16_PS_54_out1 <= to_unsigned(0, 49);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay16_PS_54_out1 <= Bit_Concat_out1_48;
      END IF;
    END IF;
  END PROCESS Delay16_PS_54_process;


  
  if_tmp_0_1_out1_47 <= R_mant_b_norm_out1_48 WHEN Bit_Slice_out1_48 = '0' ELSE
      Delay23_PS_53_out1;

  bitsll_R_1_out1_48 <= if_tmp_0_1_out1_47 sll 1;

  Delay17_PS_54_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay17_PS_54_out1 <= to_signed(0, 55);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay17_PS_54_out1 <= bitsll_R_1_out1_48;
      END IF;
    END IF;
  END PROCESS Delay17_PS_54_process;


  Delay1_PS_54_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay1_PS_54_out1 <= to_signed(0, 55);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay1_PS_54_out1 <= Delay2_PS_53_out1;
      END IF;
    END IF;
  END PROCESS Delay1_PS_54_process;


  R_mant_b_norm_out1_49 <= Delay17_PS_54_out1 + Delay1_PS_54_out1;

  Bit_Slice_out1_49 <= R_mant_b_norm_out1_49(54);

  Logical_Operator_out1_49 <=  NOT Bit_Slice_out1_49;

  Bit_Concat_out1_49 <= Delay16_PS_54_out1 & Logical_Operator_out1_49;

  Delay7_PS_55_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay7_PS_55_out1 <= to_unsigned(0, 50);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay7_PS_55_out1 <= Bit_Concat_out1_49;
      END IF;
    END IF;
  END PROCESS Delay7_PS_55_process;


  
  if_tmp_0_1_out1_48 <= R_mant_b_norm_out1_49 WHEN Bit_Slice_out1_49 = '0' ELSE
      Delay17_PS_54_out1;

  bitsll_R_1_out1_49 <= if_tmp_0_1_out1_48 sll 1;

  Delay6_PS_55_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay6_PS_55_out1 <= to_signed(0, 55);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay6_PS_55_out1 <= bitsll_R_1_out1_49;
      END IF;
    END IF;
  END PROCESS Delay6_PS_55_process;


  Delay8_PS_55_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay8_PS_55_out1 <= to_signed(0, 55);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay8_PS_55_out1 <= Delay1_PS_54_out1;
      END IF;
    END IF;
  END PROCESS Delay8_PS_55_process;


  R_mant_b_norm_out1_50 <= Delay6_PS_55_out1 + Delay8_PS_55_out1;

  Bit_Slice_out1_50 <= R_mant_b_norm_out1_50(54);

  Logical_Operator_out1_50 <=  NOT Bit_Slice_out1_50;

  Bit_Concat_out1_50 <= Delay7_PS_55_out1 & Logical_Operator_out1_50;

  Delay25_PS_56_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay25_PS_56_out1 <= to_unsigned(0, 51);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay25_PS_56_out1 <= Bit_Concat_out1_50;
      END IF;
    END IF;
  END PROCESS Delay25_PS_56_process;


  
  if_tmp_0_1_out1_49 <= R_mant_b_norm_out1_50 WHEN Bit_Slice_out1_50 = '0' ELSE
      Delay6_PS_55_out1;

  bitsll_R_1_out1_50 <= if_tmp_0_1_out1_49 sll 1;

  Delay26_PS_56_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay26_PS_56_out1 <= to_signed(0, 55);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay26_PS_56_out1 <= bitsll_R_1_out1_50;
      END IF;
    END IF;
  END PROCESS Delay26_PS_56_process;


  Delay9_PS_56_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay9_PS_56_out1 <= to_signed(0, 55);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay9_PS_56_out1 <= Delay8_PS_55_out1;
      END IF;
    END IF;
  END PROCESS Delay9_PS_56_process;


  R_mant_b_norm_out1_51 <= Delay26_PS_56_out1 + Delay9_PS_56_out1;

  Bit_Slice_out1_51 <= R_mant_b_norm_out1_51(54);

  Logical_Operator_out1_51 <=  NOT Bit_Slice_out1_51;

  Bit_Concat_out1_51 <= Delay25_PS_56_out1 & Logical_Operator_out1_51;

  Delay28_PS_57_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay28_PS_57_out1 <= to_unsigned(0, 52);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay28_PS_57_out1 <= Bit_Concat_out1_51;
      END IF;
    END IF;
  END PROCESS Delay28_PS_57_process;


  
  if_tmp_0_1_out1_50 <= R_mant_b_norm_out1_51 WHEN Bit_Slice_out1_51 = '0' ELSE
      Delay26_PS_56_out1;

  bitsll_R_1_out1_51 <= if_tmp_0_1_out1_50 sll 1;

  Delay27_PS_57_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay27_PS_57_out1 <= to_signed(0, 55);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay27_PS_57_out1 <= bitsll_R_1_out1_51;
      END IF;
    END IF;
  END PROCESS Delay27_PS_57_process;


  Delay10_PS_57_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay10_PS_57_out1 <= to_signed(0, 55);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay10_PS_57_out1 <= Delay9_PS_56_out1;
      END IF;
    END IF;
  END PROCESS Delay10_PS_57_process;


  R_mant_b_norm_out1_52 <= Delay27_PS_57_out1 + Delay10_PS_57_out1;

  Bit_Slice_out1_52 <= R_mant_b_norm_out1_52(54);

  Logical_Operator_out1_52 <=  NOT Bit_Slice_out1_52;

  Bit_Concat_out1_52 <= Delay28_PS_57_out1 & Logical_Operator_out1_52;

  Delay3_PS_58_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay3_PS_58_out1 <= to_unsigned(0, 53);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay3_PS_58_out1 <= Bit_Concat_out1_52;
      END IF;
    END IF;
  END PROCESS Delay3_PS_58_process;


  
  if_tmp_0_1_out1_51 <= R_mant_b_norm_out1_52 WHEN Bit_Slice_out1_52 = '0' ELSE
      Delay27_PS_57_out1;

  bitsll_R_1_out1_52 <= if_tmp_0_1_out1_51 sll 1;

  Delay4_PS_58_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay4_PS_58_out1 <= to_signed(0, 55);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay4_PS_58_out1 <= bitsll_R_1_out1_52;
      END IF;
    END IF;
  END PROCESS Delay4_PS_58_process;


  Delay11_PS_58_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay11_PS_58_out1 <= to_signed(0, 55);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay11_PS_58_out1 <= Delay10_PS_57_out1;
      END IF;
    END IF;
  END PROCESS Delay11_PS_58_process;


  R_mant_b_norm_out1_53 <= Delay4_PS_58_out1 + Delay11_PS_58_out1;

  Bit_Slice_out1_53 <= R_mant_b_norm_out1_53(54);

  Logical_Operator_out1_53 <=  NOT Bit_Slice_out1_53;

  Bit_Concat_out1_53 <= Delay3_PS_58_out1 & Logical_Operator_out1_53;

  Delay6_PS_59_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay6_PS_59_out1 <= to_unsigned(0, 54);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay6_PS_59_out1 <= Bit_Concat_out1_53;
      END IF;
    END IF;
  END PROCESS Delay6_PS_59_process;


  C_out1_4 <= to_unsigned(0, 54);

  
  if_shift_length_1_out1 <= Delay6_PS_59_out1 WHEN shift_length_1_out1_1 = '0' ELSE
      C_out1_4;

  bitsrl_Q_1_out1 <= Delay6_PS_59_out1 srl 1;

  
  if_shift_length_1_out1_1 <= if_shift_length_1_out1 WHEN shift_length_1_out1 = '0' ELSE
      bitsrl_Q_1_out1;

  BitSlice_out1 <= if_shift_length_1_out1_1(52 DOWNTO 0);

  Delay9_PS_60_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay9_PS_60_out1 <= to_unsigned(0, 53);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay9_PS_60_out1 <= BitSlice_out1;
      END IF;
    END IF;
  END PROCESS Delay9_PS_60_process;


  BitSlice1_out1 <= Delay9_PS_60_out1(1);

  
  if_tmp_0_1_out1_52 <= R_mant_b_norm_out1_53 WHEN Bit_Slice_out1_53 = '0' ELSE
      Delay4_PS_58_out1;

  bitsll_R_1_out1_53 <= if_tmp_0_1_out1_52 sll 1;

  Bit_Slice33_out1 <= Delay6_PS_59_out1(53 DOWNTO 52);

  
  Bit_Slice33_out1_is_not0 <= '1' WHEN Bit_Slice33_out1 /= to_unsigned(16#0#, 2) ELSE
      '0';

  
  Bit_Slice33_out1_is_not0_1 <= '1' WHEN Bit_Slice33_out1 /= to_unsigned(16#0#, 2) ELSE
      '0';

  Logical_Operator11_out1 <= Bit_Slice33_out1_is_not0 OR Bit_Slice33_out1_is_not0_1;

  Bit_Slice1_out1_1 <= Delay11_PS_7_59_out1(2);

  Logical_Operator2_out1 <= Logical_Operator11_out1 AND Bit_Slice1_out1_1;

  Logical_Operator1_out1 <= Logical_Operator2_out1 OR Logical_Operator11_out1;

  Bit_Slice3_out1 <= Delay11_PS_7_59_out1(3);

  Bit_Slice5_out1 <= Delay11_PS_7_59_out1(0);

  Logical_Operator2_out1_1 <= Logical_Operator11_out1 AND Bit_Slice5_out1;

  Bit_Slice1_out1_2 <= Bit_Slice33_out1(1);

  Logical_Operator1_out1_1 <= Logical_Operator2_out1_1 OR Bit_Slice1_out1_2;

  Bit_Slice2_out1 <= Delay11_PS_7_59_out1(1);

  Bit_Slice_out1_54 <= Bit_Slice33_out1(0);

  Logical_Operator7_out1 <= Bit_Slice5_out1 OR Bit_Slice2_out1;

  Logical_Operator3_out1 <= Bit_Slice_out1_54 AND Logical_Operator7_out1;

  Bit_Slice32_out1 <= Delay6_PS_59_out1(51 DOWNTO 48);

  Bit_Reduce12_out1 <= (Bit_Slice32_out1(3) OR Bit_Slice32_out1(2) OR Bit_Slice32_out1(1) OR Bit_Slice32_out1(0));

  Bit_Slice30_out1 <= Delay6_PS_59_out1(47 DOWNTO 44);

  Bit_Reduce11_out1 <= (Bit_Slice30_out1(3) OR Bit_Slice30_out1(2) OR Bit_Slice30_out1(1) OR Bit_Slice30_out1(0));

  Bit_Slice24_out1 <= Delay6_PS_59_out1(43 DOWNTO 40);

  Bit_Reduce10_out1 <= (Bit_Slice24_out1(3) OR Bit_Slice24_out1(2) OR Bit_Slice24_out1(1) OR Bit_Slice24_out1(0));

  Bit_Slice28_out1 <= Delay6_PS_59_out1(39 DOWNTO 36);

  Bit_Reduce9_out1 <= (Bit_Slice28_out1(3) OR Bit_Slice28_out1(2) OR Bit_Slice28_out1(1) OR Bit_Slice28_out1(0));

  Bit_Slice22_out1 <= Delay6_PS_59_out1(35 DOWNTO 32);

  Bit_Reduce8_out1 <= (Bit_Slice22_out1(3) OR Bit_Slice22_out1(2) OR Bit_Slice22_out1(1) OR Bit_Slice22_out1(0));

  Bit_Slice20_out1 <= Delay6_PS_59_out1(31 DOWNTO 28);

  Bit_Reduce7_out1 <= (Bit_Slice20_out1(3) OR Bit_Slice20_out1(2) OR Bit_Slice20_out1(1) OR Bit_Slice20_out1(0));

  Bit_Slice16_out1 <= Delay6_PS_59_out1(27 DOWNTO 24);

  Bit_Reduce6_out1 <= (Bit_Slice16_out1(3) OR Bit_Slice16_out1(2) OR Bit_Slice16_out1(1) OR Bit_Slice16_out1(0));

  Bit_Slice14_out1 <= Delay6_PS_59_out1(23 DOWNTO 20);

  Bit_Reduce5_out1 <= (Bit_Slice14_out1(3) OR Bit_Slice14_out1(2) OR Bit_Slice14_out1(1) OR Bit_Slice14_out1(0));

  Bit_Slice18_out1 <= Delay6_PS_59_out1(19 DOWNTO 16);

  Bit_Reduce4_out1 <= (Bit_Slice18_out1(3) OR Bit_Slice18_out1(2) OR Bit_Slice18_out1(1) OR Bit_Slice18_out1(0));

  Bit_Slice12_out1 <= Delay6_PS_59_out1(15 DOWNTO 12);

  Bit_Reduce3_out1 <= (Bit_Slice12_out1(3) OR Bit_Slice12_out1(2) OR Bit_Slice12_out1(1) OR Bit_Slice12_out1(0));

  Bit_Slice10_out1 <= Delay6_PS_59_out1(11 DOWNTO 8);

  Bit_Reduce2_out1 <= (Bit_Slice10_out1(3) OR Bit_Slice10_out1(2) OR Bit_Slice10_out1(1) OR Bit_Slice10_out1(0));

  Bit_Slice8_out1 <= Delay6_PS_59_out1(7 DOWNTO 4);

  Bit_Reduce1_out1 <= (Bit_Slice8_out1(3) OR Bit_Slice8_out1(2) OR Bit_Slice8_out1(1) OR Bit_Slice8_out1(0));

  Bit_Slice6_out1 <= Delay6_PS_59_out1(3 DOWNTO 0);

  Bit_Reduce_out1 <= (Bit_Slice6_out1(3) OR Bit_Slice6_out1(2) OR Bit_Slice6_out1(1) OR Bit_Slice6_out1(0));

  Logical_Operator1_out1_2 <= Bit_Reduce1_out1 OR Bit_Reduce_out1;

  Logical_Operator2_out1_2 <= Bit_Reduce2_out1 OR Logical_Operator1_out1_2;

  Logical_Operator3_out1_1 <= Bit_Reduce3_out1 OR Logical_Operator2_out1_2;

  Logical_Operator4_out1 <= Bit_Reduce4_out1 OR Logical_Operator3_out1_1;

  Logical_Operator5_out1 <= Bit_Reduce5_out1 OR Logical_Operator4_out1;

  Logical_Operator6_out1 <= Bit_Reduce6_out1 OR Logical_Operator5_out1;

  Logical_Operator7_out1_1 <= Bit_Reduce7_out1 OR Logical_Operator6_out1;

  Logical_Operator8_out1 <= Bit_Reduce8_out1 OR Logical_Operator7_out1_1;

  Logical_Operator9_out1 <= Bit_Reduce9_out1 OR Logical_Operator8_out1;

  Logical_Operator10_out1 <= Bit_Reduce10_out1 OR Logical_Operator9_out1;

  Logical_Operator12_out1 <= Bit_Reduce11_out1 OR Logical_Operator10_out1;

  Logical_Operator4_out1_1 <= Logical_Operator1_out1_1 AND Bit_Slice2_out1;

  Logical_Operator13_out1 <= Bit_Reduce12_out1 OR Logical_Operator12_out1;

  Logical_Operator6_out1_1 <= Logical_Operator3_out1 OR Logical_Operator13_out1;

  Logical_Operator5_out1_1 <= Logical_Operator4_out1_1 OR Logical_Operator6_out1_1;

  Bit_Slice31_out1 <= Delay6_PS_59_out1(50 DOWNTO 48);

  Bit_Slice2_out1_1 <= Bit_Slice31_out1(2);

  Logical_Operator2_out1_3 <= Bit_Slice2_out1_1 AND Bit_Slice5_out1;

  Bit_Slice1_out1_3 <= Bit_Slice31_out1(1);

  Logical_Operator1_out1_3 <= Logical_Operator2_out1_3 OR Bit_Slice1_out1_3;

  Logical_Operator4_out1_2 <= Logical_Operator1_out1_3 AND Bit_Slice2_out1;

  Bit_Slice_out1_55 <= Bit_Slice31_out1(0);

  Logical_Operator7_out1_2 <= Bit_Slice5_out1 OR Bit_Slice2_out1;

  Logical_Operator3_out1_2 <= Bit_Slice_out1_55 AND Logical_Operator7_out1_2;

  Logical_Operator4_out1_3 <= Logical_Operator1_out1 AND Bit_Slice3_out1;

  Logical_Operator3_out1_3 <= Logical_Operator5_out1_1 AND Bit_Slice1_out1_1;

  Logical_Operator6_out1_2 <= Logical_Operator3_out1_2 OR Logical_Operator12_out1;

  Logical_Operator5_out1_2 <= Logical_Operator4_out1_2 OR Logical_Operator6_out1_2;

  Logical_Operator6_out1_3 <= Logical_Operator3_out1_3 OR Logical_Operator5_out1_2;

  Logical_Operator5_out1_3 <= Logical_Operator4_out1_3 OR Logical_Operator6_out1_3;

  Bit_Slice4_out1 <= Delay11_PS_7_59_out1(4);

  Bit_Slice25_out1 <= Delay6_PS_59_out1(46 DOWNTO 44);

  Bit_Slice2_out1_2 <= Bit_Slice25_out1(2);

  Logical_Operator2_out1_4 <= Bit_Slice2_out1_2 AND Bit_Slice5_out1;

  Bit_Slice1_out1_4 <= Bit_Slice25_out1(1);

  Logical_Operator1_out1_4 <= Logical_Operator2_out1_4 OR Bit_Slice1_out1_4;

  Logical_Operator4_out1_4 <= Logical_Operator1_out1_4 AND Bit_Slice2_out1;

  Bit_Slice_out1_56 <= Bit_Slice25_out1(0);

  Logical_Operator7_out1_3 <= Bit_Slice5_out1 OR Bit_Slice2_out1;

  Logical_Operator3_out1_4 <= Bit_Slice_out1_56 AND Logical_Operator7_out1_3;

  Logical_Operator6_out1_4 <= Logical_Operator3_out1_4 OR Logical_Operator10_out1;

  Logical_Operator5_out1_4 <= Logical_Operator4_out1_4 OR Logical_Operator6_out1_4;

  Bit_Slice29_out1 <= Delay6_PS_59_out1(42 DOWNTO 40);

  Bit_Slice2_out1_3 <= Bit_Slice29_out1(2);

  Logical_Operator2_out1_5 <= Bit_Slice2_out1_3 AND Bit_Slice5_out1;

  Bit_Slice1_out1_5 <= Bit_Slice29_out1(1);

  Logical_Operator1_out1_5 <= Logical_Operator2_out1_5 OR Bit_Slice1_out1_5;

  Logical_Operator4_out1_5 <= Logical_Operator1_out1_5 AND Bit_Slice2_out1;

  Bit_Slice_out1_57 <= Bit_Slice29_out1(0);

  Logical_Operator7_out1_4 <= Bit_Slice5_out1 OR Bit_Slice2_out1;

  Logical_Operator3_out1_5 <= Bit_Slice_out1_57 AND Logical_Operator7_out1_4;

  Logical_Operator2_out1_6 <= Logical_Operator5_out1_4 AND Bit_Slice1_out1_1;

  Logical_Operator6_out1_5 <= Logical_Operator3_out1_5 OR Logical_Operator9_out1;

  Logical_Operator5_out1_5 <= Logical_Operator4_out1_5 OR Logical_Operator6_out1_5;

  Logical_Operator1_out1_6 <= Logical_Operator2_out1_6 OR Logical_Operator5_out1_5;

  Bit_Slice23_out1 <= Delay6_PS_59_out1(38 DOWNTO 36);

  Bit_Slice2_out1_4 <= Bit_Slice23_out1(2);

  Logical_Operator2_out1_7 <= Bit_Slice2_out1_4 AND Bit_Slice5_out1;

  Bit_Slice1_out1_6 <= Bit_Slice23_out1(1);

  Logical_Operator1_out1_7 <= Logical_Operator2_out1_7 OR Bit_Slice1_out1_6;

  Logical_Operator4_out1_6 <= Logical_Operator1_out1_7 AND Bit_Slice2_out1;

  Bit_Slice_out1_58 <= Bit_Slice23_out1(0);

  Logical_Operator7_out1_5 <= Bit_Slice5_out1 OR Bit_Slice2_out1;

  Logical_Operator3_out1_6 <= Bit_Slice_out1_58 AND Logical_Operator7_out1_5;

  Logical_Operator6_out1_6 <= Logical_Operator3_out1_6 OR Logical_Operator8_out1;

  Logical_Operator5_out1_6 <= Logical_Operator4_out1_6 OR Logical_Operator6_out1_6;

  Bit_Slice21_out1 <= Delay6_PS_59_out1(34 DOWNTO 32);

  Bit_Slice2_out1_5 <= Bit_Slice21_out1(2);

  Logical_Operator2_out1_8 <= Bit_Slice2_out1_5 AND Bit_Slice5_out1;

  Bit_Slice1_out1_7 <= Bit_Slice21_out1(1);

  Logical_Operator1_out1_8 <= Logical_Operator2_out1_8 OR Bit_Slice1_out1_7;

  Logical_Operator4_out1_7 <= Logical_Operator1_out1_8 AND Bit_Slice2_out1;

  Bit_Slice_out1_59 <= Bit_Slice21_out1(0);

  Logical_Operator7_out1_6 <= Bit_Slice5_out1 OR Bit_Slice2_out1;

  Logical_Operator3_out1_7 <= Bit_Slice_out1_59 AND Logical_Operator7_out1_6;

  Logical_Operator2_out1_9 <= Logical_Operator5_out1_3 AND Bit_Slice4_out1;

  Logical_Operator4_out1_8 <= Logical_Operator1_out1_6 AND Bit_Slice3_out1;

  Logical_Operator3_out1_8 <= Logical_Operator5_out1_6 AND Bit_Slice1_out1_1;

  Logical_Operator6_out1_7 <= Logical_Operator3_out1_7 OR Logical_Operator7_out1_1;

  Logical_Operator5_out1_7 <= Logical_Operator4_out1_7 OR Logical_Operator6_out1_7;

  Logical_Operator6_out1_8 <= Logical_Operator3_out1_8 OR Logical_Operator5_out1_7;

  Logical_Operator5_out1_8 <= Logical_Operator4_out1_8 OR Logical_Operator6_out1_8;

  Logical_Operator1_out1_9 <= Logical_Operator2_out1_9 OR Logical_Operator5_out1_8;

  Bit_Slice17_out1 <= Delay6_PS_59_out1(30 DOWNTO 28);

  Bit_Slice2_out1_6 <= Bit_Slice17_out1(2);

  Logical_Operator2_out1_10 <= Bit_Slice2_out1_6 AND Bit_Slice5_out1;

  Bit_Slice1_out1_8 <= Bit_Slice17_out1(1);

  Logical_Operator1_out1_10 <= Logical_Operator2_out1_10 OR Bit_Slice1_out1_8;

  Logical_Operator4_out1_9 <= Logical_Operator1_out1_10 AND Bit_Slice2_out1;

  Bit_Slice_out1_60 <= Bit_Slice17_out1(0);

  Logical_Operator7_out1_7 <= Bit_Slice5_out1 OR Bit_Slice2_out1;

  Logical_Operator3_out1_9 <= Bit_Slice_out1_60 AND Logical_Operator7_out1_7;

  Logical_Operator6_out1_9 <= Logical_Operator3_out1_9 OR Logical_Operator6_out1;

  Logical_Operator5_out1_9 <= Logical_Operator4_out1_9 OR Logical_Operator6_out1_9;

  Bit_Slice15_out1 <= Delay6_PS_59_out1(26 DOWNTO 24);

  Bit_Slice2_out1_7 <= Bit_Slice15_out1(2);

  Logical_Operator2_out1_11 <= Bit_Slice2_out1_7 AND Bit_Slice5_out1;

  Bit_Slice1_out1_9 <= Bit_Slice15_out1(1);

  Logical_Operator1_out1_11 <= Logical_Operator2_out1_11 OR Bit_Slice1_out1_9;

  Logical_Operator4_out1_10 <= Logical_Operator1_out1_11 AND Bit_Slice2_out1;

  Bit_Slice_out1_61 <= Bit_Slice15_out1(0);

  Logical_Operator7_out1_8 <= Bit_Slice5_out1 OR Bit_Slice2_out1;

  Logical_Operator3_out1_10 <= Bit_Slice_out1_61 AND Logical_Operator7_out1_8;

  Logical_Operator2_out1_12 <= Logical_Operator5_out1_9 AND Bit_Slice1_out1_1;

  Logical_Operator6_out1_10 <= Logical_Operator3_out1_10 OR Logical_Operator5_out1;

  Logical_Operator5_out1_10 <= Logical_Operator4_out1_10 OR Logical_Operator6_out1_10;

  Logical_Operator1_out1_12 <= Logical_Operator2_out1_12 OR Logical_Operator5_out1_10;

  Bit_Slice19_out1 <= Delay6_PS_59_out1(22 DOWNTO 20);

  Bit_Slice2_out1_8 <= Bit_Slice19_out1(2);

  Logical_Operator2_out1_13 <= Bit_Slice2_out1_8 AND Bit_Slice5_out1;

  Bit_Slice1_out1_10 <= Bit_Slice19_out1(1);

  Logical_Operator1_out1_13 <= Logical_Operator2_out1_13 OR Bit_Slice1_out1_10;

  Logical_Operator4_out1_11 <= Logical_Operator1_out1_13 AND Bit_Slice2_out1;

  Bit_Slice_out1_62 <= Bit_Slice19_out1(0);

  Logical_Operator7_out1_9 <= Bit_Slice5_out1 OR Bit_Slice2_out1;

  Logical_Operator3_out1_11 <= Bit_Slice_out1_62 AND Logical_Operator7_out1_9;

  Logical_Operator6_out1_11 <= Logical_Operator3_out1_11 OR Logical_Operator4_out1;

  Logical_Operator5_out1_11 <= Logical_Operator4_out1_11 OR Logical_Operator6_out1_11;

  Bit_Slice13_out1 <= Delay6_PS_59_out1(18 DOWNTO 16);

  Bit_Slice2_out1_9 <= Bit_Slice13_out1(2);

  Logical_Operator2_out1_14 <= Bit_Slice2_out1_9 AND Bit_Slice5_out1;

  Bit_Slice1_out1_11 <= Bit_Slice13_out1(1);

  Logical_Operator1_out1_14 <= Logical_Operator2_out1_14 OR Bit_Slice1_out1_11;

  Logical_Operator4_out1_12 <= Logical_Operator1_out1_14 AND Bit_Slice2_out1;

  Bit_Slice_out1_63 <= Bit_Slice13_out1(0);

  Logical_Operator7_out1_10 <= Bit_Slice5_out1 OR Bit_Slice2_out1;

  Logical_Operator3_out1_12 <= Bit_Slice_out1_63 AND Logical_Operator7_out1_10;

  Logical_Operator4_out1_13 <= Logical_Operator1_out1_12 AND Bit_Slice3_out1;

  Logical_Operator3_out1_13 <= Logical_Operator5_out1_11 AND Bit_Slice1_out1_1;

  Logical_Operator6_out1_12 <= Logical_Operator3_out1_12 OR Logical_Operator3_out1_1;

  Logical_Operator5_out1_12 <= Logical_Operator4_out1_12 OR Logical_Operator6_out1_12;

  Logical_Operator6_out1_13 <= Logical_Operator3_out1_13 OR Logical_Operator5_out1_12;

  Logical_Operator5_out1_13 <= Logical_Operator4_out1_13 OR Logical_Operator6_out1_13;

  Bit_Slice11_out1 <= Delay6_PS_59_out1(14 DOWNTO 12);

  Bit_Slice2_out1_10 <= Bit_Slice11_out1(2);

  Logical_Operator2_out1_15 <= Bit_Slice2_out1_10 AND Bit_Slice5_out1;

  Bit_Slice1_out1_12 <= Bit_Slice11_out1(1);

  Logical_Operator1_out1_15 <= Logical_Operator2_out1_15 OR Bit_Slice1_out1_12;

  Logical_Operator4_out1_14 <= Logical_Operator1_out1_15 AND Bit_Slice2_out1;

  Bit_Slice_out1_64 <= Bit_Slice11_out1(0);

  Logical_Operator7_out1_11 <= Bit_Slice5_out1 OR Bit_Slice2_out1;

  Logical_Operator3_out1_14 <= Bit_Slice_out1_64 AND Logical_Operator7_out1_11;

  Logical_Operator6_out1_14 <= Logical_Operator3_out1_14 OR Logical_Operator2_out1_2;

  Logical_Operator5_out1_14 <= Logical_Operator4_out1_14 OR Logical_Operator6_out1_14;

  Bit_Slice9_out1 <= Delay6_PS_59_out1(10 DOWNTO 8);

  Bit_Slice2_out1_11 <= Bit_Slice9_out1(2);

  Logical_Operator2_out1_16 <= Bit_Slice2_out1_11 AND Bit_Slice5_out1;

  Bit_Slice1_out1_13 <= Bit_Slice9_out1(1);

  Logical_Operator1_out1_16 <= Logical_Operator2_out1_16 OR Bit_Slice1_out1_13;

  Logical_Operator4_out1_15 <= Logical_Operator1_out1_16 AND Bit_Slice2_out1;

  Bit_Slice_out1_65 <= Bit_Slice9_out1(0);

  Logical_Operator7_out1_12 <= Bit_Slice5_out1 OR Bit_Slice2_out1;

  Logical_Operator3_out1_15 <= Bit_Slice_out1_65 AND Logical_Operator7_out1_12;

  Logical_Operator2_out1_17 <= Logical_Operator5_out1_14 AND Bit_Slice1_out1_1;

  Logical_Operator6_out1_15 <= Logical_Operator3_out1_15 OR Logical_Operator1_out1_2;

  Logical_Operator5_out1_15 <= Logical_Operator4_out1_15 OR Logical_Operator6_out1_15;

  Logical_Operator1_out1_17 <= Logical_Operator2_out1_17 OR Logical_Operator5_out1_15;

  Bit_Slice7_out1 <= Delay6_PS_59_out1(6 DOWNTO 4);

  Bit_Slice2_out1_12 <= Bit_Slice7_out1(2);

  Logical_Operator2_out1_18 <= Bit_Slice2_out1_12 AND Bit_Slice5_out1;

  Bit_Slice1_out1_14 <= Bit_Slice7_out1(1);

  Logical_Operator1_out1_18 <= Logical_Operator2_out1_18 OR Bit_Slice1_out1_14;

  Logical_Operator4_out1_16 <= Logical_Operator1_out1_18 AND Bit_Slice2_out1;

  Bit_Slice_out1_66 <= Bit_Slice7_out1(0);

  Logical_Operator7_out1_13 <= Bit_Slice5_out1 OR Bit_Slice2_out1;

  Logical_Operator3_out1_16 <= Bit_Slice_out1_66 AND Logical_Operator7_out1_13;

  Logical_Operator6_out1_16 <= Logical_Operator3_out1_16 OR Bit_Reduce_out1;

  Logical_Operator5_out1_16 <= Logical_Operator4_out1_16 OR Logical_Operator6_out1_16;

  Bit_Slice_out1_67 <= Delay6_PS_59_out1(2 DOWNTO 0);

  Bit_Slice2_out1_13 <= Bit_Slice_out1_67(2);

  Logical_Operator2_out1_19 <= Bit_Slice2_out1_13 AND Bit_Slice5_out1;

  Bit_Slice1_out1_15 <= Bit_Slice_out1_67(1);

  Logical_Operator1_out1_19 <= Logical_Operator2_out1_19 OR Bit_Slice1_out1_15;

  Bit_Slice_out1_68 <= Bit_Slice_out1_67(0);

  Logical_Operator7_out1_14 <= Bit_Slice5_out1 OR Bit_Slice2_out1;

  Logical_Operator3_out1_17 <= Bit_Slice_out1_68 AND Logical_Operator7_out1_14;

  Delay7_PS_59_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay7_PS_59_out1 <= to_signed(0, 55);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay7_PS_59_out1 <= bitsll_R_1_out1_53;
      END IF;
    END IF;
  END PROCESS Delay7_PS_59_process;


  
  R_0_out1 <= '1' WHEN Delay7_PS_59_out1 /= to_signed(0, 55) ELSE
      '0';

  Bit_Slice27_out1 <= Delay11_PS_7_59_out1(5);

  Logical_Operator4_out1_17 <= Logical_Operator1_out1_9 AND Bit_Slice27_out1;

  Logical_Operator3_out1_18 <= Logical_Operator5_out1_13 AND Bit_Slice4_out1;

  Logical_Operator4_out1_18 <= Logical_Operator1_out1_17 AND Bit_Slice3_out1;

  Logical_Operator3_out1_19 <= Logical_Operator5_out1_16 AND Bit_Slice1_out1_1;

  Logical_Operator4_out1_19 <= Logical_Operator1_out1_19 AND Bit_Slice2_out1;

  Constant_out1_2 <= '0';

  Logical_Operator6_out1_17 <= Logical_Operator3_out1_17 OR Constant_out1_2;

  Logical_Operator5_out1_17 <= Logical_Operator4_out1_19 OR Logical_Operator6_out1_17;

  Logical_Operator6_out1_18 <= Logical_Operator3_out1_19 OR Logical_Operator5_out1_17;

  Logical_Operator5_out1_18 <= Logical_Operator4_out1_18 OR Logical_Operator6_out1_18;

  Logical_Operator6_out1_19 <= Logical_Operator3_out1_18 OR Logical_Operator5_out1_18;

  Logical_Operator5_out1_19 <= Logical_Operator4_out1_17 OR Logical_Operator6_out1_19;

  sticky_bitsll_Q_Q_WordLen_out1 <= R_0_out1 OR Logical_Operator5_out1_19;

  BitSlice_out1_1 <= Delay9_PS_60_out1(0);

  Delay10_PS_60_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay10_PS_60_out1 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay10_PS_60_out1 <= sticky_bitsll_Q_Q_WordLen_out1;
      END IF;
    END IF;
  END PROCESS Delay10_PS_60_process;


  alphabitget_Mant_tmp_2_0_out1 <= BitSlice1_out1 OR Delay10_PS_60_out1;

  alphabitget_Mant_tmp_1_0_out1 <= BitSlice_out1_1 AND alphabitget_Mant_tmp_2_0_out1;

  alpha0_out1_3 <= '0';

  BitSlice4_out1 <= Delay9_PS_60_out1(52 DOWNTO 1);

  Bit_Concat_out1_54 <= alpha0_out1_3 & BitSlice4_out1;

  alpha2_out1 <= to_unsigned(1, 53);

  Mant_tmp_2_out1 <= Bit_Concat_out1_54 + alpha2_out1;

  
  if_bitget_Mant_tmp_1_0_out1 <= Bit_Concat_out1_54 WHEN alphabitget_Mant_tmp_1_0_out1 = '0' ELSE
      Mant_tmp_2_out1;

  BitSlice2_out1 <= if_bitget_Mant_tmp_1_0_out1(52);

  DTC1_out1_1 <= unsigned(Delay_out1(10 DOWNTO 0));

  C2_out1 <= to_unsigned(16#000#, 11);

  
  if_exp_tmp_1_out1 <= DTC1_out1_1 WHEN exp_tmp_1_out1 = '0' ELSE
      C2_out1;

  C4_out1 <= to_unsigned(16#7FF#, 11);

  
  if_exp_tmp_2_cfType_ExponentB_out1 <= if_exp_tmp_1_out1 WHEN exp_tmp_2_cfType_ExponentBi_out1 = '0' ELSE
      C4_out1;

  Delay8_PS_60_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay8_PS_60_reg(0) <= to_unsigned(16#000#, 11);
      Delay8_PS_60_reg(1) <= to_unsigned(16#000#, 11);
      Delay8_PS_60_reg(2) <= to_unsigned(16#000#, 11);
      Delay8_PS_60_reg(3) <= to_unsigned(16#000#, 11);
      Delay8_PS_60_reg(4) <= to_unsigned(16#000#, 11);
      Delay8_PS_60_reg(5) <= to_unsigned(16#000#, 11);
      Delay8_PS_60_reg(6) <= to_unsigned(16#000#, 11);
      Delay8_PS_60_reg(7) <= to_unsigned(16#000#, 11);
      Delay8_PS_60_reg(8) <= to_unsigned(16#000#, 11);
      Delay8_PS_60_reg(9) <= to_unsigned(16#000#, 11);
      Delay8_PS_60_reg(10) <= to_unsigned(16#000#, 11);
      Delay8_PS_60_reg(11) <= to_unsigned(16#000#, 11);
      Delay8_PS_60_reg(12) <= to_unsigned(16#000#, 11);
      Delay8_PS_60_reg(13) <= to_unsigned(16#000#, 11);
      Delay8_PS_60_reg(14) <= to_unsigned(16#000#, 11);
      Delay8_PS_60_reg(15) <= to_unsigned(16#000#, 11);
      Delay8_PS_60_reg(16) <= to_unsigned(16#000#, 11);
      Delay8_PS_60_reg(17) <= to_unsigned(16#000#, 11);
      Delay8_PS_60_reg(18) <= to_unsigned(16#000#, 11);
      Delay8_PS_60_reg(19) <= to_unsigned(16#000#, 11);
      Delay8_PS_60_reg(20) <= to_unsigned(16#000#, 11);
      Delay8_PS_60_reg(21) <= to_unsigned(16#000#, 11);
      Delay8_PS_60_reg(22) <= to_unsigned(16#000#, 11);
      Delay8_PS_60_reg(23) <= to_unsigned(16#000#, 11);
      Delay8_PS_60_reg(24) <= to_unsigned(16#000#, 11);
      Delay8_PS_60_reg(25) <= to_unsigned(16#000#, 11);
      Delay8_PS_60_reg(26) <= to_unsigned(16#000#, 11);
      Delay8_PS_60_reg(27) <= to_unsigned(16#000#, 11);
      Delay8_PS_60_reg(28) <= to_unsigned(16#000#, 11);
      Delay8_PS_60_reg(29) <= to_unsigned(16#000#, 11);
      Delay8_PS_60_reg(30) <= to_unsigned(16#000#, 11);
      Delay8_PS_60_reg(31) <= to_unsigned(16#000#, 11);
      Delay8_PS_60_reg(32) <= to_unsigned(16#000#, 11);
      Delay8_PS_60_reg(33) <= to_unsigned(16#000#, 11);
      Delay8_PS_60_reg(34) <= to_unsigned(16#000#, 11);
      Delay8_PS_60_reg(35) <= to_unsigned(16#000#, 11);
      Delay8_PS_60_reg(36) <= to_unsigned(16#000#, 11);
      Delay8_PS_60_reg(37) <= to_unsigned(16#000#, 11);
      Delay8_PS_60_reg(38) <= to_unsigned(16#000#, 11);
      Delay8_PS_60_reg(39) <= to_unsigned(16#000#, 11);
      Delay8_PS_60_reg(40) <= to_unsigned(16#000#, 11);
      Delay8_PS_60_reg(41) <= to_unsigned(16#000#, 11);
      Delay8_PS_60_reg(42) <= to_unsigned(16#000#, 11);
      Delay8_PS_60_reg(43) <= to_unsigned(16#000#, 11);
      Delay8_PS_60_reg(44) <= to_unsigned(16#000#, 11);
      Delay8_PS_60_reg(45) <= to_unsigned(16#000#, 11);
      Delay8_PS_60_reg(46) <= to_unsigned(16#000#, 11);
      Delay8_PS_60_reg(47) <= to_unsigned(16#000#, 11);
      Delay8_PS_60_reg(48) <= to_unsigned(16#000#, 11);
      Delay8_PS_60_reg(49) <= to_unsigned(16#000#, 11);
      Delay8_PS_60_reg(50) <= to_unsigned(16#000#, 11);
      Delay8_PS_60_reg(51) <= to_unsigned(16#000#, 11);
      Delay8_PS_60_reg(52) <= to_unsigned(16#000#, 11);
      Delay8_PS_60_reg(53) <= to_unsigned(16#000#, 11);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay8_PS_60_reg(0) <= Delay8_PS_60_reg_next(0);
        Delay8_PS_60_reg(1) <= Delay8_PS_60_reg_next(1);
        Delay8_PS_60_reg(2) <= Delay8_PS_60_reg_next(2);
        Delay8_PS_60_reg(3) <= Delay8_PS_60_reg_next(3);
        Delay8_PS_60_reg(4) <= Delay8_PS_60_reg_next(4);
        Delay8_PS_60_reg(5) <= Delay8_PS_60_reg_next(5);
        Delay8_PS_60_reg(6) <= Delay8_PS_60_reg_next(6);
        Delay8_PS_60_reg(7) <= Delay8_PS_60_reg_next(7);
        Delay8_PS_60_reg(8) <= Delay8_PS_60_reg_next(8);
        Delay8_PS_60_reg(9) <= Delay8_PS_60_reg_next(9);
        Delay8_PS_60_reg(10) <= Delay8_PS_60_reg_next(10);
        Delay8_PS_60_reg(11) <= Delay8_PS_60_reg_next(11);
        Delay8_PS_60_reg(12) <= Delay8_PS_60_reg_next(12);
        Delay8_PS_60_reg(13) <= Delay8_PS_60_reg_next(13);
        Delay8_PS_60_reg(14) <= Delay8_PS_60_reg_next(14);
        Delay8_PS_60_reg(15) <= Delay8_PS_60_reg_next(15);
        Delay8_PS_60_reg(16) <= Delay8_PS_60_reg_next(16);
        Delay8_PS_60_reg(17) <= Delay8_PS_60_reg_next(17);
        Delay8_PS_60_reg(18) <= Delay8_PS_60_reg_next(18);
        Delay8_PS_60_reg(19) <= Delay8_PS_60_reg_next(19);
        Delay8_PS_60_reg(20) <= Delay8_PS_60_reg_next(20);
        Delay8_PS_60_reg(21) <= Delay8_PS_60_reg_next(21);
        Delay8_PS_60_reg(22) <= Delay8_PS_60_reg_next(22);
        Delay8_PS_60_reg(23) <= Delay8_PS_60_reg_next(23);
        Delay8_PS_60_reg(24) <= Delay8_PS_60_reg_next(24);
        Delay8_PS_60_reg(25) <= Delay8_PS_60_reg_next(25);
        Delay8_PS_60_reg(26) <= Delay8_PS_60_reg_next(26);
        Delay8_PS_60_reg(27) <= Delay8_PS_60_reg_next(27);
        Delay8_PS_60_reg(28) <= Delay8_PS_60_reg_next(28);
        Delay8_PS_60_reg(29) <= Delay8_PS_60_reg_next(29);
        Delay8_PS_60_reg(30) <= Delay8_PS_60_reg_next(30);
        Delay8_PS_60_reg(31) <= Delay8_PS_60_reg_next(31);
        Delay8_PS_60_reg(32) <= Delay8_PS_60_reg_next(32);
        Delay8_PS_60_reg(33) <= Delay8_PS_60_reg_next(33);
        Delay8_PS_60_reg(34) <= Delay8_PS_60_reg_next(34);
        Delay8_PS_60_reg(35) <= Delay8_PS_60_reg_next(35);
        Delay8_PS_60_reg(36) <= Delay8_PS_60_reg_next(36);
        Delay8_PS_60_reg(37) <= Delay8_PS_60_reg_next(37);
        Delay8_PS_60_reg(38) <= Delay8_PS_60_reg_next(38);
        Delay8_PS_60_reg(39) <= Delay8_PS_60_reg_next(39);
        Delay8_PS_60_reg(40) <= Delay8_PS_60_reg_next(40);
        Delay8_PS_60_reg(41) <= Delay8_PS_60_reg_next(41);
        Delay8_PS_60_reg(42) <= Delay8_PS_60_reg_next(42);
        Delay8_PS_60_reg(43) <= Delay8_PS_60_reg_next(43);
        Delay8_PS_60_reg(44) <= Delay8_PS_60_reg_next(44);
        Delay8_PS_60_reg(45) <= Delay8_PS_60_reg_next(45);
        Delay8_PS_60_reg(46) <= Delay8_PS_60_reg_next(46);
        Delay8_PS_60_reg(47) <= Delay8_PS_60_reg_next(47);
        Delay8_PS_60_reg(48) <= Delay8_PS_60_reg_next(48);
        Delay8_PS_60_reg(49) <= Delay8_PS_60_reg_next(49);
        Delay8_PS_60_reg(50) <= Delay8_PS_60_reg_next(50);
        Delay8_PS_60_reg(51) <= Delay8_PS_60_reg_next(51);
        Delay8_PS_60_reg(52) <= Delay8_PS_60_reg_next(52);
        Delay8_PS_60_reg(53) <= Delay8_PS_60_reg_next(53);
      END IF;
    END IF;
  END PROCESS Delay8_PS_60_process;

  Delay8_PS_60_out1 <= Delay8_PS_60_reg(53);
  Delay8_PS_60_reg_next(0) <= if_exp_tmp_2_cfType_ExponentB_out1;
  Delay8_PS_60_reg_next(1) <= Delay8_PS_60_reg(0);
  Delay8_PS_60_reg_next(2) <= Delay8_PS_60_reg(1);
  Delay8_PS_60_reg_next(3) <= Delay8_PS_60_reg(2);
  Delay8_PS_60_reg_next(4) <= Delay8_PS_60_reg(3);
  Delay8_PS_60_reg_next(5) <= Delay8_PS_60_reg(4);
  Delay8_PS_60_reg_next(6) <= Delay8_PS_60_reg(5);
  Delay8_PS_60_reg_next(7) <= Delay8_PS_60_reg(6);
  Delay8_PS_60_reg_next(8) <= Delay8_PS_60_reg(7);
  Delay8_PS_60_reg_next(9) <= Delay8_PS_60_reg(8);
  Delay8_PS_60_reg_next(10) <= Delay8_PS_60_reg(9);
  Delay8_PS_60_reg_next(11) <= Delay8_PS_60_reg(10);
  Delay8_PS_60_reg_next(12) <= Delay8_PS_60_reg(11);
  Delay8_PS_60_reg_next(13) <= Delay8_PS_60_reg(12);
  Delay8_PS_60_reg_next(14) <= Delay8_PS_60_reg(13);
  Delay8_PS_60_reg_next(15) <= Delay8_PS_60_reg(14);
  Delay8_PS_60_reg_next(16) <= Delay8_PS_60_reg(15);
  Delay8_PS_60_reg_next(17) <= Delay8_PS_60_reg(16);
  Delay8_PS_60_reg_next(18) <= Delay8_PS_60_reg(17);
  Delay8_PS_60_reg_next(19) <= Delay8_PS_60_reg(18);
  Delay8_PS_60_reg_next(20) <= Delay8_PS_60_reg(19);
  Delay8_PS_60_reg_next(21) <= Delay8_PS_60_reg(20);
  Delay8_PS_60_reg_next(22) <= Delay8_PS_60_reg(21);
  Delay8_PS_60_reg_next(23) <= Delay8_PS_60_reg(22);
  Delay8_PS_60_reg_next(24) <= Delay8_PS_60_reg(23);
  Delay8_PS_60_reg_next(25) <= Delay8_PS_60_reg(24);
  Delay8_PS_60_reg_next(26) <= Delay8_PS_60_reg(25);
  Delay8_PS_60_reg_next(27) <= Delay8_PS_60_reg(26);
  Delay8_PS_60_reg_next(28) <= Delay8_PS_60_reg(27);
  Delay8_PS_60_reg_next(29) <= Delay8_PS_60_reg(28);
  Delay8_PS_60_reg_next(30) <= Delay8_PS_60_reg(29);
  Delay8_PS_60_reg_next(31) <= Delay8_PS_60_reg(30);
  Delay8_PS_60_reg_next(32) <= Delay8_PS_60_reg(31);
  Delay8_PS_60_reg_next(33) <= Delay8_PS_60_reg(32);
  Delay8_PS_60_reg_next(34) <= Delay8_PS_60_reg(33);
  Delay8_PS_60_reg_next(35) <= Delay8_PS_60_reg(34);
  Delay8_PS_60_reg_next(36) <= Delay8_PS_60_reg(35);
  Delay8_PS_60_reg_next(37) <= Delay8_PS_60_reg(36);
  Delay8_PS_60_reg_next(38) <= Delay8_PS_60_reg(37);
  Delay8_PS_60_reg_next(39) <= Delay8_PS_60_reg(38);
  Delay8_PS_60_reg_next(40) <= Delay8_PS_60_reg(39);
  Delay8_PS_60_reg_next(41) <= Delay8_PS_60_reg(40);
  Delay8_PS_60_reg_next(42) <= Delay8_PS_60_reg(41);
  Delay8_PS_60_reg_next(43) <= Delay8_PS_60_reg(42);
  Delay8_PS_60_reg_next(44) <= Delay8_PS_60_reg(43);
  Delay8_PS_60_reg_next(45) <= Delay8_PS_60_reg(44);
  Delay8_PS_60_reg_next(46) <= Delay8_PS_60_reg(45);
  Delay8_PS_60_reg_next(47) <= Delay8_PS_60_reg(46);
  Delay8_PS_60_reg_next(48) <= Delay8_PS_60_reg(47);
  Delay8_PS_60_reg_next(49) <= Delay8_PS_60_reg(48);
  Delay8_PS_60_reg_next(50) <= Delay8_PS_60_reg(49);
  Delay8_PS_60_reg_next(51) <= Delay8_PS_60_reg(50);
  Delay8_PS_60_reg_next(52) <= Delay8_PS_60_reg(51);
  Delay8_PS_60_reg_next(53) <= Delay8_PS_60_reg(52);

  alpha1_out1_3 <= to_unsigned(16#001#, 11);

  Exp_1_out1 <= Delay8_PS_60_out1 + alpha1_out1_3;

  
  if_bitget_Mant_tmp_Mant_tmp_Wor_out1 <= Delay8_PS_60_out1 WHEN BitSlice2_out1 = '0' ELSE
      Exp_1_out1;

  C4_out1_1 <= to_unsigned(16#7FF#, 11);

  
  if_bExponent_0_bMantissa_out1 <= if_bitget_Mant_tmp_Mant_tmp_Wor_out1 WHEN Delay52_PS_60_out1 = '0' ELSE
      C4_out1_1;

  C1_out1_1 <= to_unsigned(16#000#, 11);

  C_out1_5 <= to_unsigned(16#7FF#, 11);

  
  if_bExponent_0_bMantissa_out1_1 <= C1_out1_1 WHEN Delay52_PS_60_out1 = '0' ELSE
      C_out1_5;

  
  if_aExponent_0_aMantissa_out1 <= if_bExponent_0_bMantissa_out1 WHEN Delay53_PS_60_out1 = '0' ELSE
      if_bExponent_0_bMantissa_out1_1;

  Delay57_PS_2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay57_PS_2_out1 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay57_PS_2_out1 <= aExponent_cfType_Exponent_I_out1;
      END IF;
    END IF;
  END PROCESS Delay57_PS_2_process;


  Delay59_PS_2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay59_PS_2_out1 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay59_PS_2_out1 <= bMantissa_0_out1;
      END IF;
    END IF;
  END PROCESS Delay59_PS_2_process;


  Delay3_PS_2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay3_PS_2_out1 <= to_unsigned(16#000#, 11);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay3_PS_2_out1 <= Delay19_PS_1_out1;
      END IF;
    END IF;
  END PROCESS Delay3_PS_2_process;


  C1_out1_2 <= to_unsigned(16#000#, 11);

  
  if_mant_b_0_out1 <= Delay3_PS_2_out1 WHEN Delay59_PS_2_out1 = '0' ELSE
      C1_out1_2;

  Delay1_PS_2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay1_PS_2_out1 <= to_unsigned(16#000#, 11);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay1_PS_2_out1 <= Delay16_PS_1_out1;
      END IF;
    END IF;
  END PROCESS Delay1_PS_2_process;


  
  if_exp_a_cfType_Exponent_Inf_out1 <= if_mant_b_0_out1 WHEN Delay57_PS_2_out1 = '0' ELSE
      Delay1_PS_2_out1;

  Delay39PS_5_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay39PS_5_reg(0) <= to_unsigned(16#000#, 11);
      Delay39PS_5_reg(1) <= to_unsigned(16#000#, 11);
      Delay39PS_5_reg(2) <= to_unsigned(16#000#, 11);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay39PS_5_reg(0) <= Delay39PS_5_reg_next(0);
        Delay39PS_5_reg(1) <= Delay39PS_5_reg_next(1);
        Delay39PS_5_reg(2) <= Delay39PS_5_reg_next(2);
      END IF;
    END IF;
  END PROCESS Delay39PS_5_process;

  Delay39PS_5_out1 <= Delay39PS_5_reg(2);
  Delay39PS_5_reg_next(0) <= if_exp_a_cfType_Exponent_Inf_out1;
  Delay39PS_5_reg_next(1) <= Delay39PS_5_reg(0);
  Delay39PS_5_reg_next(2) <= Delay39PS_5_reg(1);

  Delay55_PS_60_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay55_PS_60_reg(0) <= to_unsigned(16#000#, 11);
      Delay55_PS_60_reg(1) <= to_unsigned(16#000#, 11);
      Delay55_PS_60_reg(2) <= to_unsigned(16#000#, 11);
      Delay55_PS_60_reg(3) <= to_unsigned(16#000#, 11);
      Delay55_PS_60_reg(4) <= to_unsigned(16#000#, 11);
      Delay55_PS_60_reg(5) <= to_unsigned(16#000#, 11);
      Delay55_PS_60_reg(6) <= to_unsigned(16#000#, 11);
      Delay55_PS_60_reg(7) <= to_unsigned(16#000#, 11);
      Delay55_PS_60_reg(8) <= to_unsigned(16#000#, 11);
      Delay55_PS_60_reg(9) <= to_unsigned(16#000#, 11);
      Delay55_PS_60_reg(10) <= to_unsigned(16#000#, 11);
      Delay55_PS_60_reg(11) <= to_unsigned(16#000#, 11);
      Delay55_PS_60_reg(12) <= to_unsigned(16#000#, 11);
      Delay55_PS_60_reg(13) <= to_unsigned(16#000#, 11);
      Delay55_PS_60_reg(14) <= to_unsigned(16#000#, 11);
      Delay55_PS_60_reg(15) <= to_unsigned(16#000#, 11);
      Delay55_PS_60_reg(16) <= to_unsigned(16#000#, 11);
      Delay55_PS_60_reg(17) <= to_unsigned(16#000#, 11);
      Delay55_PS_60_reg(18) <= to_unsigned(16#000#, 11);
      Delay55_PS_60_reg(19) <= to_unsigned(16#000#, 11);
      Delay55_PS_60_reg(20) <= to_unsigned(16#000#, 11);
      Delay55_PS_60_reg(21) <= to_unsigned(16#000#, 11);
      Delay55_PS_60_reg(22) <= to_unsigned(16#000#, 11);
      Delay55_PS_60_reg(23) <= to_unsigned(16#000#, 11);
      Delay55_PS_60_reg(24) <= to_unsigned(16#000#, 11);
      Delay55_PS_60_reg(25) <= to_unsigned(16#000#, 11);
      Delay55_PS_60_reg(26) <= to_unsigned(16#000#, 11);
      Delay55_PS_60_reg(27) <= to_unsigned(16#000#, 11);
      Delay55_PS_60_reg(28) <= to_unsigned(16#000#, 11);
      Delay55_PS_60_reg(29) <= to_unsigned(16#000#, 11);
      Delay55_PS_60_reg(30) <= to_unsigned(16#000#, 11);
      Delay55_PS_60_reg(31) <= to_unsigned(16#000#, 11);
      Delay55_PS_60_reg(32) <= to_unsigned(16#000#, 11);
      Delay55_PS_60_reg(33) <= to_unsigned(16#000#, 11);
      Delay55_PS_60_reg(34) <= to_unsigned(16#000#, 11);
      Delay55_PS_60_reg(35) <= to_unsigned(16#000#, 11);
      Delay55_PS_60_reg(36) <= to_unsigned(16#000#, 11);
      Delay55_PS_60_reg(37) <= to_unsigned(16#000#, 11);
      Delay55_PS_60_reg(38) <= to_unsigned(16#000#, 11);
      Delay55_PS_60_reg(39) <= to_unsigned(16#000#, 11);
      Delay55_PS_60_reg(40) <= to_unsigned(16#000#, 11);
      Delay55_PS_60_reg(41) <= to_unsigned(16#000#, 11);
      Delay55_PS_60_reg(42) <= to_unsigned(16#000#, 11);
      Delay55_PS_60_reg(43) <= to_unsigned(16#000#, 11);
      Delay55_PS_60_reg(44) <= to_unsigned(16#000#, 11);
      Delay55_PS_60_reg(45) <= to_unsigned(16#000#, 11);
      Delay55_PS_60_reg(46) <= to_unsigned(16#000#, 11);
      Delay55_PS_60_reg(47) <= to_unsigned(16#000#, 11);
      Delay55_PS_60_reg(48) <= to_unsigned(16#000#, 11);
      Delay55_PS_60_reg(49) <= to_unsigned(16#000#, 11);
      Delay55_PS_60_reg(50) <= to_unsigned(16#000#, 11);
      Delay55_PS_60_reg(51) <= to_unsigned(16#000#, 11);
      Delay55_PS_60_reg(52) <= to_unsigned(16#000#, 11);
      Delay55_PS_60_reg(53) <= to_unsigned(16#000#, 11);
      Delay55_PS_60_reg(54) <= to_unsigned(16#000#, 11);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay55_PS_60_reg(0) <= Delay55_PS_60_reg_next(0);
        Delay55_PS_60_reg(1) <= Delay55_PS_60_reg_next(1);
        Delay55_PS_60_reg(2) <= Delay55_PS_60_reg_next(2);
        Delay55_PS_60_reg(3) <= Delay55_PS_60_reg_next(3);
        Delay55_PS_60_reg(4) <= Delay55_PS_60_reg_next(4);
        Delay55_PS_60_reg(5) <= Delay55_PS_60_reg_next(5);
        Delay55_PS_60_reg(6) <= Delay55_PS_60_reg_next(6);
        Delay55_PS_60_reg(7) <= Delay55_PS_60_reg_next(7);
        Delay55_PS_60_reg(8) <= Delay55_PS_60_reg_next(8);
        Delay55_PS_60_reg(9) <= Delay55_PS_60_reg_next(9);
        Delay55_PS_60_reg(10) <= Delay55_PS_60_reg_next(10);
        Delay55_PS_60_reg(11) <= Delay55_PS_60_reg_next(11);
        Delay55_PS_60_reg(12) <= Delay55_PS_60_reg_next(12);
        Delay55_PS_60_reg(13) <= Delay55_PS_60_reg_next(13);
        Delay55_PS_60_reg(14) <= Delay55_PS_60_reg_next(14);
        Delay55_PS_60_reg(15) <= Delay55_PS_60_reg_next(15);
        Delay55_PS_60_reg(16) <= Delay55_PS_60_reg_next(16);
        Delay55_PS_60_reg(17) <= Delay55_PS_60_reg_next(17);
        Delay55_PS_60_reg(18) <= Delay55_PS_60_reg_next(18);
        Delay55_PS_60_reg(19) <= Delay55_PS_60_reg_next(19);
        Delay55_PS_60_reg(20) <= Delay55_PS_60_reg_next(20);
        Delay55_PS_60_reg(21) <= Delay55_PS_60_reg_next(21);
        Delay55_PS_60_reg(22) <= Delay55_PS_60_reg_next(22);
        Delay55_PS_60_reg(23) <= Delay55_PS_60_reg_next(23);
        Delay55_PS_60_reg(24) <= Delay55_PS_60_reg_next(24);
        Delay55_PS_60_reg(25) <= Delay55_PS_60_reg_next(25);
        Delay55_PS_60_reg(26) <= Delay55_PS_60_reg_next(26);
        Delay55_PS_60_reg(27) <= Delay55_PS_60_reg_next(27);
        Delay55_PS_60_reg(28) <= Delay55_PS_60_reg_next(28);
        Delay55_PS_60_reg(29) <= Delay55_PS_60_reg_next(29);
        Delay55_PS_60_reg(30) <= Delay55_PS_60_reg_next(30);
        Delay55_PS_60_reg(31) <= Delay55_PS_60_reg_next(31);
        Delay55_PS_60_reg(32) <= Delay55_PS_60_reg_next(32);
        Delay55_PS_60_reg(33) <= Delay55_PS_60_reg_next(33);
        Delay55_PS_60_reg(34) <= Delay55_PS_60_reg_next(34);
        Delay55_PS_60_reg(35) <= Delay55_PS_60_reg_next(35);
        Delay55_PS_60_reg(36) <= Delay55_PS_60_reg_next(36);
        Delay55_PS_60_reg(37) <= Delay55_PS_60_reg_next(37);
        Delay55_PS_60_reg(38) <= Delay55_PS_60_reg_next(38);
        Delay55_PS_60_reg(39) <= Delay55_PS_60_reg_next(39);
        Delay55_PS_60_reg(40) <= Delay55_PS_60_reg_next(40);
        Delay55_PS_60_reg(41) <= Delay55_PS_60_reg_next(41);
        Delay55_PS_60_reg(42) <= Delay55_PS_60_reg_next(42);
        Delay55_PS_60_reg(43) <= Delay55_PS_60_reg_next(43);
        Delay55_PS_60_reg(44) <= Delay55_PS_60_reg_next(44);
        Delay55_PS_60_reg(45) <= Delay55_PS_60_reg_next(45);
        Delay55_PS_60_reg(46) <= Delay55_PS_60_reg_next(46);
        Delay55_PS_60_reg(47) <= Delay55_PS_60_reg_next(47);
        Delay55_PS_60_reg(48) <= Delay55_PS_60_reg_next(48);
        Delay55_PS_60_reg(49) <= Delay55_PS_60_reg_next(49);
        Delay55_PS_60_reg(50) <= Delay55_PS_60_reg_next(50);
        Delay55_PS_60_reg(51) <= Delay55_PS_60_reg_next(51);
        Delay55_PS_60_reg(52) <= Delay55_PS_60_reg_next(52);
        Delay55_PS_60_reg(53) <= Delay55_PS_60_reg_next(53);
        Delay55_PS_60_reg(54) <= Delay55_PS_60_reg_next(54);
      END IF;
    END IF;
  END PROCESS Delay55_PS_60_process;

  Delay55_PS_60_out1 <= Delay55_PS_60_reg(54);
  Delay55_PS_60_reg_next(0) <= Delay39PS_5_out1;
  Delay55_PS_60_reg_next(1) <= Delay55_PS_60_reg(0);
  Delay55_PS_60_reg_next(2) <= Delay55_PS_60_reg(1);
  Delay55_PS_60_reg_next(3) <= Delay55_PS_60_reg(2);
  Delay55_PS_60_reg_next(4) <= Delay55_PS_60_reg(3);
  Delay55_PS_60_reg_next(5) <= Delay55_PS_60_reg(4);
  Delay55_PS_60_reg_next(6) <= Delay55_PS_60_reg(5);
  Delay55_PS_60_reg_next(7) <= Delay55_PS_60_reg(6);
  Delay55_PS_60_reg_next(8) <= Delay55_PS_60_reg(7);
  Delay55_PS_60_reg_next(9) <= Delay55_PS_60_reg(8);
  Delay55_PS_60_reg_next(10) <= Delay55_PS_60_reg(9);
  Delay55_PS_60_reg_next(11) <= Delay55_PS_60_reg(10);
  Delay55_PS_60_reg_next(12) <= Delay55_PS_60_reg(11);
  Delay55_PS_60_reg_next(13) <= Delay55_PS_60_reg(12);
  Delay55_PS_60_reg_next(14) <= Delay55_PS_60_reg(13);
  Delay55_PS_60_reg_next(15) <= Delay55_PS_60_reg(14);
  Delay55_PS_60_reg_next(16) <= Delay55_PS_60_reg(15);
  Delay55_PS_60_reg_next(17) <= Delay55_PS_60_reg(16);
  Delay55_PS_60_reg_next(18) <= Delay55_PS_60_reg(17);
  Delay55_PS_60_reg_next(19) <= Delay55_PS_60_reg(18);
  Delay55_PS_60_reg_next(20) <= Delay55_PS_60_reg(19);
  Delay55_PS_60_reg_next(21) <= Delay55_PS_60_reg(20);
  Delay55_PS_60_reg_next(22) <= Delay55_PS_60_reg(21);
  Delay55_PS_60_reg_next(23) <= Delay55_PS_60_reg(22);
  Delay55_PS_60_reg_next(24) <= Delay55_PS_60_reg(23);
  Delay55_PS_60_reg_next(25) <= Delay55_PS_60_reg(24);
  Delay55_PS_60_reg_next(26) <= Delay55_PS_60_reg(25);
  Delay55_PS_60_reg_next(27) <= Delay55_PS_60_reg(26);
  Delay55_PS_60_reg_next(28) <= Delay55_PS_60_reg(27);
  Delay55_PS_60_reg_next(29) <= Delay55_PS_60_reg(28);
  Delay55_PS_60_reg_next(30) <= Delay55_PS_60_reg(29);
  Delay55_PS_60_reg_next(31) <= Delay55_PS_60_reg(30);
  Delay55_PS_60_reg_next(32) <= Delay55_PS_60_reg(31);
  Delay55_PS_60_reg_next(33) <= Delay55_PS_60_reg(32);
  Delay55_PS_60_reg_next(34) <= Delay55_PS_60_reg(33);
  Delay55_PS_60_reg_next(35) <= Delay55_PS_60_reg(34);
  Delay55_PS_60_reg_next(36) <= Delay55_PS_60_reg(35);
  Delay55_PS_60_reg_next(37) <= Delay55_PS_60_reg(36);
  Delay55_PS_60_reg_next(38) <= Delay55_PS_60_reg(37);
  Delay55_PS_60_reg_next(39) <= Delay55_PS_60_reg(38);
  Delay55_PS_60_reg_next(40) <= Delay55_PS_60_reg(39);
  Delay55_PS_60_reg_next(41) <= Delay55_PS_60_reg(40);
  Delay55_PS_60_reg_next(42) <= Delay55_PS_60_reg(41);
  Delay55_PS_60_reg_next(43) <= Delay55_PS_60_reg(42);
  Delay55_PS_60_reg_next(44) <= Delay55_PS_60_reg(43);
  Delay55_PS_60_reg_next(45) <= Delay55_PS_60_reg(44);
  Delay55_PS_60_reg_next(46) <= Delay55_PS_60_reg(45);
  Delay55_PS_60_reg_next(47) <= Delay55_PS_60_reg(46);
  Delay55_PS_60_reg_next(48) <= Delay55_PS_60_reg(47);
  Delay55_PS_60_reg_next(49) <= Delay55_PS_60_reg(48);
  Delay55_PS_60_reg_next(50) <= Delay55_PS_60_reg(49);
  Delay55_PS_60_reg_next(51) <= Delay55_PS_60_reg(50);
  Delay55_PS_60_reg_next(52) <= Delay55_PS_60_reg(51);
  Delay55_PS_60_reg_next(53) <= Delay55_PS_60_reg(52);
  Delay55_PS_60_reg_next(54) <= Delay55_PS_60_reg(53);

  
  if_aExponent_cfType_Exponent_out1 <= if_aExponent_0_aMantissa_out1 WHEN Delay51_PS_60_out1 = '0' ELSE
      Delay55_PS_60_out1;

  Constant3_out1 <= to_unsigned(16#000#, 11);

  
  Switch6_out1 <= if_aExponent_cfType_Exponent_out1 WHEN Delay1_out1 = '0' ELSE
      Constant3_out1;

  Delay4_PS_61_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay4_PS_61_out1 <= to_unsigned(16#000#, 11);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay4_PS_61_out1 <= Switch6_out1;
      END IF;
    END IF;
  END PROCESS Delay4_PS_61_process;


  
  Compare_To_Zero_out1 <= '1' WHEN Delay8_PS_60_out1 = to_unsigned(16#000#, 11) ELSE
      '0';

  Logical_Operator_out1_54 <= BitSlice2_out1 OR Compare_To_Zero_out1;

  BitSlice3_out1 <= if_bitget_Mant_tmp_1_0_out1(51 DOWNTO 0);

  C_out1_6 <= to_unsigned(0, 52);

  
  if_bitget_Mant_tmp_Mant_tmp_Wor_1_out1 <= BitSlice3_out1 WHEN Logical_Operator_out1_54 = '0' ELSE
      C_out1_6;

  C5_out1_1 <= to_unsigned(0, 52);

  
  if_bExponent_0_bMantissa_1_out1 <= if_bitget_Mant_tmp_Mant_tmp_Wor_1_out1 WHEN Delay52_PS_60_out1 = '0' ELSE
      C5_out1_1;

  C3_out1_1 <= to_unsigned(0, 52);

  C2_out1_1 <= unsigned'(X"8000000000000");

  
  if_bExponent_0_bMantissa_1_out1_1 <= C3_out1_1 WHEN Delay52_PS_60_out1 = '0' ELSE
      C2_out1_1;

  
  if_aExponent_0_aMantissa_1_out1 <= if_bExponent_0_bMantissa_1_out1 WHEN Delay53_PS_60_out1 = '0' ELSE
      if_bExponent_0_bMantissa_1_out1_1;

  Delay4_PS_2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay4_PS_2_out1 <= to_unsigned(0, 52);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay4_PS_2_out1 <= Switch_out1_1;
      END IF;
    END IF;
  END PROCESS Delay4_PS_2_process;


  C2_out1_2 <= to_unsigned(0, 52);

  
  if_mant_b_0_1_out1 <= Delay4_PS_2_out1 WHEN Delay59_PS_2_out1 = '0' ELSE
      C2_out1_2;

  Delay58_PS_2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay58_PS_2_out1 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay58_PS_2_out1 <= bExponent_cfType_Exponent_I_out1;
      END IF;
    END IF;
  END PROCESS Delay58_PS_2_process;


  Delay2_PS_2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay2_PS_2_out1 <= to_unsigned(0, 52);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay2_PS_2_out1 <= Switch_out1;
      END IF;
    END IF;
  END PROCESS Delay2_PS_2_process;


  C_out1_7 <= unsigned'(X"8000000000000");

  
  if_exp_b_cfType_Exponent_Inf_out1 <= Delay2_PS_2_out1 WHEN Delay58_PS_2_out1 = '0' ELSE
      C_out1_7;

  
  if_exp_a_cfType_Exponent_Inf_1_out1 <= if_mant_b_0_1_out1 WHEN Delay57_PS_2_out1 = '0' ELSE
      if_exp_b_cfType_Exponent_Inf_out1;

  Delay49_PS_5_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay49_PS_5_reg(0) <= to_unsigned(0, 52);
      Delay49_PS_5_reg(1) <= to_unsigned(0, 52);
      Delay49_PS_5_reg(2) <= to_unsigned(0, 52);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay49_PS_5_reg(0) <= Delay49_PS_5_reg_next(0);
        Delay49_PS_5_reg(1) <= Delay49_PS_5_reg_next(1);
        Delay49_PS_5_reg(2) <= Delay49_PS_5_reg_next(2);
      END IF;
    END IF;
  END PROCESS Delay49_PS_5_process;

  Delay49_PS_5_out1 <= Delay49_PS_5_reg(2);
  Delay49_PS_5_reg_next(0) <= if_exp_a_cfType_Exponent_Inf_1_out1;
  Delay49_PS_5_reg_next(1) <= Delay49_PS_5_reg(0);
  Delay49_PS_5_reg_next(2) <= Delay49_PS_5_reg(1);

  Delay56_PS_60_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay56_PS_60_reg(0) <= to_unsigned(0, 52);
      Delay56_PS_60_reg(1) <= to_unsigned(0, 52);
      Delay56_PS_60_reg(2) <= to_unsigned(0, 52);
      Delay56_PS_60_reg(3) <= to_unsigned(0, 52);
      Delay56_PS_60_reg(4) <= to_unsigned(0, 52);
      Delay56_PS_60_reg(5) <= to_unsigned(0, 52);
      Delay56_PS_60_reg(6) <= to_unsigned(0, 52);
      Delay56_PS_60_reg(7) <= to_unsigned(0, 52);
      Delay56_PS_60_reg(8) <= to_unsigned(0, 52);
      Delay56_PS_60_reg(9) <= to_unsigned(0, 52);
      Delay56_PS_60_reg(10) <= to_unsigned(0, 52);
      Delay56_PS_60_reg(11) <= to_unsigned(0, 52);
      Delay56_PS_60_reg(12) <= to_unsigned(0, 52);
      Delay56_PS_60_reg(13) <= to_unsigned(0, 52);
      Delay56_PS_60_reg(14) <= to_unsigned(0, 52);
      Delay56_PS_60_reg(15) <= to_unsigned(0, 52);
      Delay56_PS_60_reg(16) <= to_unsigned(0, 52);
      Delay56_PS_60_reg(17) <= to_unsigned(0, 52);
      Delay56_PS_60_reg(18) <= to_unsigned(0, 52);
      Delay56_PS_60_reg(19) <= to_unsigned(0, 52);
      Delay56_PS_60_reg(20) <= to_unsigned(0, 52);
      Delay56_PS_60_reg(21) <= to_unsigned(0, 52);
      Delay56_PS_60_reg(22) <= to_unsigned(0, 52);
      Delay56_PS_60_reg(23) <= to_unsigned(0, 52);
      Delay56_PS_60_reg(24) <= to_unsigned(0, 52);
      Delay56_PS_60_reg(25) <= to_unsigned(0, 52);
      Delay56_PS_60_reg(26) <= to_unsigned(0, 52);
      Delay56_PS_60_reg(27) <= to_unsigned(0, 52);
      Delay56_PS_60_reg(28) <= to_unsigned(0, 52);
      Delay56_PS_60_reg(29) <= to_unsigned(0, 52);
      Delay56_PS_60_reg(30) <= to_unsigned(0, 52);
      Delay56_PS_60_reg(31) <= to_unsigned(0, 52);
      Delay56_PS_60_reg(32) <= to_unsigned(0, 52);
      Delay56_PS_60_reg(33) <= to_unsigned(0, 52);
      Delay56_PS_60_reg(34) <= to_unsigned(0, 52);
      Delay56_PS_60_reg(35) <= to_unsigned(0, 52);
      Delay56_PS_60_reg(36) <= to_unsigned(0, 52);
      Delay56_PS_60_reg(37) <= to_unsigned(0, 52);
      Delay56_PS_60_reg(38) <= to_unsigned(0, 52);
      Delay56_PS_60_reg(39) <= to_unsigned(0, 52);
      Delay56_PS_60_reg(40) <= to_unsigned(0, 52);
      Delay56_PS_60_reg(41) <= to_unsigned(0, 52);
      Delay56_PS_60_reg(42) <= to_unsigned(0, 52);
      Delay56_PS_60_reg(43) <= to_unsigned(0, 52);
      Delay56_PS_60_reg(44) <= to_unsigned(0, 52);
      Delay56_PS_60_reg(45) <= to_unsigned(0, 52);
      Delay56_PS_60_reg(46) <= to_unsigned(0, 52);
      Delay56_PS_60_reg(47) <= to_unsigned(0, 52);
      Delay56_PS_60_reg(48) <= to_unsigned(0, 52);
      Delay56_PS_60_reg(49) <= to_unsigned(0, 52);
      Delay56_PS_60_reg(50) <= to_unsigned(0, 52);
      Delay56_PS_60_reg(51) <= to_unsigned(0, 52);
      Delay56_PS_60_reg(52) <= to_unsigned(0, 52);
      Delay56_PS_60_reg(53) <= to_unsigned(0, 52);
      Delay56_PS_60_reg(54) <= to_unsigned(0, 52);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay56_PS_60_reg(0) <= Delay56_PS_60_reg_next(0);
        Delay56_PS_60_reg(1) <= Delay56_PS_60_reg_next(1);
        Delay56_PS_60_reg(2) <= Delay56_PS_60_reg_next(2);
        Delay56_PS_60_reg(3) <= Delay56_PS_60_reg_next(3);
        Delay56_PS_60_reg(4) <= Delay56_PS_60_reg_next(4);
        Delay56_PS_60_reg(5) <= Delay56_PS_60_reg_next(5);
        Delay56_PS_60_reg(6) <= Delay56_PS_60_reg_next(6);
        Delay56_PS_60_reg(7) <= Delay56_PS_60_reg_next(7);
        Delay56_PS_60_reg(8) <= Delay56_PS_60_reg_next(8);
        Delay56_PS_60_reg(9) <= Delay56_PS_60_reg_next(9);
        Delay56_PS_60_reg(10) <= Delay56_PS_60_reg_next(10);
        Delay56_PS_60_reg(11) <= Delay56_PS_60_reg_next(11);
        Delay56_PS_60_reg(12) <= Delay56_PS_60_reg_next(12);
        Delay56_PS_60_reg(13) <= Delay56_PS_60_reg_next(13);
        Delay56_PS_60_reg(14) <= Delay56_PS_60_reg_next(14);
        Delay56_PS_60_reg(15) <= Delay56_PS_60_reg_next(15);
        Delay56_PS_60_reg(16) <= Delay56_PS_60_reg_next(16);
        Delay56_PS_60_reg(17) <= Delay56_PS_60_reg_next(17);
        Delay56_PS_60_reg(18) <= Delay56_PS_60_reg_next(18);
        Delay56_PS_60_reg(19) <= Delay56_PS_60_reg_next(19);
        Delay56_PS_60_reg(20) <= Delay56_PS_60_reg_next(20);
        Delay56_PS_60_reg(21) <= Delay56_PS_60_reg_next(21);
        Delay56_PS_60_reg(22) <= Delay56_PS_60_reg_next(22);
        Delay56_PS_60_reg(23) <= Delay56_PS_60_reg_next(23);
        Delay56_PS_60_reg(24) <= Delay56_PS_60_reg_next(24);
        Delay56_PS_60_reg(25) <= Delay56_PS_60_reg_next(25);
        Delay56_PS_60_reg(26) <= Delay56_PS_60_reg_next(26);
        Delay56_PS_60_reg(27) <= Delay56_PS_60_reg_next(27);
        Delay56_PS_60_reg(28) <= Delay56_PS_60_reg_next(28);
        Delay56_PS_60_reg(29) <= Delay56_PS_60_reg_next(29);
        Delay56_PS_60_reg(30) <= Delay56_PS_60_reg_next(30);
        Delay56_PS_60_reg(31) <= Delay56_PS_60_reg_next(31);
        Delay56_PS_60_reg(32) <= Delay56_PS_60_reg_next(32);
        Delay56_PS_60_reg(33) <= Delay56_PS_60_reg_next(33);
        Delay56_PS_60_reg(34) <= Delay56_PS_60_reg_next(34);
        Delay56_PS_60_reg(35) <= Delay56_PS_60_reg_next(35);
        Delay56_PS_60_reg(36) <= Delay56_PS_60_reg_next(36);
        Delay56_PS_60_reg(37) <= Delay56_PS_60_reg_next(37);
        Delay56_PS_60_reg(38) <= Delay56_PS_60_reg_next(38);
        Delay56_PS_60_reg(39) <= Delay56_PS_60_reg_next(39);
        Delay56_PS_60_reg(40) <= Delay56_PS_60_reg_next(40);
        Delay56_PS_60_reg(41) <= Delay56_PS_60_reg_next(41);
        Delay56_PS_60_reg(42) <= Delay56_PS_60_reg_next(42);
        Delay56_PS_60_reg(43) <= Delay56_PS_60_reg_next(43);
        Delay56_PS_60_reg(44) <= Delay56_PS_60_reg_next(44);
        Delay56_PS_60_reg(45) <= Delay56_PS_60_reg_next(45);
        Delay56_PS_60_reg(46) <= Delay56_PS_60_reg_next(46);
        Delay56_PS_60_reg(47) <= Delay56_PS_60_reg_next(47);
        Delay56_PS_60_reg(48) <= Delay56_PS_60_reg_next(48);
        Delay56_PS_60_reg(49) <= Delay56_PS_60_reg_next(49);
        Delay56_PS_60_reg(50) <= Delay56_PS_60_reg_next(50);
        Delay56_PS_60_reg(51) <= Delay56_PS_60_reg_next(51);
        Delay56_PS_60_reg(52) <= Delay56_PS_60_reg_next(52);
        Delay56_PS_60_reg(53) <= Delay56_PS_60_reg_next(53);
        Delay56_PS_60_reg(54) <= Delay56_PS_60_reg_next(54);
      END IF;
    END IF;
  END PROCESS Delay56_PS_60_process;

  Delay56_PS_60_out1 <= Delay56_PS_60_reg(54);
  Delay56_PS_60_reg_next(0) <= Delay49_PS_5_out1;
  Delay56_PS_60_reg_next(1) <= Delay56_PS_60_reg(0);
  Delay56_PS_60_reg_next(2) <= Delay56_PS_60_reg(1);
  Delay56_PS_60_reg_next(3) <= Delay56_PS_60_reg(2);
  Delay56_PS_60_reg_next(4) <= Delay56_PS_60_reg(3);
  Delay56_PS_60_reg_next(5) <= Delay56_PS_60_reg(4);
  Delay56_PS_60_reg_next(6) <= Delay56_PS_60_reg(5);
  Delay56_PS_60_reg_next(7) <= Delay56_PS_60_reg(6);
  Delay56_PS_60_reg_next(8) <= Delay56_PS_60_reg(7);
  Delay56_PS_60_reg_next(9) <= Delay56_PS_60_reg(8);
  Delay56_PS_60_reg_next(10) <= Delay56_PS_60_reg(9);
  Delay56_PS_60_reg_next(11) <= Delay56_PS_60_reg(10);
  Delay56_PS_60_reg_next(12) <= Delay56_PS_60_reg(11);
  Delay56_PS_60_reg_next(13) <= Delay56_PS_60_reg(12);
  Delay56_PS_60_reg_next(14) <= Delay56_PS_60_reg(13);
  Delay56_PS_60_reg_next(15) <= Delay56_PS_60_reg(14);
  Delay56_PS_60_reg_next(16) <= Delay56_PS_60_reg(15);
  Delay56_PS_60_reg_next(17) <= Delay56_PS_60_reg(16);
  Delay56_PS_60_reg_next(18) <= Delay56_PS_60_reg(17);
  Delay56_PS_60_reg_next(19) <= Delay56_PS_60_reg(18);
  Delay56_PS_60_reg_next(20) <= Delay56_PS_60_reg(19);
  Delay56_PS_60_reg_next(21) <= Delay56_PS_60_reg(20);
  Delay56_PS_60_reg_next(22) <= Delay56_PS_60_reg(21);
  Delay56_PS_60_reg_next(23) <= Delay56_PS_60_reg(22);
  Delay56_PS_60_reg_next(24) <= Delay56_PS_60_reg(23);
  Delay56_PS_60_reg_next(25) <= Delay56_PS_60_reg(24);
  Delay56_PS_60_reg_next(26) <= Delay56_PS_60_reg(25);
  Delay56_PS_60_reg_next(27) <= Delay56_PS_60_reg(26);
  Delay56_PS_60_reg_next(28) <= Delay56_PS_60_reg(27);
  Delay56_PS_60_reg_next(29) <= Delay56_PS_60_reg(28);
  Delay56_PS_60_reg_next(30) <= Delay56_PS_60_reg(29);
  Delay56_PS_60_reg_next(31) <= Delay56_PS_60_reg(30);
  Delay56_PS_60_reg_next(32) <= Delay56_PS_60_reg(31);
  Delay56_PS_60_reg_next(33) <= Delay56_PS_60_reg(32);
  Delay56_PS_60_reg_next(34) <= Delay56_PS_60_reg(33);
  Delay56_PS_60_reg_next(35) <= Delay56_PS_60_reg(34);
  Delay56_PS_60_reg_next(36) <= Delay56_PS_60_reg(35);
  Delay56_PS_60_reg_next(37) <= Delay56_PS_60_reg(36);
  Delay56_PS_60_reg_next(38) <= Delay56_PS_60_reg(37);
  Delay56_PS_60_reg_next(39) <= Delay56_PS_60_reg(38);
  Delay56_PS_60_reg_next(40) <= Delay56_PS_60_reg(39);
  Delay56_PS_60_reg_next(41) <= Delay56_PS_60_reg(40);
  Delay56_PS_60_reg_next(42) <= Delay56_PS_60_reg(41);
  Delay56_PS_60_reg_next(43) <= Delay56_PS_60_reg(42);
  Delay56_PS_60_reg_next(44) <= Delay56_PS_60_reg(43);
  Delay56_PS_60_reg_next(45) <= Delay56_PS_60_reg(44);
  Delay56_PS_60_reg_next(46) <= Delay56_PS_60_reg(45);
  Delay56_PS_60_reg_next(47) <= Delay56_PS_60_reg(46);
  Delay56_PS_60_reg_next(48) <= Delay56_PS_60_reg(47);
  Delay56_PS_60_reg_next(49) <= Delay56_PS_60_reg(48);
  Delay56_PS_60_reg_next(50) <= Delay56_PS_60_reg(49);
  Delay56_PS_60_reg_next(51) <= Delay56_PS_60_reg(50);
  Delay56_PS_60_reg_next(52) <= Delay56_PS_60_reg(51);
  Delay56_PS_60_reg_next(53) <= Delay56_PS_60_reg(52);
  Delay56_PS_60_reg_next(54) <= Delay56_PS_60_reg(53);

  
  if_aExponent_cfType_Exponent_1_out1 <= if_aExponent_0_aMantissa_1_out1 WHEN Delay51_PS_60_out1 = '0' ELSE
      Delay56_PS_60_out1;

  Constant2_out1 <= to_unsigned(0, 52);

  
  Switch5_out1 <= if_aExponent_cfType_Exponent_1_out1 WHEN Delay1_out1 = '0' ELSE
      Constant2_out1;

  Delay5_PS_61_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay5_PS_61_out1 <= to_unsigned(0, 52);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay5_PS_61_out1 <= Switch5_out1;
      END IF;
    END IF;
  END PROCESS Delay5_PS_61_process;


  -- Combine FP sign, exponent, mantissa into 64 bit word
  nfp_out_pack <= Delay3_PS_61_out1 & Delay4_PS_61_out1 & Delay5_PS_61_out1;

  nfp_out <= std_logic_vector(nfp_out_pack);

END rtl;

