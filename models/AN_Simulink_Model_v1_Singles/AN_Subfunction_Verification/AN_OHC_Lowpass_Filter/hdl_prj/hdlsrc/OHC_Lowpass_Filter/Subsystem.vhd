-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\OHC_Lowpass_Filter\Subsystem.vhd
-- Created: 2020-04-02 12:29:00
-- 
-- Generated by MATLAB 9.7 and HDL Coder 3.15
-- 
-- 
-- -------------------------------------------------------------
-- Rate and Clocking Details
-- -------------------------------------------------------------
-- Model base rate: 4.16667e-07
-- Target subsystem base rate: 4.16667e-07
-- Explicit user oversample request: 50x
-- 
-- 
-- Clock Enable  Sample Time
-- -------------------------------------------------------------
-- ce_out        2.08333e-05
-- -------------------------------------------------------------
-- 
-- 
-- Output Signal                 Clock Enable  Sample Time
-- -------------------------------------------------------------
-- Out1                          ce_out        2.08333e-05
-- -------------------------------------------------------------
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: Subsystem
-- Source Path: Subsystem
-- Hierarchy Level: 0
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY Subsystem IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        clk_enable                        :   IN    std_logic;
        In1                               :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        ce_out                            :   OUT   std_logic;
        Out1                              :   OUT   std_logic_vector(31 DOWNTO 0)  -- single
        );
END Subsystem;


ARCHITECTURE rtl OF Subsystem IS

  ATTRIBUTE multstyle : string;

  -- Component Declarations
  COMPONENT Subsystem_tc
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          clk_enable                      :   IN    std_logic;
          enb                             :   OUT   std_logic;
          enb_1_50_0                      :   OUT   std_logic;
          enb_1_50_1                      :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT nfp_mul_single
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          nfp_in1                         :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          nfp_in2                         :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          nfp_out                         :   OUT   std_logic_vector(31 DOWNTO 0)  -- single
          );
  END COMPONENT;

  COMPONENT nfp_add_single
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          nfp_in1                         :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          nfp_in2                         :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          nfp_out                         :   OUT   std_logic_vector(31 DOWNTO 0)  -- single
          );
  END COMPONENT;

  COMPONENT nfp_uminus_single
    PORT( nfp_in                          :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          nfp_out                         :   OUT   std_logic_vector(31 DOWNTO 0)  -- single
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : Subsystem_tc
    USE ENTITY work.Subsystem_tc(rtl);

  FOR ALL : nfp_mul_single
    USE ENTITY work.nfp_mul_single(rtl);

  FOR ALL : nfp_add_single
    USE ENTITY work.nfp_add_single(rtl);

  FOR ALL : nfp_uminus_single
    USE ENTITY work.nfp_uminus_single(rtl);

  -- Signals
  SIGNAL enb_1_50_1                       : std_logic;
  SIGNAL enb                              : std_logic;
  SIGNAL enb_1_50_0                       : std_logic;
  SIGNAL Constant3_out1                   : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Constant_out1                    : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Product3_out1                    : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Constant1_out1                   : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Unit_Delay_out1                  : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Product2_out1                    : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Constant2_out1                   : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Unit_Delay1_out1                 : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Product_out1                     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Sum1_out1                        : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Sum2_out1                        : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Constant9_out1                   : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Constant10_out1                  : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Unit_Delay2_out1                 : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Unit_Delay3_out1                 : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Gain2_out1                       : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Product1_out1                    : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay3_bypass_reg                : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Product1_out1_1                  : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Sum3_out1                        : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Gain1_out1                       : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Product4_out1                    : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay2_bypass_reg                : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Product4_out1_1                  : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Sum_out1                         : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay6_bypass_reg                : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Sum_out1_1                       : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Sum3_out1_1                      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay_bypass_reg                 : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Product8_out1                    : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Constant4_out1                   : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Product7_out1                    : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Constant5_out1                   : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Product5_out1                    : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Sum5_out1                        : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Sum6_out1                        : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Constant11_out1                  : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Constant13_out1                  : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Unit_Delay4_out1                 : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Unit_Delay5_out1                 : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Gain5_out1                       : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Product6_out1                    : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay5_bypass_reg                : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Product6_out1_1                  : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Sum7_out1                        : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Gain3_out1                       : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Product9_out1                    : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay4_bypass_reg                : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Product9_out1_1                  : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Sum4_out1                        : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay7_bypass_reg                : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Sum4_out1_1                      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Sum7_out1_1                      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay1_bypass_reg                : std_logic_vector(31 DOWNTO 0);  -- ufix32

BEGIN
  u_Subsystem_tc : Subsystem_tc
    PORT MAP( clk => clk,
              reset => reset,
              clk_enable => clk_enable,
              enb => enb,
              enb_1_50_0 => enb_1_50_0,
              enb_1_50_1 => enb_1_50_1
              );

  u_nfp_mul_comp : nfp_mul_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => Constant_out1,  -- single
              nfp_in2 => In1,  -- single
              nfp_out => Product3_out1  -- single
              );

  u_nfp_mul_comp_1 : nfp_mul_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => Constant1_out1,  -- single
              nfp_in2 => Unit_Delay_out1,  -- single
              nfp_out => Product2_out1  -- single
              );

  u_nfp_mul_comp_2 : nfp_mul_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => Constant2_out1,  -- single
              nfp_in2 => Unit_Delay1_out1,  -- single
              nfp_out => Product_out1  -- single
              );

  u_nfp_add_comp : nfp_add_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => Product2_out1,  -- single
              nfp_in2 => Product_out1,  -- single
              nfp_out => Sum1_out1  -- single
              );

  u_nfp_add_comp_1 : nfp_add_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => Product3_out1,  -- single
              nfp_in2 => Sum1_out1,  -- single
              nfp_out => Sum2_out1  -- single
              );

  u_nfp_uminus_comp : nfp_uminus_single
    PORT MAP( nfp_in => Unit_Delay3_out1,  -- single
              nfp_out => Gain2_out1  -- single
              );

  u_nfp_mul_comp_3 : nfp_mul_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => Constant10_out1,  -- single
              nfp_in2 => Gain2_out1,  -- single
              nfp_out => Product1_out1  -- single
              );

  u_nfp_uminus_comp_1 : nfp_uminus_single
    PORT MAP( nfp_in => Unit_Delay2_out1,  -- single
              nfp_out => Gain1_out1  -- single
              );

  u_nfp_mul_comp_4 : nfp_mul_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => Constant9_out1,  -- single
              nfp_in2 => Gain1_out1,  -- single
              nfp_out => Product4_out1  -- single
              );

  u_nfp_add_comp_2 : nfp_add_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => Product4_out1_1,  -- single
              nfp_in2 => Product1_out1_1,  -- single
              nfp_out => Sum_out1  -- single
              );

  u_nfp_add_comp_3 : nfp_add_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => Sum2_out1,  -- single
              nfp_in2 => Sum_out1_1,  -- single
              nfp_out => Sum3_out1_1  -- single
              );

  u_nfp_mul_comp_5 : nfp_mul_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => Constant3_out1,  -- single
              nfp_in2 => Sum3_out1,  -- single
              nfp_out => Product8_out1  -- single
              );

  u_nfp_mul_comp_6 : nfp_mul_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => Constant4_out1,  -- single
              nfp_in2 => Unit_Delay2_out1,  -- single
              nfp_out => Product7_out1  -- single
              );

  u_nfp_mul_comp_7 : nfp_mul_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => Constant5_out1,  -- single
              nfp_in2 => Unit_Delay3_out1,  -- single
              nfp_out => Product5_out1  -- single
              );

  u_nfp_add_comp_4 : nfp_add_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => Product7_out1,  -- single
              nfp_in2 => Product5_out1,  -- single
              nfp_out => Sum5_out1  -- single
              );

  u_nfp_add_comp_5 : nfp_add_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => Product8_out1,  -- single
              nfp_in2 => Sum5_out1,  -- single
              nfp_out => Sum6_out1  -- single
              );

  u_nfp_uminus_comp_2 : nfp_uminus_single
    PORT MAP( nfp_in => Unit_Delay5_out1,  -- single
              nfp_out => Gain5_out1  -- single
              );

  u_nfp_mul_comp_8 : nfp_mul_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => Constant13_out1,  -- single
              nfp_in2 => Gain5_out1,  -- single
              nfp_out => Product6_out1  -- single
              );

  u_nfp_uminus_comp_3 : nfp_uminus_single
    PORT MAP( nfp_in => Unit_Delay4_out1,  -- single
              nfp_out => Gain3_out1  -- single
              );

  u_nfp_mul_comp_9 : nfp_mul_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => Constant11_out1,  -- single
              nfp_in2 => Gain3_out1,  -- single
              nfp_out => Product9_out1  -- single
              );

  u_nfp_add_comp_6 : nfp_add_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => Product9_out1_1,  -- single
              nfp_in2 => Product6_out1_1,  -- single
              nfp_out => Sum4_out1  -- single
              );

  u_nfp_add_comp_7 : nfp_add_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => Sum6_out1,  -- single
              nfp_in2 => Sum4_out1_1,  -- single
              nfp_out => Sum7_out1_1  -- single
              );

  Constant3_out1 <= X"3d1ac58c";

  Constant_out1 <= X"3d1ac58c";

  Constant1_out1 <= X"3d1ac58c";

  Unit_Delay_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Unit_Delay_out1 <= X"00000000";
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_50_0 = '1' THEN
        Unit_Delay_out1 <= In1;
      END IF;
    END IF;
  END PROCESS Unit_Delay_process;


  Constant2_out1 <= X"00000000";

  Unit_Delay1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Unit_Delay1_out1 <= X"00000000";
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_50_0 = '1' THEN
        Unit_Delay1_out1 <= Unit_Delay_out1;
      END IF;
    END IF;
  END PROCESS Unit_Delay1_process;


  Constant9_out1 <= X"bf6ca74e";

  Constant10_out1 <= X"00000000";

  Unit_Delay3_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Unit_Delay3_out1 <= X"00000000";
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_50_0 = '1' THEN
        Unit_Delay3_out1 <= Unit_Delay2_out1;
      END IF;
    END IF;
  END PROCESS Unit_Delay3_process;


  Delay3_bypass_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay3_bypass_reg <= X"00000000";
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_50_1 = '1' THEN
        Delay3_bypass_reg <= Product1_out1;
      END IF;
    END IF;
  END PROCESS Delay3_bypass_process;

  
  Product1_out1_1 <= Product1_out1 WHEN enb_1_50_1 = '1' ELSE
      Delay3_bypass_reg;

  Unit_Delay2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Unit_Delay2_out1 <= X"00000000";
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_50_0 = '1' THEN
        Unit_Delay2_out1 <= Sum3_out1;
      END IF;
    END IF;
  END PROCESS Unit_Delay2_process;


  Delay2_bypass_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay2_bypass_reg <= X"00000000";
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_50_1 = '1' THEN
        Delay2_bypass_reg <= Product4_out1;
      END IF;
    END IF;
  END PROCESS Delay2_bypass_process;

  
  Product4_out1_1 <= Product4_out1 WHEN enb_1_50_1 = '1' ELSE
      Delay2_bypass_reg;

  Delay6_bypass_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay6_bypass_reg <= X"00000000";
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_50_1 = '1' THEN
        Delay6_bypass_reg <= Sum_out1;
      END IF;
    END IF;
  END PROCESS Delay6_bypass_process;

  
  Sum_out1_1 <= Sum_out1 WHEN enb_1_50_1 = '1' ELSE
      Delay6_bypass_reg;

  Delay_bypass_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay_bypass_reg <= X"00000000";
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_50_1 = '1' THEN
        Delay_bypass_reg <= Sum3_out1_1;
      END IF;
    END IF;
  END PROCESS Delay_bypass_process;

  
  Sum3_out1 <= Sum3_out1_1 WHEN enb_1_50_1 = '1' ELSE
      Delay_bypass_reg;

  Constant4_out1 <= X"3d1ac58c";

  Constant5_out1 <= X"00000000";

  Constant11_out1 <= X"bf6ca74e";

  Constant13_out1 <= X"00000000";

  Unit_Delay5_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Unit_Delay5_out1 <= X"00000000";
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_50_0 = '1' THEN
        Unit_Delay5_out1 <= Unit_Delay4_out1;
      END IF;
    END IF;
  END PROCESS Unit_Delay5_process;


  Delay5_bypass_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay5_bypass_reg <= X"00000000";
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_50_1 = '1' THEN
        Delay5_bypass_reg <= Product6_out1;
      END IF;
    END IF;
  END PROCESS Delay5_bypass_process;

  
  Product6_out1_1 <= Product6_out1 WHEN enb_1_50_1 = '1' ELSE
      Delay5_bypass_reg;

  Unit_Delay4_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Unit_Delay4_out1 <= X"00000000";
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_50_0 = '1' THEN
        Unit_Delay4_out1 <= Sum7_out1;
      END IF;
    END IF;
  END PROCESS Unit_Delay4_process;


  Delay4_bypass_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay4_bypass_reg <= X"00000000";
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_50_1 = '1' THEN
        Delay4_bypass_reg <= Product9_out1;
      END IF;
    END IF;
  END PROCESS Delay4_bypass_process;

  
  Product9_out1_1 <= Product9_out1 WHEN enb_1_50_1 = '1' ELSE
      Delay4_bypass_reg;

  Delay7_bypass_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay7_bypass_reg <= X"00000000";
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_50_1 = '1' THEN
        Delay7_bypass_reg <= Sum4_out1;
      END IF;
    END IF;
  END PROCESS Delay7_bypass_process;

  
  Sum4_out1_1 <= Sum4_out1 WHEN enb_1_50_1 = '1' ELSE
      Delay7_bypass_reg;

  Delay1_bypass_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay1_bypass_reg <= X"00000000";
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_50_1 = '1' THEN
        Delay1_bypass_reg <= Sum7_out1_1;
      END IF;
    END IF;
  END PROCESS Delay1_bypass_process;

  
  Sum7_out1 <= Sum7_out1_1 WHEN enb_1_50_1 = '1' ELSE
      Delay1_bypass_reg;

  ce_out <= enb_1_50_1;

  Out1 <= Sum7_out1;

END rtl;

