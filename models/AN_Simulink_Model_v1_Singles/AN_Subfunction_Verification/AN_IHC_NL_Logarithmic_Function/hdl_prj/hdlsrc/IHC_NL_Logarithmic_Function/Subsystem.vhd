-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\IHC_NL_Logarithmic_Function\Subsystem.vhd
-- Created: 2020-04-08 17:22:28
-- 
-- Generated by MATLAB 9.7 and HDL Coder 3.15
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: Subsystem
-- Source Path: IHC_NL_Logarithmic_Function/IHC NL Logarithmic Function Singles/Subsystem
-- Hierarchy Level: 1
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.IHC_NL_Logarithmic_Function_Singles_pkg.ALL;

ENTITY Subsystem IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        x                                 :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        In2                               :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        Enable                            :   IN    std_logic;
        Out1                              :   OUT   std_logic_vector(31 DOWNTO 0)  -- single
        );
END Subsystem;


ARCHITECTURE rtl OF Subsystem IS

  -- Component Declarations
  COMPONENT nfp_div_single
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          nfp_in1                         :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          nfp_in2                         :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          nfp_out                         :   OUT   std_logic_vector(31 DOWNTO 0)  -- single
          );
  END COMPONENT;

  COMPONENT nfp_uminus_single
    PORT( nfp_in                          :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          nfp_out                         :   OUT   std_logic_vector(31 DOWNTO 0)  -- single
          );
  END COMPONENT;

  COMPONENT nfp_log10_single
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          nfp_in                          :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          nfp_out                         :   OUT   std_logic_vector(31 DOWNTO 0)  -- single
          );
  END COMPONENT;

  COMPONENT nfp_mul_single
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          nfp_in1                         :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          nfp_in2                         :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          nfp_out                         :   OUT   std_logic_vector(31 DOWNTO 0)  -- single
          );
  END COMPONENT;

  COMPONENT nfp_exp_single
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          nfp_in                          :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          nfp_out                         :   OUT   std_logic_vector(31 DOWNTO 0)  -- single
          );
  END COMPONENT;

  COMPONENT nfp_add_single
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          nfp_in1                         :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          nfp_in2                         :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          nfp_out                         :   OUT   std_logic_vector(31 DOWNTO 0)  -- single
          );
  END COMPONENT;

  COMPONENT nfp_sub_single
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          nfp_in1                         :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          nfp_in2                         :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          nfp_out                         :   OUT   std_logic_vector(31 DOWNTO 0)  -- single
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : nfp_div_single
    USE ENTITY work.nfp_div_single(rtl);

  FOR ALL : nfp_uminus_single
    USE ENTITY work.nfp_uminus_single(rtl);

  FOR ALL : nfp_log10_single
    USE ENTITY work.nfp_log10_single(rtl);

  FOR ALL : nfp_mul_single
    USE ENTITY work.nfp_mul_single(rtl);

  FOR ALL : nfp_exp_single
    USE ENTITY work.nfp_exp_single(rtl);

  FOR ALL : nfp_add_single
    USE ENTITY work.nfp_add_single(rtl);

  FOR ALL : nfp_sub_single
    USE ENTITY work.nfp_sub_single(rtl);

  -- Signals
  SIGNAL delayMatch1_reg                  : std_logic_vector(0 TO 124);  -- ufix1 [125]
  SIGNAL delayMatch1_reg_next             : std_logic_vector(0 TO 124);  -- ufix1 [125]
  SIGNAL Enable_out3                      : std_logic;
  SIGNAL delayMatch_reg                   : vector_of_std_logic_vector32(0 TO 118);  -- ufix32 [119]
  SIGNAL delayMatch_reg_next              : vector_of_std_logic_vector32(0 TO 118);  -- ufix32 [119]
  SIGNAL In2_1                            : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Constant1_out1                   : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Constant17_out1                  : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Subtract4_out1                   : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Constant13_out1                  : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Constant14_out1                  : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Divide4_out1                     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Gain2_out1                       : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Log10_out1                       : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL splx                             : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Constant18_out1                  : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Divide5_out1                     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Math_Function1_out1              : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Constant19_out1                  : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Add3_out1                        : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Divide2_out1                     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL asym_t                           : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Divide1_out1                     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Product4_out1                    : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Product4_out1_bypass             : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Product4_out1_last_value         : std_logic_vector(31 DOWNTO 0);  -- ufix32

BEGIN
  -- Calculate asym_t

  u_nfp_div_comp : nfp_div_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => x,  -- single
              nfp_in2 => Constant14_out1,  -- single
              nfp_out => Divide4_out1  -- single
              );

  u_nfp_uminus_comp : nfp_uminus_single
    PORT MAP( nfp_in => Divide4_out1,  -- single
              nfp_out => Gain2_out1  -- single
              );

  u_nfp_log10_comp : nfp_log10_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => Gain2_out1,  -- single
              nfp_out => Log10_out1  -- single
              );

  u_nfp_mul_comp : nfp_mul_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => Constant13_out1,  -- single
              nfp_in2 => Log10_out1,  -- single
              nfp_out => splx  -- single
              );

  u_nfp_div_comp_1 : nfp_div_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => splx,  -- single
              nfp_in2 => Constant18_out1,  -- single
              nfp_out => Divide5_out1  -- single
              );

  u_nfp_exp_comp : nfp_exp_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => Divide5_out1,  -- single
              nfp_out => Math_Function1_out1  -- single
              );

  u_nfp_add_comp : nfp_add_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => Math_Function1_out1,  -- single
              nfp_in2 => Constant19_out1,  -- single
              nfp_out => Add3_out1  -- single
              );

  u_nfp_div_comp_2 : nfp_div_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => Subtract4_out1,  -- single
              nfp_in2 => Add3_out1,  -- single
              nfp_out => Divide2_out1  -- single
              );

  u_nfp_sub_comp : nfp_sub_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => Constant17_out1,  -- single
              nfp_in2 => Divide2_out1,  -- single
              nfp_out => asym_t  -- single
              );

  u_nfp_div_comp_3 : nfp_div_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => Constant1_out1,  -- single
              nfp_in2 => asym_t,  -- single
              nfp_out => Divide1_out1  -- single
              );

  u_nfp_mul_comp_1 : nfp_mul_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => In2_1,  -- single
              nfp_in2 => Divide1_out1,  -- single
              nfp_out => Product4_out1  -- single
              );

  delayMatch1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch1_reg(0) <= '0';
      delayMatch1_reg(1) <= '0';
      delayMatch1_reg(2) <= '0';
      delayMatch1_reg(3) <= '0';
      delayMatch1_reg(4) <= '0';
      delayMatch1_reg(5) <= '0';
      delayMatch1_reg(6) <= '0';
      delayMatch1_reg(7) <= '0';
      delayMatch1_reg(8) <= '0';
      delayMatch1_reg(9) <= '0';
      delayMatch1_reg(10) <= '0';
      delayMatch1_reg(11) <= '0';
      delayMatch1_reg(12) <= '0';
      delayMatch1_reg(13) <= '0';
      delayMatch1_reg(14) <= '0';
      delayMatch1_reg(15) <= '0';
      delayMatch1_reg(16) <= '0';
      delayMatch1_reg(17) <= '0';
      delayMatch1_reg(18) <= '0';
      delayMatch1_reg(19) <= '0';
      delayMatch1_reg(20) <= '0';
      delayMatch1_reg(21) <= '0';
      delayMatch1_reg(22) <= '0';
      delayMatch1_reg(23) <= '0';
      delayMatch1_reg(24) <= '0';
      delayMatch1_reg(25) <= '0';
      delayMatch1_reg(26) <= '0';
      delayMatch1_reg(27) <= '0';
      delayMatch1_reg(28) <= '0';
      delayMatch1_reg(29) <= '0';
      delayMatch1_reg(30) <= '0';
      delayMatch1_reg(31) <= '0';
      delayMatch1_reg(32) <= '0';
      delayMatch1_reg(33) <= '0';
      delayMatch1_reg(34) <= '0';
      delayMatch1_reg(35) <= '0';
      delayMatch1_reg(36) <= '0';
      delayMatch1_reg(37) <= '0';
      delayMatch1_reg(38) <= '0';
      delayMatch1_reg(39) <= '0';
      delayMatch1_reg(40) <= '0';
      delayMatch1_reg(41) <= '0';
      delayMatch1_reg(42) <= '0';
      delayMatch1_reg(43) <= '0';
      delayMatch1_reg(44) <= '0';
      delayMatch1_reg(45) <= '0';
      delayMatch1_reg(46) <= '0';
      delayMatch1_reg(47) <= '0';
      delayMatch1_reg(48) <= '0';
      delayMatch1_reg(49) <= '0';
      delayMatch1_reg(50) <= '0';
      delayMatch1_reg(51) <= '0';
      delayMatch1_reg(52) <= '0';
      delayMatch1_reg(53) <= '0';
      delayMatch1_reg(54) <= '0';
      delayMatch1_reg(55) <= '0';
      delayMatch1_reg(56) <= '0';
      delayMatch1_reg(57) <= '0';
      delayMatch1_reg(58) <= '0';
      delayMatch1_reg(59) <= '0';
      delayMatch1_reg(60) <= '0';
      delayMatch1_reg(61) <= '0';
      delayMatch1_reg(62) <= '0';
      delayMatch1_reg(63) <= '0';
      delayMatch1_reg(64) <= '0';
      delayMatch1_reg(65) <= '0';
      delayMatch1_reg(66) <= '0';
      delayMatch1_reg(67) <= '0';
      delayMatch1_reg(68) <= '0';
      delayMatch1_reg(69) <= '0';
      delayMatch1_reg(70) <= '0';
      delayMatch1_reg(71) <= '0';
      delayMatch1_reg(72) <= '0';
      delayMatch1_reg(73) <= '0';
      delayMatch1_reg(74) <= '0';
      delayMatch1_reg(75) <= '0';
      delayMatch1_reg(76) <= '0';
      delayMatch1_reg(77) <= '0';
      delayMatch1_reg(78) <= '0';
      delayMatch1_reg(79) <= '0';
      delayMatch1_reg(80) <= '0';
      delayMatch1_reg(81) <= '0';
      delayMatch1_reg(82) <= '0';
      delayMatch1_reg(83) <= '0';
      delayMatch1_reg(84) <= '0';
      delayMatch1_reg(85) <= '0';
      delayMatch1_reg(86) <= '0';
      delayMatch1_reg(87) <= '0';
      delayMatch1_reg(88) <= '0';
      delayMatch1_reg(89) <= '0';
      delayMatch1_reg(90) <= '0';
      delayMatch1_reg(91) <= '0';
      delayMatch1_reg(92) <= '0';
      delayMatch1_reg(93) <= '0';
      delayMatch1_reg(94) <= '0';
      delayMatch1_reg(95) <= '0';
      delayMatch1_reg(96) <= '0';
      delayMatch1_reg(97) <= '0';
      delayMatch1_reg(98) <= '0';
      delayMatch1_reg(99) <= '0';
      delayMatch1_reg(100) <= '0';
      delayMatch1_reg(101) <= '0';
      delayMatch1_reg(102) <= '0';
      delayMatch1_reg(103) <= '0';
      delayMatch1_reg(104) <= '0';
      delayMatch1_reg(105) <= '0';
      delayMatch1_reg(106) <= '0';
      delayMatch1_reg(107) <= '0';
      delayMatch1_reg(108) <= '0';
      delayMatch1_reg(109) <= '0';
      delayMatch1_reg(110) <= '0';
      delayMatch1_reg(111) <= '0';
      delayMatch1_reg(112) <= '0';
      delayMatch1_reg(113) <= '0';
      delayMatch1_reg(114) <= '0';
      delayMatch1_reg(115) <= '0';
      delayMatch1_reg(116) <= '0';
      delayMatch1_reg(117) <= '0';
      delayMatch1_reg(118) <= '0';
      delayMatch1_reg(119) <= '0';
      delayMatch1_reg(120) <= '0';
      delayMatch1_reg(121) <= '0';
      delayMatch1_reg(122) <= '0';
      delayMatch1_reg(123) <= '0';
      delayMatch1_reg(124) <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        delayMatch1_reg(0) <= delayMatch1_reg_next(0);
        delayMatch1_reg(1) <= delayMatch1_reg_next(1);
        delayMatch1_reg(2) <= delayMatch1_reg_next(2);
        delayMatch1_reg(3) <= delayMatch1_reg_next(3);
        delayMatch1_reg(4) <= delayMatch1_reg_next(4);
        delayMatch1_reg(5) <= delayMatch1_reg_next(5);
        delayMatch1_reg(6) <= delayMatch1_reg_next(6);
        delayMatch1_reg(7) <= delayMatch1_reg_next(7);
        delayMatch1_reg(8) <= delayMatch1_reg_next(8);
        delayMatch1_reg(9) <= delayMatch1_reg_next(9);
        delayMatch1_reg(10) <= delayMatch1_reg_next(10);
        delayMatch1_reg(11) <= delayMatch1_reg_next(11);
        delayMatch1_reg(12) <= delayMatch1_reg_next(12);
        delayMatch1_reg(13) <= delayMatch1_reg_next(13);
        delayMatch1_reg(14) <= delayMatch1_reg_next(14);
        delayMatch1_reg(15) <= delayMatch1_reg_next(15);
        delayMatch1_reg(16) <= delayMatch1_reg_next(16);
        delayMatch1_reg(17) <= delayMatch1_reg_next(17);
        delayMatch1_reg(18) <= delayMatch1_reg_next(18);
        delayMatch1_reg(19) <= delayMatch1_reg_next(19);
        delayMatch1_reg(20) <= delayMatch1_reg_next(20);
        delayMatch1_reg(21) <= delayMatch1_reg_next(21);
        delayMatch1_reg(22) <= delayMatch1_reg_next(22);
        delayMatch1_reg(23) <= delayMatch1_reg_next(23);
        delayMatch1_reg(24) <= delayMatch1_reg_next(24);
        delayMatch1_reg(25) <= delayMatch1_reg_next(25);
        delayMatch1_reg(26) <= delayMatch1_reg_next(26);
        delayMatch1_reg(27) <= delayMatch1_reg_next(27);
        delayMatch1_reg(28) <= delayMatch1_reg_next(28);
        delayMatch1_reg(29) <= delayMatch1_reg_next(29);
        delayMatch1_reg(30) <= delayMatch1_reg_next(30);
        delayMatch1_reg(31) <= delayMatch1_reg_next(31);
        delayMatch1_reg(32) <= delayMatch1_reg_next(32);
        delayMatch1_reg(33) <= delayMatch1_reg_next(33);
        delayMatch1_reg(34) <= delayMatch1_reg_next(34);
        delayMatch1_reg(35) <= delayMatch1_reg_next(35);
        delayMatch1_reg(36) <= delayMatch1_reg_next(36);
        delayMatch1_reg(37) <= delayMatch1_reg_next(37);
        delayMatch1_reg(38) <= delayMatch1_reg_next(38);
        delayMatch1_reg(39) <= delayMatch1_reg_next(39);
        delayMatch1_reg(40) <= delayMatch1_reg_next(40);
        delayMatch1_reg(41) <= delayMatch1_reg_next(41);
        delayMatch1_reg(42) <= delayMatch1_reg_next(42);
        delayMatch1_reg(43) <= delayMatch1_reg_next(43);
        delayMatch1_reg(44) <= delayMatch1_reg_next(44);
        delayMatch1_reg(45) <= delayMatch1_reg_next(45);
        delayMatch1_reg(46) <= delayMatch1_reg_next(46);
        delayMatch1_reg(47) <= delayMatch1_reg_next(47);
        delayMatch1_reg(48) <= delayMatch1_reg_next(48);
        delayMatch1_reg(49) <= delayMatch1_reg_next(49);
        delayMatch1_reg(50) <= delayMatch1_reg_next(50);
        delayMatch1_reg(51) <= delayMatch1_reg_next(51);
        delayMatch1_reg(52) <= delayMatch1_reg_next(52);
        delayMatch1_reg(53) <= delayMatch1_reg_next(53);
        delayMatch1_reg(54) <= delayMatch1_reg_next(54);
        delayMatch1_reg(55) <= delayMatch1_reg_next(55);
        delayMatch1_reg(56) <= delayMatch1_reg_next(56);
        delayMatch1_reg(57) <= delayMatch1_reg_next(57);
        delayMatch1_reg(58) <= delayMatch1_reg_next(58);
        delayMatch1_reg(59) <= delayMatch1_reg_next(59);
        delayMatch1_reg(60) <= delayMatch1_reg_next(60);
        delayMatch1_reg(61) <= delayMatch1_reg_next(61);
        delayMatch1_reg(62) <= delayMatch1_reg_next(62);
        delayMatch1_reg(63) <= delayMatch1_reg_next(63);
        delayMatch1_reg(64) <= delayMatch1_reg_next(64);
        delayMatch1_reg(65) <= delayMatch1_reg_next(65);
        delayMatch1_reg(66) <= delayMatch1_reg_next(66);
        delayMatch1_reg(67) <= delayMatch1_reg_next(67);
        delayMatch1_reg(68) <= delayMatch1_reg_next(68);
        delayMatch1_reg(69) <= delayMatch1_reg_next(69);
        delayMatch1_reg(70) <= delayMatch1_reg_next(70);
        delayMatch1_reg(71) <= delayMatch1_reg_next(71);
        delayMatch1_reg(72) <= delayMatch1_reg_next(72);
        delayMatch1_reg(73) <= delayMatch1_reg_next(73);
        delayMatch1_reg(74) <= delayMatch1_reg_next(74);
        delayMatch1_reg(75) <= delayMatch1_reg_next(75);
        delayMatch1_reg(76) <= delayMatch1_reg_next(76);
        delayMatch1_reg(77) <= delayMatch1_reg_next(77);
        delayMatch1_reg(78) <= delayMatch1_reg_next(78);
        delayMatch1_reg(79) <= delayMatch1_reg_next(79);
        delayMatch1_reg(80) <= delayMatch1_reg_next(80);
        delayMatch1_reg(81) <= delayMatch1_reg_next(81);
        delayMatch1_reg(82) <= delayMatch1_reg_next(82);
        delayMatch1_reg(83) <= delayMatch1_reg_next(83);
        delayMatch1_reg(84) <= delayMatch1_reg_next(84);
        delayMatch1_reg(85) <= delayMatch1_reg_next(85);
        delayMatch1_reg(86) <= delayMatch1_reg_next(86);
        delayMatch1_reg(87) <= delayMatch1_reg_next(87);
        delayMatch1_reg(88) <= delayMatch1_reg_next(88);
        delayMatch1_reg(89) <= delayMatch1_reg_next(89);
        delayMatch1_reg(90) <= delayMatch1_reg_next(90);
        delayMatch1_reg(91) <= delayMatch1_reg_next(91);
        delayMatch1_reg(92) <= delayMatch1_reg_next(92);
        delayMatch1_reg(93) <= delayMatch1_reg_next(93);
        delayMatch1_reg(94) <= delayMatch1_reg_next(94);
        delayMatch1_reg(95) <= delayMatch1_reg_next(95);
        delayMatch1_reg(96) <= delayMatch1_reg_next(96);
        delayMatch1_reg(97) <= delayMatch1_reg_next(97);
        delayMatch1_reg(98) <= delayMatch1_reg_next(98);
        delayMatch1_reg(99) <= delayMatch1_reg_next(99);
        delayMatch1_reg(100) <= delayMatch1_reg_next(100);
        delayMatch1_reg(101) <= delayMatch1_reg_next(101);
        delayMatch1_reg(102) <= delayMatch1_reg_next(102);
        delayMatch1_reg(103) <= delayMatch1_reg_next(103);
        delayMatch1_reg(104) <= delayMatch1_reg_next(104);
        delayMatch1_reg(105) <= delayMatch1_reg_next(105);
        delayMatch1_reg(106) <= delayMatch1_reg_next(106);
        delayMatch1_reg(107) <= delayMatch1_reg_next(107);
        delayMatch1_reg(108) <= delayMatch1_reg_next(108);
        delayMatch1_reg(109) <= delayMatch1_reg_next(109);
        delayMatch1_reg(110) <= delayMatch1_reg_next(110);
        delayMatch1_reg(111) <= delayMatch1_reg_next(111);
        delayMatch1_reg(112) <= delayMatch1_reg_next(112);
        delayMatch1_reg(113) <= delayMatch1_reg_next(113);
        delayMatch1_reg(114) <= delayMatch1_reg_next(114);
        delayMatch1_reg(115) <= delayMatch1_reg_next(115);
        delayMatch1_reg(116) <= delayMatch1_reg_next(116);
        delayMatch1_reg(117) <= delayMatch1_reg_next(117);
        delayMatch1_reg(118) <= delayMatch1_reg_next(118);
        delayMatch1_reg(119) <= delayMatch1_reg_next(119);
        delayMatch1_reg(120) <= delayMatch1_reg_next(120);
        delayMatch1_reg(121) <= delayMatch1_reg_next(121);
        delayMatch1_reg(122) <= delayMatch1_reg_next(122);
        delayMatch1_reg(123) <= delayMatch1_reg_next(123);
        delayMatch1_reg(124) <= delayMatch1_reg_next(124);
      END IF;
    END IF;
  END PROCESS delayMatch1_process;

  Enable_out3 <= delayMatch1_reg(124);
  delayMatch1_reg_next(0) <= Enable;
  delayMatch1_reg_next(1) <= delayMatch1_reg(0);
  delayMatch1_reg_next(2) <= delayMatch1_reg(1);
  delayMatch1_reg_next(3) <= delayMatch1_reg(2);
  delayMatch1_reg_next(4) <= delayMatch1_reg(3);
  delayMatch1_reg_next(5) <= delayMatch1_reg(4);
  delayMatch1_reg_next(6) <= delayMatch1_reg(5);
  delayMatch1_reg_next(7) <= delayMatch1_reg(6);
  delayMatch1_reg_next(8) <= delayMatch1_reg(7);
  delayMatch1_reg_next(9) <= delayMatch1_reg(8);
  delayMatch1_reg_next(10) <= delayMatch1_reg(9);
  delayMatch1_reg_next(11) <= delayMatch1_reg(10);
  delayMatch1_reg_next(12) <= delayMatch1_reg(11);
  delayMatch1_reg_next(13) <= delayMatch1_reg(12);
  delayMatch1_reg_next(14) <= delayMatch1_reg(13);
  delayMatch1_reg_next(15) <= delayMatch1_reg(14);
  delayMatch1_reg_next(16) <= delayMatch1_reg(15);
  delayMatch1_reg_next(17) <= delayMatch1_reg(16);
  delayMatch1_reg_next(18) <= delayMatch1_reg(17);
  delayMatch1_reg_next(19) <= delayMatch1_reg(18);
  delayMatch1_reg_next(20) <= delayMatch1_reg(19);
  delayMatch1_reg_next(21) <= delayMatch1_reg(20);
  delayMatch1_reg_next(22) <= delayMatch1_reg(21);
  delayMatch1_reg_next(23) <= delayMatch1_reg(22);
  delayMatch1_reg_next(24) <= delayMatch1_reg(23);
  delayMatch1_reg_next(25) <= delayMatch1_reg(24);
  delayMatch1_reg_next(26) <= delayMatch1_reg(25);
  delayMatch1_reg_next(27) <= delayMatch1_reg(26);
  delayMatch1_reg_next(28) <= delayMatch1_reg(27);
  delayMatch1_reg_next(29) <= delayMatch1_reg(28);
  delayMatch1_reg_next(30) <= delayMatch1_reg(29);
  delayMatch1_reg_next(31) <= delayMatch1_reg(30);
  delayMatch1_reg_next(32) <= delayMatch1_reg(31);
  delayMatch1_reg_next(33) <= delayMatch1_reg(32);
  delayMatch1_reg_next(34) <= delayMatch1_reg(33);
  delayMatch1_reg_next(35) <= delayMatch1_reg(34);
  delayMatch1_reg_next(36) <= delayMatch1_reg(35);
  delayMatch1_reg_next(37) <= delayMatch1_reg(36);
  delayMatch1_reg_next(38) <= delayMatch1_reg(37);
  delayMatch1_reg_next(39) <= delayMatch1_reg(38);
  delayMatch1_reg_next(40) <= delayMatch1_reg(39);
  delayMatch1_reg_next(41) <= delayMatch1_reg(40);
  delayMatch1_reg_next(42) <= delayMatch1_reg(41);
  delayMatch1_reg_next(43) <= delayMatch1_reg(42);
  delayMatch1_reg_next(44) <= delayMatch1_reg(43);
  delayMatch1_reg_next(45) <= delayMatch1_reg(44);
  delayMatch1_reg_next(46) <= delayMatch1_reg(45);
  delayMatch1_reg_next(47) <= delayMatch1_reg(46);
  delayMatch1_reg_next(48) <= delayMatch1_reg(47);
  delayMatch1_reg_next(49) <= delayMatch1_reg(48);
  delayMatch1_reg_next(50) <= delayMatch1_reg(49);
  delayMatch1_reg_next(51) <= delayMatch1_reg(50);
  delayMatch1_reg_next(52) <= delayMatch1_reg(51);
  delayMatch1_reg_next(53) <= delayMatch1_reg(52);
  delayMatch1_reg_next(54) <= delayMatch1_reg(53);
  delayMatch1_reg_next(55) <= delayMatch1_reg(54);
  delayMatch1_reg_next(56) <= delayMatch1_reg(55);
  delayMatch1_reg_next(57) <= delayMatch1_reg(56);
  delayMatch1_reg_next(58) <= delayMatch1_reg(57);
  delayMatch1_reg_next(59) <= delayMatch1_reg(58);
  delayMatch1_reg_next(60) <= delayMatch1_reg(59);
  delayMatch1_reg_next(61) <= delayMatch1_reg(60);
  delayMatch1_reg_next(62) <= delayMatch1_reg(61);
  delayMatch1_reg_next(63) <= delayMatch1_reg(62);
  delayMatch1_reg_next(64) <= delayMatch1_reg(63);
  delayMatch1_reg_next(65) <= delayMatch1_reg(64);
  delayMatch1_reg_next(66) <= delayMatch1_reg(65);
  delayMatch1_reg_next(67) <= delayMatch1_reg(66);
  delayMatch1_reg_next(68) <= delayMatch1_reg(67);
  delayMatch1_reg_next(69) <= delayMatch1_reg(68);
  delayMatch1_reg_next(70) <= delayMatch1_reg(69);
  delayMatch1_reg_next(71) <= delayMatch1_reg(70);
  delayMatch1_reg_next(72) <= delayMatch1_reg(71);
  delayMatch1_reg_next(73) <= delayMatch1_reg(72);
  delayMatch1_reg_next(74) <= delayMatch1_reg(73);
  delayMatch1_reg_next(75) <= delayMatch1_reg(74);
  delayMatch1_reg_next(76) <= delayMatch1_reg(75);
  delayMatch1_reg_next(77) <= delayMatch1_reg(76);
  delayMatch1_reg_next(78) <= delayMatch1_reg(77);
  delayMatch1_reg_next(79) <= delayMatch1_reg(78);
  delayMatch1_reg_next(80) <= delayMatch1_reg(79);
  delayMatch1_reg_next(81) <= delayMatch1_reg(80);
  delayMatch1_reg_next(82) <= delayMatch1_reg(81);
  delayMatch1_reg_next(83) <= delayMatch1_reg(82);
  delayMatch1_reg_next(84) <= delayMatch1_reg(83);
  delayMatch1_reg_next(85) <= delayMatch1_reg(84);
  delayMatch1_reg_next(86) <= delayMatch1_reg(85);
  delayMatch1_reg_next(87) <= delayMatch1_reg(86);
  delayMatch1_reg_next(88) <= delayMatch1_reg(87);
  delayMatch1_reg_next(89) <= delayMatch1_reg(88);
  delayMatch1_reg_next(90) <= delayMatch1_reg(89);
  delayMatch1_reg_next(91) <= delayMatch1_reg(90);
  delayMatch1_reg_next(92) <= delayMatch1_reg(91);
  delayMatch1_reg_next(93) <= delayMatch1_reg(92);
  delayMatch1_reg_next(94) <= delayMatch1_reg(93);
  delayMatch1_reg_next(95) <= delayMatch1_reg(94);
  delayMatch1_reg_next(96) <= delayMatch1_reg(95);
  delayMatch1_reg_next(97) <= delayMatch1_reg(96);
  delayMatch1_reg_next(98) <= delayMatch1_reg(97);
  delayMatch1_reg_next(99) <= delayMatch1_reg(98);
  delayMatch1_reg_next(100) <= delayMatch1_reg(99);
  delayMatch1_reg_next(101) <= delayMatch1_reg(100);
  delayMatch1_reg_next(102) <= delayMatch1_reg(101);
  delayMatch1_reg_next(103) <= delayMatch1_reg(102);
  delayMatch1_reg_next(104) <= delayMatch1_reg(103);
  delayMatch1_reg_next(105) <= delayMatch1_reg(104);
  delayMatch1_reg_next(106) <= delayMatch1_reg(105);
  delayMatch1_reg_next(107) <= delayMatch1_reg(106);
  delayMatch1_reg_next(108) <= delayMatch1_reg(107);
  delayMatch1_reg_next(109) <= delayMatch1_reg(108);
  delayMatch1_reg_next(110) <= delayMatch1_reg(109);
  delayMatch1_reg_next(111) <= delayMatch1_reg(110);
  delayMatch1_reg_next(112) <= delayMatch1_reg(111);
  delayMatch1_reg_next(113) <= delayMatch1_reg(112);
  delayMatch1_reg_next(114) <= delayMatch1_reg(113);
  delayMatch1_reg_next(115) <= delayMatch1_reg(114);
  delayMatch1_reg_next(116) <= delayMatch1_reg(115);
  delayMatch1_reg_next(117) <= delayMatch1_reg(116);
  delayMatch1_reg_next(118) <= delayMatch1_reg(117);
  delayMatch1_reg_next(119) <= delayMatch1_reg(118);
  delayMatch1_reg_next(120) <= delayMatch1_reg(119);
  delayMatch1_reg_next(121) <= delayMatch1_reg(120);
  delayMatch1_reg_next(122) <= delayMatch1_reg(121);
  delayMatch1_reg_next(123) <= delayMatch1_reg(122);
  delayMatch1_reg_next(124) <= delayMatch1_reg(123);

  delayMatch_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch_reg(0) <= X"00000000";
      delayMatch_reg(1) <= X"00000000";
      delayMatch_reg(2) <= X"00000000";
      delayMatch_reg(3) <= X"00000000";
      delayMatch_reg(4) <= X"00000000";
      delayMatch_reg(5) <= X"00000000";
      delayMatch_reg(6) <= X"00000000";
      delayMatch_reg(7) <= X"00000000";
      delayMatch_reg(8) <= X"00000000";
      delayMatch_reg(9) <= X"00000000";
      delayMatch_reg(10) <= X"00000000";
      delayMatch_reg(11) <= X"00000000";
      delayMatch_reg(12) <= X"00000000";
      delayMatch_reg(13) <= X"00000000";
      delayMatch_reg(14) <= X"00000000";
      delayMatch_reg(15) <= X"00000000";
      delayMatch_reg(16) <= X"00000000";
      delayMatch_reg(17) <= X"00000000";
      delayMatch_reg(18) <= X"00000000";
      delayMatch_reg(19) <= X"00000000";
      delayMatch_reg(20) <= X"00000000";
      delayMatch_reg(21) <= X"00000000";
      delayMatch_reg(22) <= X"00000000";
      delayMatch_reg(23) <= X"00000000";
      delayMatch_reg(24) <= X"00000000";
      delayMatch_reg(25) <= X"00000000";
      delayMatch_reg(26) <= X"00000000";
      delayMatch_reg(27) <= X"00000000";
      delayMatch_reg(28) <= X"00000000";
      delayMatch_reg(29) <= X"00000000";
      delayMatch_reg(30) <= X"00000000";
      delayMatch_reg(31) <= X"00000000";
      delayMatch_reg(32) <= X"00000000";
      delayMatch_reg(33) <= X"00000000";
      delayMatch_reg(34) <= X"00000000";
      delayMatch_reg(35) <= X"00000000";
      delayMatch_reg(36) <= X"00000000";
      delayMatch_reg(37) <= X"00000000";
      delayMatch_reg(38) <= X"00000000";
      delayMatch_reg(39) <= X"00000000";
      delayMatch_reg(40) <= X"00000000";
      delayMatch_reg(41) <= X"00000000";
      delayMatch_reg(42) <= X"00000000";
      delayMatch_reg(43) <= X"00000000";
      delayMatch_reg(44) <= X"00000000";
      delayMatch_reg(45) <= X"00000000";
      delayMatch_reg(46) <= X"00000000";
      delayMatch_reg(47) <= X"00000000";
      delayMatch_reg(48) <= X"00000000";
      delayMatch_reg(49) <= X"00000000";
      delayMatch_reg(50) <= X"00000000";
      delayMatch_reg(51) <= X"00000000";
      delayMatch_reg(52) <= X"00000000";
      delayMatch_reg(53) <= X"00000000";
      delayMatch_reg(54) <= X"00000000";
      delayMatch_reg(55) <= X"00000000";
      delayMatch_reg(56) <= X"00000000";
      delayMatch_reg(57) <= X"00000000";
      delayMatch_reg(58) <= X"00000000";
      delayMatch_reg(59) <= X"00000000";
      delayMatch_reg(60) <= X"00000000";
      delayMatch_reg(61) <= X"00000000";
      delayMatch_reg(62) <= X"00000000";
      delayMatch_reg(63) <= X"00000000";
      delayMatch_reg(64) <= X"00000000";
      delayMatch_reg(65) <= X"00000000";
      delayMatch_reg(66) <= X"00000000";
      delayMatch_reg(67) <= X"00000000";
      delayMatch_reg(68) <= X"00000000";
      delayMatch_reg(69) <= X"00000000";
      delayMatch_reg(70) <= X"00000000";
      delayMatch_reg(71) <= X"00000000";
      delayMatch_reg(72) <= X"00000000";
      delayMatch_reg(73) <= X"00000000";
      delayMatch_reg(74) <= X"00000000";
      delayMatch_reg(75) <= X"00000000";
      delayMatch_reg(76) <= X"00000000";
      delayMatch_reg(77) <= X"00000000";
      delayMatch_reg(78) <= X"00000000";
      delayMatch_reg(79) <= X"00000000";
      delayMatch_reg(80) <= X"00000000";
      delayMatch_reg(81) <= X"00000000";
      delayMatch_reg(82) <= X"00000000";
      delayMatch_reg(83) <= X"00000000";
      delayMatch_reg(84) <= X"00000000";
      delayMatch_reg(85) <= X"00000000";
      delayMatch_reg(86) <= X"00000000";
      delayMatch_reg(87) <= X"00000000";
      delayMatch_reg(88) <= X"00000000";
      delayMatch_reg(89) <= X"00000000";
      delayMatch_reg(90) <= X"00000000";
      delayMatch_reg(91) <= X"00000000";
      delayMatch_reg(92) <= X"00000000";
      delayMatch_reg(93) <= X"00000000";
      delayMatch_reg(94) <= X"00000000";
      delayMatch_reg(95) <= X"00000000";
      delayMatch_reg(96) <= X"00000000";
      delayMatch_reg(97) <= X"00000000";
      delayMatch_reg(98) <= X"00000000";
      delayMatch_reg(99) <= X"00000000";
      delayMatch_reg(100) <= X"00000000";
      delayMatch_reg(101) <= X"00000000";
      delayMatch_reg(102) <= X"00000000";
      delayMatch_reg(103) <= X"00000000";
      delayMatch_reg(104) <= X"00000000";
      delayMatch_reg(105) <= X"00000000";
      delayMatch_reg(106) <= X"00000000";
      delayMatch_reg(107) <= X"00000000";
      delayMatch_reg(108) <= X"00000000";
      delayMatch_reg(109) <= X"00000000";
      delayMatch_reg(110) <= X"00000000";
      delayMatch_reg(111) <= X"00000000";
      delayMatch_reg(112) <= X"00000000";
      delayMatch_reg(113) <= X"00000000";
      delayMatch_reg(114) <= X"00000000";
      delayMatch_reg(115) <= X"00000000";
      delayMatch_reg(116) <= X"00000000";
      delayMatch_reg(117) <= X"00000000";
      delayMatch_reg(118) <= X"00000000";
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        delayMatch_reg(0) <= delayMatch_reg_next(0);
        delayMatch_reg(1) <= delayMatch_reg_next(1);
        delayMatch_reg(2) <= delayMatch_reg_next(2);
        delayMatch_reg(3) <= delayMatch_reg_next(3);
        delayMatch_reg(4) <= delayMatch_reg_next(4);
        delayMatch_reg(5) <= delayMatch_reg_next(5);
        delayMatch_reg(6) <= delayMatch_reg_next(6);
        delayMatch_reg(7) <= delayMatch_reg_next(7);
        delayMatch_reg(8) <= delayMatch_reg_next(8);
        delayMatch_reg(9) <= delayMatch_reg_next(9);
        delayMatch_reg(10) <= delayMatch_reg_next(10);
        delayMatch_reg(11) <= delayMatch_reg_next(11);
        delayMatch_reg(12) <= delayMatch_reg_next(12);
        delayMatch_reg(13) <= delayMatch_reg_next(13);
        delayMatch_reg(14) <= delayMatch_reg_next(14);
        delayMatch_reg(15) <= delayMatch_reg_next(15);
        delayMatch_reg(16) <= delayMatch_reg_next(16);
        delayMatch_reg(17) <= delayMatch_reg_next(17);
        delayMatch_reg(18) <= delayMatch_reg_next(18);
        delayMatch_reg(19) <= delayMatch_reg_next(19);
        delayMatch_reg(20) <= delayMatch_reg_next(20);
        delayMatch_reg(21) <= delayMatch_reg_next(21);
        delayMatch_reg(22) <= delayMatch_reg_next(22);
        delayMatch_reg(23) <= delayMatch_reg_next(23);
        delayMatch_reg(24) <= delayMatch_reg_next(24);
        delayMatch_reg(25) <= delayMatch_reg_next(25);
        delayMatch_reg(26) <= delayMatch_reg_next(26);
        delayMatch_reg(27) <= delayMatch_reg_next(27);
        delayMatch_reg(28) <= delayMatch_reg_next(28);
        delayMatch_reg(29) <= delayMatch_reg_next(29);
        delayMatch_reg(30) <= delayMatch_reg_next(30);
        delayMatch_reg(31) <= delayMatch_reg_next(31);
        delayMatch_reg(32) <= delayMatch_reg_next(32);
        delayMatch_reg(33) <= delayMatch_reg_next(33);
        delayMatch_reg(34) <= delayMatch_reg_next(34);
        delayMatch_reg(35) <= delayMatch_reg_next(35);
        delayMatch_reg(36) <= delayMatch_reg_next(36);
        delayMatch_reg(37) <= delayMatch_reg_next(37);
        delayMatch_reg(38) <= delayMatch_reg_next(38);
        delayMatch_reg(39) <= delayMatch_reg_next(39);
        delayMatch_reg(40) <= delayMatch_reg_next(40);
        delayMatch_reg(41) <= delayMatch_reg_next(41);
        delayMatch_reg(42) <= delayMatch_reg_next(42);
        delayMatch_reg(43) <= delayMatch_reg_next(43);
        delayMatch_reg(44) <= delayMatch_reg_next(44);
        delayMatch_reg(45) <= delayMatch_reg_next(45);
        delayMatch_reg(46) <= delayMatch_reg_next(46);
        delayMatch_reg(47) <= delayMatch_reg_next(47);
        delayMatch_reg(48) <= delayMatch_reg_next(48);
        delayMatch_reg(49) <= delayMatch_reg_next(49);
        delayMatch_reg(50) <= delayMatch_reg_next(50);
        delayMatch_reg(51) <= delayMatch_reg_next(51);
        delayMatch_reg(52) <= delayMatch_reg_next(52);
        delayMatch_reg(53) <= delayMatch_reg_next(53);
        delayMatch_reg(54) <= delayMatch_reg_next(54);
        delayMatch_reg(55) <= delayMatch_reg_next(55);
        delayMatch_reg(56) <= delayMatch_reg_next(56);
        delayMatch_reg(57) <= delayMatch_reg_next(57);
        delayMatch_reg(58) <= delayMatch_reg_next(58);
        delayMatch_reg(59) <= delayMatch_reg_next(59);
        delayMatch_reg(60) <= delayMatch_reg_next(60);
        delayMatch_reg(61) <= delayMatch_reg_next(61);
        delayMatch_reg(62) <= delayMatch_reg_next(62);
        delayMatch_reg(63) <= delayMatch_reg_next(63);
        delayMatch_reg(64) <= delayMatch_reg_next(64);
        delayMatch_reg(65) <= delayMatch_reg_next(65);
        delayMatch_reg(66) <= delayMatch_reg_next(66);
        delayMatch_reg(67) <= delayMatch_reg_next(67);
        delayMatch_reg(68) <= delayMatch_reg_next(68);
        delayMatch_reg(69) <= delayMatch_reg_next(69);
        delayMatch_reg(70) <= delayMatch_reg_next(70);
        delayMatch_reg(71) <= delayMatch_reg_next(71);
        delayMatch_reg(72) <= delayMatch_reg_next(72);
        delayMatch_reg(73) <= delayMatch_reg_next(73);
        delayMatch_reg(74) <= delayMatch_reg_next(74);
        delayMatch_reg(75) <= delayMatch_reg_next(75);
        delayMatch_reg(76) <= delayMatch_reg_next(76);
        delayMatch_reg(77) <= delayMatch_reg_next(77);
        delayMatch_reg(78) <= delayMatch_reg_next(78);
        delayMatch_reg(79) <= delayMatch_reg_next(79);
        delayMatch_reg(80) <= delayMatch_reg_next(80);
        delayMatch_reg(81) <= delayMatch_reg_next(81);
        delayMatch_reg(82) <= delayMatch_reg_next(82);
        delayMatch_reg(83) <= delayMatch_reg_next(83);
        delayMatch_reg(84) <= delayMatch_reg_next(84);
        delayMatch_reg(85) <= delayMatch_reg_next(85);
        delayMatch_reg(86) <= delayMatch_reg_next(86);
        delayMatch_reg(87) <= delayMatch_reg_next(87);
        delayMatch_reg(88) <= delayMatch_reg_next(88);
        delayMatch_reg(89) <= delayMatch_reg_next(89);
        delayMatch_reg(90) <= delayMatch_reg_next(90);
        delayMatch_reg(91) <= delayMatch_reg_next(91);
        delayMatch_reg(92) <= delayMatch_reg_next(92);
        delayMatch_reg(93) <= delayMatch_reg_next(93);
        delayMatch_reg(94) <= delayMatch_reg_next(94);
        delayMatch_reg(95) <= delayMatch_reg_next(95);
        delayMatch_reg(96) <= delayMatch_reg_next(96);
        delayMatch_reg(97) <= delayMatch_reg_next(97);
        delayMatch_reg(98) <= delayMatch_reg_next(98);
        delayMatch_reg(99) <= delayMatch_reg_next(99);
        delayMatch_reg(100) <= delayMatch_reg_next(100);
        delayMatch_reg(101) <= delayMatch_reg_next(101);
        delayMatch_reg(102) <= delayMatch_reg_next(102);
        delayMatch_reg(103) <= delayMatch_reg_next(103);
        delayMatch_reg(104) <= delayMatch_reg_next(104);
        delayMatch_reg(105) <= delayMatch_reg_next(105);
        delayMatch_reg(106) <= delayMatch_reg_next(106);
        delayMatch_reg(107) <= delayMatch_reg_next(107);
        delayMatch_reg(108) <= delayMatch_reg_next(108);
        delayMatch_reg(109) <= delayMatch_reg_next(109);
        delayMatch_reg(110) <= delayMatch_reg_next(110);
        delayMatch_reg(111) <= delayMatch_reg_next(111);
        delayMatch_reg(112) <= delayMatch_reg_next(112);
        delayMatch_reg(113) <= delayMatch_reg_next(113);
        delayMatch_reg(114) <= delayMatch_reg_next(114);
        delayMatch_reg(115) <= delayMatch_reg_next(115);
        delayMatch_reg(116) <= delayMatch_reg_next(116);
        delayMatch_reg(117) <= delayMatch_reg_next(117);
        delayMatch_reg(118) <= delayMatch_reg_next(118);
      END IF;
    END IF;
  END PROCESS delayMatch_process;

  In2_1 <= delayMatch_reg(118);
  delayMatch_reg_next(0) <= In2;
  delayMatch_reg_next(1) <= delayMatch_reg(0);
  delayMatch_reg_next(2) <= delayMatch_reg(1);
  delayMatch_reg_next(3) <= delayMatch_reg(2);
  delayMatch_reg_next(4) <= delayMatch_reg(3);
  delayMatch_reg_next(5) <= delayMatch_reg(4);
  delayMatch_reg_next(6) <= delayMatch_reg(5);
  delayMatch_reg_next(7) <= delayMatch_reg(6);
  delayMatch_reg_next(8) <= delayMatch_reg(7);
  delayMatch_reg_next(9) <= delayMatch_reg(8);
  delayMatch_reg_next(10) <= delayMatch_reg(9);
  delayMatch_reg_next(11) <= delayMatch_reg(10);
  delayMatch_reg_next(12) <= delayMatch_reg(11);
  delayMatch_reg_next(13) <= delayMatch_reg(12);
  delayMatch_reg_next(14) <= delayMatch_reg(13);
  delayMatch_reg_next(15) <= delayMatch_reg(14);
  delayMatch_reg_next(16) <= delayMatch_reg(15);
  delayMatch_reg_next(17) <= delayMatch_reg(16);
  delayMatch_reg_next(18) <= delayMatch_reg(17);
  delayMatch_reg_next(19) <= delayMatch_reg(18);
  delayMatch_reg_next(20) <= delayMatch_reg(19);
  delayMatch_reg_next(21) <= delayMatch_reg(20);
  delayMatch_reg_next(22) <= delayMatch_reg(21);
  delayMatch_reg_next(23) <= delayMatch_reg(22);
  delayMatch_reg_next(24) <= delayMatch_reg(23);
  delayMatch_reg_next(25) <= delayMatch_reg(24);
  delayMatch_reg_next(26) <= delayMatch_reg(25);
  delayMatch_reg_next(27) <= delayMatch_reg(26);
  delayMatch_reg_next(28) <= delayMatch_reg(27);
  delayMatch_reg_next(29) <= delayMatch_reg(28);
  delayMatch_reg_next(30) <= delayMatch_reg(29);
  delayMatch_reg_next(31) <= delayMatch_reg(30);
  delayMatch_reg_next(32) <= delayMatch_reg(31);
  delayMatch_reg_next(33) <= delayMatch_reg(32);
  delayMatch_reg_next(34) <= delayMatch_reg(33);
  delayMatch_reg_next(35) <= delayMatch_reg(34);
  delayMatch_reg_next(36) <= delayMatch_reg(35);
  delayMatch_reg_next(37) <= delayMatch_reg(36);
  delayMatch_reg_next(38) <= delayMatch_reg(37);
  delayMatch_reg_next(39) <= delayMatch_reg(38);
  delayMatch_reg_next(40) <= delayMatch_reg(39);
  delayMatch_reg_next(41) <= delayMatch_reg(40);
  delayMatch_reg_next(42) <= delayMatch_reg(41);
  delayMatch_reg_next(43) <= delayMatch_reg(42);
  delayMatch_reg_next(44) <= delayMatch_reg(43);
  delayMatch_reg_next(45) <= delayMatch_reg(44);
  delayMatch_reg_next(46) <= delayMatch_reg(45);
  delayMatch_reg_next(47) <= delayMatch_reg(46);
  delayMatch_reg_next(48) <= delayMatch_reg(47);
  delayMatch_reg_next(49) <= delayMatch_reg(48);
  delayMatch_reg_next(50) <= delayMatch_reg(49);
  delayMatch_reg_next(51) <= delayMatch_reg(50);
  delayMatch_reg_next(52) <= delayMatch_reg(51);
  delayMatch_reg_next(53) <= delayMatch_reg(52);
  delayMatch_reg_next(54) <= delayMatch_reg(53);
  delayMatch_reg_next(55) <= delayMatch_reg(54);
  delayMatch_reg_next(56) <= delayMatch_reg(55);
  delayMatch_reg_next(57) <= delayMatch_reg(56);
  delayMatch_reg_next(58) <= delayMatch_reg(57);
  delayMatch_reg_next(59) <= delayMatch_reg(58);
  delayMatch_reg_next(60) <= delayMatch_reg(59);
  delayMatch_reg_next(61) <= delayMatch_reg(60);
  delayMatch_reg_next(62) <= delayMatch_reg(61);
  delayMatch_reg_next(63) <= delayMatch_reg(62);
  delayMatch_reg_next(64) <= delayMatch_reg(63);
  delayMatch_reg_next(65) <= delayMatch_reg(64);
  delayMatch_reg_next(66) <= delayMatch_reg(65);
  delayMatch_reg_next(67) <= delayMatch_reg(66);
  delayMatch_reg_next(68) <= delayMatch_reg(67);
  delayMatch_reg_next(69) <= delayMatch_reg(68);
  delayMatch_reg_next(70) <= delayMatch_reg(69);
  delayMatch_reg_next(71) <= delayMatch_reg(70);
  delayMatch_reg_next(72) <= delayMatch_reg(71);
  delayMatch_reg_next(73) <= delayMatch_reg(72);
  delayMatch_reg_next(74) <= delayMatch_reg(73);
  delayMatch_reg_next(75) <= delayMatch_reg(74);
  delayMatch_reg_next(76) <= delayMatch_reg(75);
  delayMatch_reg_next(77) <= delayMatch_reg(76);
  delayMatch_reg_next(78) <= delayMatch_reg(77);
  delayMatch_reg_next(79) <= delayMatch_reg(78);
  delayMatch_reg_next(80) <= delayMatch_reg(79);
  delayMatch_reg_next(81) <= delayMatch_reg(80);
  delayMatch_reg_next(82) <= delayMatch_reg(81);
  delayMatch_reg_next(83) <= delayMatch_reg(82);
  delayMatch_reg_next(84) <= delayMatch_reg(83);
  delayMatch_reg_next(85) <= delayMatch_reg(84);
  delayMatch_reg_next(86) <= delayMatch_reg(85);
  delayMatch_reg_next(87) <= delayMatch_reg(86);
  delayMatch_reg_next(88) <= delayMatch_reg(87);
  delayMatch_reg_next(89) <= delayMatch_reg(88);
  delayMatch_reg_next(90) <= delayMatch_reg(89);
  delayMatch_reg_next(91) <= delayMatch_reg(90);
  delayMatch_reg_next(92) <= delayMatch_reg(91);
  delayMatch_reg_next(93) <= delayMatch_reg(92);
  delayMatch_reg_next(94) <= delayMatch_reg(93);
  delayMatch_reg_next(95) <= delayMatch_reg(94);
  delayMatch_reg_next(96) <= delayMatch_reg(95);
  delayMatch_reg_next(97) <= delayMatch_reg(96);
  delayMatch_reg_next(98) <= delayMatch_reg(97);
  delayMatch_reg_next(99) <= delayMatch_reg(98);
  delayMatch_reg_next(100) <= delayMatch_reg(99);
  delayMatch_reg_next(101) <= delayMatch_reg(100);
  delayMatch_reg_next(102) <= delayMatch_reg(101);
  delayMatch_reg_next(103) <= delayMatch_reg(102);
  delayMatch_reg_next(104) <= delayMatch_reg(103);
  delayMatch_reg_next(105) <= delayMatch_reg(104);
  delayMatch_reg_next(106) <= delayMatch_reg(105);
  delayMatch_reg_next(107) <= delayMatch_reg(106);
  delayMatch_reg_next(108) <= delayMatch_reg(107);
  delayMatch_reg_next(109) <= delayMatch_reg(108);
  delayMatch_reg_next(110) <= delayMatch_reg(109);
  delayMatch_reg_next(111) <= delayMatch_reg(110);
  delayMatch_reg_next(112) <= delayMatch_reg(111);
  delayMatch_reg_next(113) <= delayMatch_reg(112);
  delayMatch_reg_next(114) <= delayMatch_reg(113);
  delayMatch_reg_next(115) <= delayMatch_reg(114);
  delayMatch_reg_next(116) <= delayMatch_reg(115);
  delayMatch_reg_next(117) <= delayMatch_reg(116);
  delayMatch_reg_next(118) <= delayMatch_reg(117);

  Constant1_out1 <= X"bf800000";

  Constant17_out1 <= X"40400000";

  Subtract4_out1 <= X"40000000";

  Constant13_out1 <= X"41a00000";

  Constant14_out1 <= X"37a7c5ac";

  Constant18_out1 <= X"40a00000";

  Constant19_out1 <= X"3f800000";

  Out1_bypass_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Product4_out1_last_value <= X"00000000";
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Product4_out1_last_value <= Product4_out1_bypass;
      END IF;
    END IF;
  END PROCESS Out1_bypass_process;


  
  Product4_out1_bypass <= Product4_out1_last_value WHEN Enable_out3 = '0' ELSE
      Product4_out1;

  Out1 <= Product4_out1_bypass;

END rtl;

