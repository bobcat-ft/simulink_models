-- ------------------------------------------------------------
-- 
-- File Name: /mnt/data/trevor/research/NIH_SBIR_R44_DC015443/simulink_models/models/delay_and_sum_beamformer/hdlsrc/DSBF/DSBF_CIC_Decimation
-- Generated by MATLAB 9.7 and HDL Coder 3.15
-- 
-- ------------------------------------------------------------
-- 
-- 
-- ------------------------------------------------------------
-- 
-- Module: DSBF_CIC_Decimation
-- Source Path: /DSBF_CIC_Decimation
-- 
-- ------------------------------------------------------------
-- 
-- HDL Implementation    : Fully parallel



LIBRARY IEEE;
USE IEEE.std_logic_1164.all;
USE IEEE.numeric_std.ALL;

ENTITY DSBF_CIC_Decimation IS
   PORT( clk                             :   IN    std_logic; 
         enb_1_128_1                     :   IN    std_logic; 
         reset                           :   IN    std_logic; 
         DSBF_CIC_Decimation_in          :   IN    std_logic_vector(31 DOWNTO 0); -- sfix32_En28
         DSBF_CIC_Decimation_out         :   OUT   std_logic_vector(39 DOWNTO 0)  -- sfix40_En28
         );

END DSBF_CIC_Decimation;


----------------------------------------------------------------
--Module Architecture: DSBF_CIC_Decimation
----------------------------------------------------------------
ARCHITECTURE rtl OF DSBF_CIC_Decimation IS
  -- Local Functions
  -- Type Definitions
  -- Constants
  -- Signals
  SIGNAL input_typeconvert                : signed(31 DOWNTO 0); -- sfix32_En28
  SIGNAL cur_count                        : unsigned(3 DOWNTO 0); -- ufix4
  SIGNAL phase_0                          : std_logic; -- boolean
  --   -- Section 1 Signals 
  SIGNAL section_in1                      : signed(31 DOWNTO 0); -- sfix32_En28
  SIGNAL section_cast1                    : signed(39 DOWNTO 0); -- sfix40_En28
  SIGNAL sum1                             : signed(39 DOWNTO 0); -- sfix40_En28
  SIGNAL section_out1                     : signed(39 DOWNTO 0); -- sfix40_En28
  SIGNAL add_cast                         : signed(39 DOWNTO 0); -- sfix40_En28
  SIGNAL add_cast_1                       : signed(39 DOWNTO 0); -- sfix40_En28
  SIGNAL add_temp                         : signed(40 DOWNTO 0); -- sfix41_En28
  --   -- Section 2 Signals 
  SIGNAL section_in2                      : signed(39 DOWNTO 0); -- sfix40_En28
  SIGNAL sum2                             : signed(39 DOWNTO 0); -- sfix40_En28
  SIGNAL section_out2                     : signed(39 DOWNTO 0); -- sfix40_En28
  SIGNAL add_cast_2                       : signed(39 DOWNTO 0); -- sfix40_En28
  SIGNAL add_cast_3                       : signed(39 DOWNTO 0); -- sfix40_En28
  SIGNAL add_temp_1                       : signed(40 DOWNTO 0); -- sfix41_En28
  --   -- Section 3 Signals 
  SIGNAL section_in3                      : signed(39 DOWNTO 0); -- sfix40_En28
  SIGNAL diff1                            : signed(39 DOWNTO 0); -- sfix40_En28
  SIGNAL section_out3                     : signed(39 DOWNTO 0); -- sfix40_En28
  SIGNAL sub_cast                         : signed(39 DOWNTO 0); -- sfix40_En28
  SIGNAL sub_cast_1                       : signed(39 DOWNTO 0); -- sfix40_En28
  SIGNAL sub_temp                         : signed(40 DOWNTO 0); -- sfix41_En28
  --   -- Section 4 Signals 
  SIGNAL section_in4                      : signed(39 DOWNTO 0); -- sfix40_En28
  SIGNAL diff2                            : signed(39 DOWNTO 0); -- sfix40_En28
  SIGNAL section_out4                     : signed(39 DOWNTO 0); -- sfix40_En28
  SIGNAL sub_cast_2                       : signed(39 DOWNTO 0); -- sfix40_En28
  SIGNAL sub_cast_3                       : signed(39 DOWNTO 0); -- sfix40_En28
  SIGNAL sub_temp_1                       : signed(40 DOWNTO 0); -- sfix41_En28
  SIGNAL regout                           : signed(39 DOWNTO 0); -- sfix40_En28
  SIGNAL muxout                           : signed(39 DOWNTO 0); -- sfix40_En28


BEGIN

  -- Block Statements
  --   ------------------ CE Output Generation ------------------

  ce_output : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      cur_count <= to_unsigned(0, 4);
    ELSIF rising_edge(clk) THEN
      IF enb_1_128_1 = '1' THEN
        IF cur_count >= to_unsigned(15, 4) THEN
          cur_count <= to_unsigned(0, 4);
        ELSE
          cur_count <= cur_count + to_unsigned(1, 4);
        END IF;
      END IF;
    END IF; 
  END PROCESS ce_output;

  phase_0 <= '1' WHEN cur_count = to_unsigned(0, 4) AND enb_1_128_1 = '1' ELSE '0';

  input_typeconvert <= signed(DSBF_CIC_Decimation_in);

  --   ------------------ Section # 1 : Integrator ------------------

  section_in1 <= input_typeconvert;

  section_cast1 <= resize(section_in1, 40);

  add_cast <= section_cast1;
  add_cast_1 <= section_out1;
  add_temp <= resize(add_cast, 41) + resize(add_cast_1, 41);
  sum1 <= add_temp(39 DOWNTO 0);

  integrator_delay_section1 : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      section_out1 <= (OTHERS => '0');
    ELSIF rising_edge(clk) THEN
      IF enb_1_128_1 = '1' THEN
        section_out1 <= sum1;
      END IF;
    END IF; 
  END PROCESS integrator_delay_section1;

  --   ------------------ Section # 2 : Integrator ------------------

  section_in2 <= section_out1;

  add_cast_2 <= section_in2;
  add_cast_3 <= section_out2;
  add_temp_1 <= resize(add_cast_2, 41) + resize(add_cast_3, 41);
  sum2 <= add_temp_1(39 DOWNTO 0);

  integrator_delay_section2 : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      section_out2 <= (OTHERS => '0');
    ELSIF rising_edge(clk) THEN
      IF enb_1_128_1 = '1' THEN
        section_out2 <= sum2;
      END IF;
    END IF; 
  END PROCESS integrator_delay_section2;

  --   ------------------ Section # 3 : Comb ------------------

  section_in3 <= section_out2;

  sub_cast <= section_in3;
  sub_cast_1 <= diff1;
  sub_temp <= resize(sub_cast, 41) - resize(sub_cast_1, 41);
  section_out3 <= sub_temp(39 DOWNTO 0);

  comb_delay_section3 : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      diff1 <= (OTHERS => '0');
    ELSIF rising_edge(clk) THEN
      IF phase_0 = '1' THEN
        diff1 <= section_in3;
      END IF;
    END IF; 
  END PROCESS comb_delay_section3;

  --   ------------------ Section # 4 : Comb ------------------

  section_in4 <= section_out3;

  sub_cast_2 <= section_in4;
  sub_cast_3 <= diff2;
  sub_temp_1 <= resize(sub_cast_2, 41) - resize(sub_cast_3, 41);
  section_out4 <= sub_temp_1(39 DOWNTO 0);

  comb_delay_section4 : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      diff2 <= (OTHERS => '0');
    ELSIF rising_edge(clk) THEN
      IF phase_0 = '1' THEN
        diff2 <= section_in4;
      END IF;
    END IF; 
  END PROCESS comb_delay_section4;

  DataHoldRegister_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      regout <= (OTHERS => '0');
    ELSIF rising_edge(clk) THEN
      IF phase_0 = '1' THEN
        regout <= section_out4;
      END IF;
    END IF; 
  END PROCESS DataHoldRegister_process;

  muxout <= section_out4 WHEN ( phase_0 = '1' ) ELSE
            regout;
  -- Assignment Statements
  DSBF_CIC_Decimation_out <= std_logic_vector(muxout);
END rtl;
