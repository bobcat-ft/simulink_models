-- -------------------------------------------------------------
-- 
-- File Name: /mnt/data/trevor/research/NIH_SBIR_R44_DC015443/simulink_models/models/delay_and_sum_beamformer/hdlsrc/DSBF/DSBF_Addressable_Delay_Line_block3.vhd
-- 
-- Generated by MATLAB 9.7 and HDL Coder 3.15
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: DSBF_Addressable_Delay_Line_block3
-- Source Path: DSBF/dataplane/Avalon Data Processing/delay signals/delay signal/CIC interpolation compensator/Addressable 
-- Delay Lin
-- Hierarchy Level: 5
-- 
-- Addressable Delay Line
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY DSBF_Addressable_Delay_Line_block3 IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb_1_2048_0                      :   IN    std_logic;
        dataIn                            :   IN    std_logic_vector(31 DOWNTO 0);  -- sfix32_En28
        validIn                           :   IN    std_logic;
        shiftEn                           :   IN    std_logic;
        rdAddr                            :   IN    std_logic_vector(3 DOWNTO 0);  -- ufix4
        delayLineEnd                      :   OUT   std_logic_vector(31 DOWNTO 0);  -- sfix32_En28
        dataOut                           :   OUT   std_logic_vector(31 DOWNTO 0)  -- sfix32_En28
        );
END DSBF_Addressable_Delay_Line_block3;


ARCHITECTURE rtl OF DSBF_Addressable_Delay_Line_block3 IS

  -- Signals
  SIGNAL dataIn_signed                    : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL delayedSignals0                  : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL delayedSignals1                  : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL delayedSignals2                  : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL delayedSignals3                  : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL delayedSignals4                  : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL delayedSignals5                  : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL delayedSignals6                  : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL delayedSignals7                  : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL delayedSignals8                  : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL delayedSignals9                  : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL delayedSignals10                 : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL delayedSignals11                 : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL rdAddr_unsigned                  : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL switchDataOut                    : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL dataOut_tmp                      : signed(31 DOWNTO 0);  -- sfix32_En28

BEGIN
  dataIn_signed <= signed(dataIn);

  delay0_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayedSignals0 <= to_signed(0, 32);
    ELSIF rising_edge(clk) THEN
      IF enb_1_2048_0 = '1' AND validIn = '1' THEN
        delayedSignals0 <= dataIn_signed;
      END IF;
    END IF;
  END PROCESS delay0_process;


  delay1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayedSignals1 <= to_signed(0, 32);
    ELSIF rising_edge(clk) THEN
      IF enb_1_2048_0 = '1' AND shiftEn = '1' THEN
        delayedSignals1 <= delayedSignals0;
      END IF;
    END IF;
  END PROCESS delay1_process;


  delay2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayedSignals2 <= to_signed(0, 32);
    ELSIF rising_edge(clk) THEN
      IF enb_1_2048_0 = '1' AND shiftEn = '1' THEN
        delayedSignals2 <= delayedSignals1;
      END IF;
    END IF;
  END PROCESS delay2_process;


  delay3_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayedSignals3 <= to_signed(0, 32);
    ELSIF rising_edge(clk) THEN
      IF enb_1_2048_0 = '1' AND shiftEn = '1' THEN
        delayedSignals3 <= delayedSignals2;
      END IF;
    END IF;
  END PROCESS delay3_process;


  delay4_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayedSignals4 <= to_signed(0, 32);
    ELSIF rising_edge(clk) THEN
      IF enb_1_2048_0 = '1' AND shiftEn = '1' THEN
        delayedSignals4 <= delayedSignals3;
      END IF;
    END IF;
  END PROCESS delay4_process;


  delay5_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayedSignals5 <= to_signed(0, 32);
    ELSIF rising_edge(clk) THEN
      IF enb_1_2048_0 = '1' AND shiftEn = '1' THEN
        delayedSignals5 <= delayedSignals4;
      END IF;
    END IF;
  END PROCESS delay5_process;


  delay6_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayedSignals6 <= to_signed(0, 32);
    ELSIF rising_edge(clk) THEN
      IF enb_1_2048_0 = '1' AND shiftEn = '1' THEN
        delayedSignals6 <= delayedSignals5;
      END IF;
    END IF;
  END PROCESS delay6_process;


  delay7_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayedSignals7 <= to_signed(0, 32);
    ELSIF rising_edge(clk) THEN
      IF enb_1_2048_0 = '1' AND shiftEn = '1' THEN
        delayedSignals7 <= delayedSignals6;
      END IF;
    END IF;
  END PROCESS delay7_process;


  delay8_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayedSignals8 <= to_signed(0, 32);
    ELSIF rising_edge(clk) THEN
      IF enb_1_2048_0 = '1' AND shiftEn = '1' THEN
        delayedSignals8 <= delayedSignals7;
      END IF;
    END IF;
  END PROCESS delay8_process;


  delay9_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayedSignals9 <= to_signed(0, 32);
    ELSIF rising_edge(clk) THEN
      IF enb_1_2048_0 = '1' AND shiftEn = '1' THEN
        delayedSignals9 <= delayedSignals8;
      END IF;
    END IF;
  END PROCESS delay9_process;


  delay10_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayedSignals10 <= to_signed(0, 32);
    ELSIF rising_edge(clk) THEN
      IF enb_1_2048_0 = '1' AND shiftEn = '1' THEN
        delayedSignals10 <= delayedSignals9;
      END IF;
    END IF;
  END PROCESS delay10_process;


  delay11_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayedSignals11 <= to_signed(0, 32);
    ELSIF rising_edge(clk) THEN
      IF enb_1_2048_0 = '1' AND shiftEn = '1' THEN
        delayedSignals11 <= delayedSignals10;
      END IF;
    END IF;
  END PROCESS delay11_process;


  delayLineEnd <= std_logic_vector(delayedSignals11);

  rdAddr_unsigned <= unsigned(rdAddr);

  
  switchDataOut <= delayedSignals11 WHEN rdAddr_unsigned = to_unsigned(16#0#, 4) ELSE
      delayedSignals10 WHEN rdAddr_unsigned = to_unsigned(16#1#, 4) ELSE
      delayedSignals9 WHEN rdAddr_unsigned = to_unsigned(16#2#, 4) ELSE
      delayedSignals8 WHEN rdAddr_unsigned = to_unsigned(16#3#, 4) ELSE
      delayedSignals7 WHEN rdAddr_unsigned = to_unsigned(16#4#, 4) ELSE
      delayedSignals6 WHEN rdAddr_unsigned = to_unsigned(16#5#, 4) ELSE
      delayedSignals5 WHEN rdAddr_unsigned = to_unsigned(16#6#, 4) ELSE
      delayedSignals4 WHEN rdAddr_unsigned = to_unsigned(16#7#, 4) ELSE
      delayedSignals3 WHEN rdAddr_unsigned = to_unsigned(16#8#, 4) ELSE
      delayedSignals2 WHEN rdAddr_unsigned = to_unsigned(16#9#, 4) ELSE
      delayedSignals1 WHEN rdAddr_unsigned = to_unsigned(16#A#, 4) ELSE
      delayedSignals0 WHEN rdAddr_unsigned = to_unsigned(16#B#, 4) ELSE
      delayedSignals0;

  dataOutReg_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      dataOut_tmp <= to_signed(0, 32);
    ELSIF rising_edge(clk) THEN
      IF enb_1_2048_0 = '1' THEN
        dataOut_tmp <= switchDataOut;
      END IF;
    END IF;
  END PROCESS dataOutReg_process;


  dataOut <= std_logic_vector(dataOut_tmp);

END rtl;

