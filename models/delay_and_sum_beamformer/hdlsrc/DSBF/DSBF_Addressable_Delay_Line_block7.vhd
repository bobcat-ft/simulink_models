-- -------------------------------------------------------------
-- 
-- File Name: /mnt/data/trevor/research/NIH_SBIR_R44_DC015443/simulink_models/models/delay_and_sum_beamformer/hdlsrc/DSBF/DSBF_Addressable_Delay_Line_block7.vhd
-- 
-- Generated by MATLAB 9.7 and HDL Coder 3.15
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: DSBF_Addressable_Delay_Line_block7
-- Source Path: DSBF/dataplane/Avalon Data Processing/delay signals/delay signal/CIC decimation compensator/Addressable 
-- Delay Lin
-- Hierarchy Level: 5
-- 
-- Addressable Delay Line
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY DSBF_Addressable_Delay_Line_block7 IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb_1_2048_0                      :   IN    std_logic;
        dataIn                            :   IN    std_logic_vector(41 DOWNTO 0);  -- sfix42_En28
        validIn                           :   IN    std_logic;
        shiftEn                           :   IN    std_logic;
        rdAddr                            :   IN    std_logic_vector(2 DOWNTO 0);  -- ufix3
        delayLineEnd                      :   OUT   std_logic_vector(41 DOWNTO 0);  -- sfix42_En28
        dataOut                           :   OUT   std_logic_vector(41 DOWNTO 0)  -- sfix42_En28
        );
END DSBF_Addressable_Delay_Line_block7;


ARCHITECTURE rtl OF DSBF_Addressable_Delay_Line_block7 IS

  -- Signals
  SIGNAL dataIn_signed                    : signed(41 DOWNTO 0);  -- sfix42_En28
  SIGNAL delayedSignals0                  : signed(41 DOWNTO 0);  -- sfix42_En28
  SIGNAL delayedSignals1                  : signed(41 DOWNTO 0);  -- sfix42_En28
  SIGNAL delayedSignals2                  : signed(41 DOWNTO 0);  -- sfix42_En28
  SIGNAL delayedSignals3                  : signed(41 DOWNTO 0);  -- sfix42_En28
  SIGNAL delayedSignals4                  : signed(41 DOWNTO 0);  -- sfix42_En28
  SIGNAL rdAddr_unsigned                  : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL switchDataOut                    : signed(41 DOWNTO 0);  -- sfix42_En28
  SIGNAL dataOut_tmp                      : signed(41 DOWNTO 0);  -- sfix42_En28

BEGIN
  dataIn_signed <= signed(dataIn);

  delay0_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayedSignals0 <= to_signed(0, 42);
    ELSIF rising_edge(clk) THEN
      IF enb_1_2048_0 = '1' AND validIn = '1' THEN
        delayedSignals0 <= dataIn_signed;
      END IF;
    END IF;
  END PROCESS delay0_process;


  delay1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayedSignals1 <= to_signed(0, 42);
    ELSIF rising_edge(clk) THEN
      IF enb_1_2048_0 = '1' AND shiftEn = '1' THEN
        delayedSignals1 <= delayedSignals0;
      END IF;
    END IF;
  END PROCESS delay1_process;


  delay2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayedSignals2 <= to_signed(0, 42);
    ELSIF rising_edge(clk) THEN
      IF enb_1_2048_0 = '1' AND shiftEn = '1' THEN
        delayedSignals2 <= delayedSignals1;
      END IF;
    END IF;
  END PROCESS delay2_process;


  delay3_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayedSignals3 <= to_signed(0, 42);
    ELSIF rising_edge(clk) THEN
      IF enb_1_2048_0 = '1' AND shiftEn = '1' THEN
        delayedSignals3 <= delayedSignals2;
      END IF;
    END IF;
  END PROCESS delay3_process;


  delay4_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayedSignals4 <= to_signed(0, 42);
    ELSIF rising_edge(clk) THEN
      IF enb_1_2048_0 = '1' AND shiftEn = '1' THEN
        delayedSignals4 <= delayedSignals3;
      END IF;
    END IF;
  END PROCESS delay4_process;


  delayLineEnd <= std_logic_vector(delayedSignals4);

  rdAddr_unsigned <= unsigned(rdAddr);

  
  switchDataOut <= delayedSignals4 WHEN rdAddr_unsigned = to_unsigned(16#0#, 3) ELSE
      delayedSignals3 WHEN rdAddr_unsigned = to_unsigned(16#1#, 3) ELSE
      delayedSignals2 WHEN rdAddr_unsigned = to_unsigned(16#2#, 3) ELSE
      delayedSignals1 WHEN rdAddr_unsigned = to_unsigned(16#3#, 3) ELSE
      delayedSignals0 WHEN rdAddr_unsigned = to_unsigned(16#4#, 3) ELSE
      delayedSignals0;

  dataOutReg_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      dataOut_tmp <= to_signed(0, 42);
    ELSIF rising_edge(clk) THEN
      IF enb_1_2048_0 = '1' THEN
        dataOut_tmp <= switchDataOut;
      END IF;
    END IF;
  END PROCESS dataOutReg_process;


  dataOut <= std_logic_vector(dataOut_tmp);

END rtl;

