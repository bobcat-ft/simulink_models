-- -------------------------------------------------------------
-- 
-- File Name: /mnt/data/trevor/research/NIH_SBIR_R44_DC015443/simulink_models/models/delay_and_sum_beamformer/hdlsrc/DSBF/DSBF_FirRdyLogic_block.vhd
-- 
-- Generated by MATLAB 9.7 and HDL Coder 3.15
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: DSBF_FirRdyLogic_block
-- Source Path: DSBF/dataplane/Avalon Data Processing/delay signals/delay signal/CIC decimation compensator/FirRdyLogic
-- Hierarchy Level: 5
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY DSBF_FirRdyLogic_block IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb_1_2048_0                      :   IN    std_logic;
        dataIn                            :   IN    std_logic_vector(41 DOWNTO 0);  -- sfix42_En28
        validIn                           :   IN    std_logic;
        readyS                            :   OUT   std_logic;
        din                               :   OUT   std_logic_vector(41 DOWNTO 0);  -- sfix42_En28
        dinVld                            :   OUT   std_logic
        );
END DSBF_FirRdyLogic_block;


ARCHITECTURE rtl OF DSBF_FirRdyLogic_block IS

  -- Functions
  -- HDLCODER_TO_STDLOGIC 
  FUNCTION hdlcoder_to_stdlogic(arg: boolean) RETURN std_logic IS
  BEGIN
    IF arg THEN
      RETURN '1';
    ELSE
      RETURN '0';
    END IF;
  END FUNCTION;


  -- Signals
  SIGNAL dataIn_signed                    : signed(41 DOWNTO 0);  -- sfix42_En28
  SIGNAL firRdy_xdin                      : signed(41 DOWNTO 0);  -- sfix42
  SIGNAL firRdy_xdinVld                   : std_logic;
  SIGNAL firRdy_state                     : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL firRdy_readyReg                  : std_logic;
  SIGNAL firRdy_count                     : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL firRdy_xdin_next                 : signed(41 DOWNTO 0);  -- sfix42_En28
  SIGNAL firRdy_xdinVld_next              : std_logic;
  SIGNAL firRdy_state_next                : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL firRdy_readyReg_next             : std_logic;
  SIGNAL firRdy_count_next                : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL din_tmp                          : signed(41 DOWNTO 0);  -- sfix42_En28

BEGIN
  dataIn_signed <= signed(dataIn);

  -- rdyLogic
  firRdy_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      firRdy_state <= to_unsigned(16#0#, 3);
      firRdy_xdin <= to_signed(0, 42);
      firRdy_xdinVld <= '0';
      firRdy_readyReg <= '1';
      firRdy_count <= to_unsigned(16#0#, 3);
    ELSIF rising_edge(clk) THEN
      IF enb_1_2048_0 = '1' THEN
        firRdy_xdin <= firRdy_xdin_next;
        firRdy_xdinVld <= firRdy_xdinVld_next;
        firRdy_state <= firRdy_state_next;
        firRdy_readyReg <= firRdy_readyReg_next;
        firRdy_count <= firRdy_count_next;
      END IF;
    END IF;
  END PROCESS firRdy_process;

  firRdy_output : PROCESS (dataIn_signed, firRdy_count, firRdy_readyReg, firRdy_state, firRdy_xdin,
       firRdy_xdinVld, validIn)
    VARIABLE out2 : std_logic;
  BEGIN
    firRdy_xdin_next <= firRdy_xdin;
    firRdy_xdinVld_next <= firRdy_xdinVld;
    firRdy_state_next <= firRdy_state;
    firRdy_readyReg_next <= firRdy_readyReg;
    firRdy_count_next <= firRdy_count;
    CASE firRdy_state IS
      WHEN "000" =>
        din_tmp <= dataIn_signed;
        out2 := validIn;
        firRdy_state_next <= to_unsigned(16#0#, 3);
        firRdy_readyReg_next <= '1';
        firRdy_xdin_next <= to_signed(0, 42);
        firRdy_xdinVld_next <= '0';
        IF validIn = '1' THEN 
          firRdy_state_next <= to_unsigned(16#1#, 3);
          firRdy_readyReg_next <= '0';
        END IF;
      WHEN "001" =>
        din_tmp <= to_signed(0, 42);
        out2 := '0';
        firRdy_state_next <= to_unsigned(16#3#, 3);
        IF validIn = '1' THEN 
          firRdy_state_next <= to_unsigned(16#2#, 3);
          firRdy_xdin_next <= dataIn_signed;
          firRdy_xdinVld_next <= '1';
        END IF;
      WHEN "010" =>
        din_tmp <= to_signed(0, 42);
        out2 := '0';
        firRdy_state_next <= to_unsigned(16#2#, 3);
        IF firRdy_count = to_unsigned(16#4#, 3) THEN 
          firRdy_state_next <= to_unsigned(16#4#, 3);
        END IF;
      WHEN "011" =>
        IF firRdy_count = to_unsigned(16#4#, 3) THEN 
          firRdy_readyReg_next <= '1';
          firRdy_state_next <= to_unsigned(16#0#, 3);
          din_tmp <= dataIn_signed;
          out2 := validIn;
        ELSE 
          din_tmp <= to_signed(0, 42);
          out2 := '0';
        END IF;
      WHEN "100" =>
        firRdy_state_next <= to_unsigned(16#3#, 3);
        din_tmp <= firRdy_xdin;
        out2 := firRdy_xdinVld;
        firRdy_xdin_next <= to_signed(0, 42);
        firRdy_xdinVld_next <= '0';
      WHEN OTHERS => 
        din_tmp <= to_signed(0, 42);
        out2 := '0';
        firRdy_state_next <= to_unsigned(16#0#, 3);
        firRdy_xdin_next <= to_signed(0, 42);
        firRdy_xdinVld_next <= '0';
        firRdy_readyReg_next <= '1';
    END CASE;
    IF ((validIn OR hdlcoder_to_stdlogic(firRdy_count > to_unsigned(16#0#, 3))) OR out2) = '1' THEN 
      IF firRdy_count = to_unsigned(16#4#, 3) THEN 
        firRdy_count_next <= to_unsigned(16#0#, 3);
      ELSE 
        firRdy_count_next <= firRdy_count + to_unsigned(16#1#, 3);
      END IF;
    END IF;
    readyS <= firRdy_readyReg;
    dinVld <= out2;
  END PROCESS firRdy_output;


  din <= std_logic_vector(din_tmp);

END rtl;

