-- -------------------------------------------------------------
-- 
-- File Name: D:\NIH3Repo\simulink_models\models\ur_ear_fpga\hdlsrc\ur_ear_fpga_sim\ihc_nl_log\ur_ear_fpga_sim_ihc_nl_log_ihc_nl_log.vhd
-- 
-- Generated by MATLAB 9.9 and HDL Coder 3.17
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: ur_ear_fpga_sim_ihc_nl_log_ihc_nl_log
-- Source Path: ihc_nl_log
-- Hierarchy Level: 6
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY ur_ear_fpga_sim_ihc_nl_log_ihc_nl_log IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        enb_1_2048_1                      :   IN    std_logic;
        stimulus                          :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        ihcasym                           :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        slope                             :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        output                            :   OUT   std_logic_vector(31 DOWNTO 0)  -- single
        );
END ur_ear_fpga_sim_ihc_nl_log_ihc_nl_log;


ARCHITECTURE rtl OF ur_ear_fpga_sim_ihc_nl_log_ihc_nl_log IS

  ATTRIBUTE multstyle : string;

  -- Component Declarations
  COMPONENT ur_ear_fpga_sim_ihc_nl_log_nfp_relop_single
    PORT( nfp_in1                         :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          nfp_in2                         :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          nfp_out1                        :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT ur_ear_fpga_sim_ihc_nl_log_nfp_abs_single
    PORT( nfp_in                          :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          nfp_out                         :   OUT   std_logic_vector(31 DOWNTO 0)  -- ufix32
          );
  END COMPONENT;

  COMPONENT ur_ear_fpga_sim_ihc_nl_log_nfp_convert_double2single
    PORT( nfp_in                          :   IN    std_logic_vector(63 DOWNTO 0);  -- ufix64
          nfp_out                         :   OUT   std_logic_vector(31 DOWNTO 0)  -- ufix32
          );
  END COMPONENT;

  COMPONENT ur_ear_fpga_sim_ihc_nl_log_nfp_mul_single
    PORT( nfp_in1                         :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          nfp_in2                         :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          nfp_out                         :   OUT   std_logic_vector(31 DOWNTO 0)  -- ufix32
          );
  END COMPONENT;

  COMPONENT ur_ear_fpga_sim_ihc_nl_log_nfp_add_single
    PORT( nfp_in1                         :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          nfp_in2                         :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          nfp_out                         :   OUT   std_logic_vector(31 DOWNTO 0)  -- ufix32
          );
  END COMPONENT;

  COMPONENT ur_ear_fpga_sim_ihc_nl_log_nfp_log_single
    PORT( nfp_in                          :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          nfp_out                         :   OUT   std_logic_vector(31 DOWNTO 0)  -- ufix32
          );
  END COMPONENT;

  COMPONENT ur_ear_fpga_sim_ihc_nl_log_Subsystem
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          enb_1_2048_1                    :   IN    std_logic;
          x                               :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          In2                             :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          ihcasym                         :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          Enable                          :   IN    std_logic;
          Out1                            :   OUT   std_logic_vector(31 DOWNTO 0)  -- single
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : ur_ear_fpga_sim_ihc_nl_log_nfp_relop_single
    USE ENTITY work.ur_ear_fpga_sim_ihc_nl_log_nfp_relop_single(rtl);

  FOR ALL : ur_ear_fpga_sim_ihc_nl_log_nfp_abs_single
    USE ENTITY work.ur_ear_fpga_sim_ihc_nl_log_nfp_abs_single(rtl);

  FOR ALL : ur_ear_fpga_sim_ihc_nl_log_nfp_convert_double2single
    USE ENTITY work.ur_ear_fpga_sim_ihc_nl_log_nfp_convert_double2single(rtl);

  FOR ALL : ur_ear_fpga_sim_ihc_nl_log_nfp_mul_single
    USE ENTITY work.ur_ear_fpga_sim_ihc_nl_log_nfp_mul_single(rtl);

  FOR ALL : ur_ear_fpga_sim_ihc_nl_log_nfp_add_single
    USE ENTITY work.ur_ear_fpga_sim_ihc_nl_log_nfp_add_single(rtl);

  FOR ALL : ur_ear_fpga_sim_ihc_nl_log_nfp_log_single
    USE ENTITY work.ur_ear_fpga_sim_ihc_nl_log_nfp_log_single(rtl);

  FOR ALL : ur_ear_fpga_sim_ihc_nl_log_Subsystem
    USE ENTITY work.ur_ear_fpga_sim_ihc_nl_log_Subsystem(rtl);

  -- Signals
  SIGNAL const                            : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Compare_To_Zero_out1             : std_logic;
  SIGNAL Compare_To_Zero_out1_1           : std_logic;
  SIGNAL Abs_out1                         : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Constant_out1                    : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Data_Type_Conversion2_out1       : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Product1_out1                    : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Constant11_out1                  : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Add2_out1                        : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Log_out1                         : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Product2_out1                    : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Product2_out1_1                  : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Subsystem_out1                   : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_out1                      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL t_bypass_reg                     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_out1_1                    : std_logic_vector(31 DOWNTO 0);  -- ufix32

BEGIN
  -- Nonlinear log

  u_nfp_relop_comp : ur_ear_fpga_sim_ihc_nl_log_nfp_relop_single
    PORT MAP( nfp_in1 => stimulus,  -- ufix32
              nfp_in2 => const,  -- ufix32
              nfp_out1 => Compare_To_Zero_out1
              );

  u_nfp_abs_comp : ur_ear_fpga_sim_ihc_nl_log_nfp_abs_single
    PORT MAP( nfp_in => stimulus,  -- ufix32
              nfp_out => Abs_out1  -- ufix32
              );

  u_ihc_nl_log_nfp_convert_double2single : ur_ear_fpga_sim_ihc_nl_log_nfp_convert_double2single
    PORT MAP( nfp_in => Constant_out1,  -- ufix64
              nfp_out => Data_Type_Conversion2_out1  -- ufix32
              );

  u_nfp_mul_comp : ur_ear_fpga_sim_ihc_nl_log_nfp_mul_single
    PORT MAP( nfp_in1 => Abs_out1,  -- ufix32
              nfp_in2 => Data_Type_Conversion2_out1,  -- ufix32
              nfp_out => Product1_out1  -- ufix32
              );

  u_nfp_add_comp : ur_ear_fpga_sim_ihc_nl_log_nfp_add_single
    PORT MAP( nfp_in1 => Product1_out1,  -- ufix32
              nfp_in2 => Constant11_out1,  -- ufix32
              nfp_out => Add2_out1  -- ufix32
              );

  u_nfp_log_comp : ur_ear_fpga_sim_ihc_nl_log_nfp_log_single
    PORT MAP( nfp_in => Add2_out1,  -- ufix32
              nfp_out => Log_out1  -- ufix32
              );

  u_nfp_mul_comp_1 : ur_ear_fpga_sim_ihc_nl_log_nfp_mul_single
    PORT MAP( nfp_in1 => Log_out1,  -- ufix32
              nfp_in2 => slope,  -- ufix32
              nfp_out => Product2_out1  -- ufix32
              );

  u_Subsystem : ur_ear_fpga_sim_ihc_nl_log_Subsystem
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              enb_1_2048_1 => enb_1_2048_1,
              x => stimulus,  -- single
              In2 => Product2_out1,  -- single
              ihcasym => ihcasym,  -- single
              Enable => Compare_To_Zero_out1,
              Out1 => Subsystem_out1  -- single
              );

  const <= X"00000000";

  delayMatch_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Compare_To_Zero_out1_1 <= '0';
    ELSIF rising_edge(clk) THEN
      IF enb = '1' THEN
        Compare_To_Zero_out1_1 <= Compare_To_Zero_out1;
      END IF;
    END IF;
  END PROCESS delayMatch_process;


  Constant_out1 <= X"409f400000000000";

  Constant11_out1 <= X"3f800000";

  delayMatch1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Product2_out1_1 <= X"00000000";
    ELSIF rising_edge(clk) THEN
      IF enb = '1' THEN
        Product2_out1_1 <= Product2_out1;
      END IF;
    END IF;
  END PROCESS delayMatch1_process;


  
  Switch_out1 <= Product2_out1_1 WHEN Compare_To_Zero_out1_1 = '0' ELSE
      Subsystem_out1;

  t_bypass_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      t_bypass_reg <= X"00000000";
    ELSIF rising_edge(clk) THEN
      IF enb_1_2048_1 = '1' THEN
        t_bypass_reg <= Switch_out1;
      END IF;
    END IF;
  END PROCESS t_bypass_process;

  
  Switch_out1_1 <= Switch_out1 WHEN enb_1_2048_1 = '1' ELSE
      t_bypass_reg;

  output <= Switch_out1_1;

END rtl;

