-- -------------------------------------------------------------
-- 
-- File Name: D:\NIH3Repo\simulink_models\models\ur_ear_fpga\hdlsrc\ur_ear_fpga_sim\ihc_nl_log\ur_ear_fpga_sim_ihc_nl_log_Subsystem.vhd
-- 
-- Generated by MATLAB 9.9 and HDL Coder 3.17
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: ur_ear_fpga_sim_ihc_nl_log_Subsystem
-- Source Path: ihc_nl_log/Subsystem
-- Hierarchy Level: 7
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY ur_ear_fpga_sim_ihc_nl_log_Subsystem IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        enb_1_2048_1                      :   IN    std_logic;
        x                                 :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        In2                               :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        ihcasym                           :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        Enable                            :   IN    std_logic;
        Out1                              :   OUT   std_logic_vector(31 DOWNTO 0)  -- single
        );
END ur_ear_fpga_sim_ihc_nl_log_Subsystem;


ARCHITECTURE rtl OF ur_ear_fpga_sim_ihc_nl_log_Subsystem IS

  ATTRIBUTE multstyle : string;

  -- Component Declarations
  COMPONENT ur_ear_fpga_sim_ihc_nl_log_nfp_div_single
    PORT( nfp_in1                         :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          nfp_in2                         :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          nfp_out                         :   OUT   std_logic_vector(31 DOWNTO 0)  -- ufix32
          );
  END COMPONENT;

  COMPONENT ur_ear_fpga_sim_ihc_nl_log_nfp_uminus_single
    PORT( nfp_in                          :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          nfp_out                         :   OUT   std_logic_vector(31 DOWNTO 0)  -- ufix32
          );
  END COMPONENT;

  COMPONENT ur_ear_fpga_sim_ihc_nl_log_nfp_log10_single
    PORT( nfp_in                          :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          nfp_out                         :   OUT   std_logic_vector(31 DOWNTO 0)  -- ufix32
          );
  END COMPONENT;

  COMPONENT ur_ear_fpga_sim_ihc_nl_log_nfp_mul_single
    PORT( nfp_in1                         :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          nfp_in2                         :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          nfp_out                         :   OUT   std_logic_vector(31 DOWNTO 0)  -- ufix32
          );
  END COMPONENT;

  COMPONENT ur_ear_fpga_sim_ihc_nl_log_nfp_exp_single
    PORT( nfp_in                          :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          nfp_out                         :   OUT   std_logic_vector(31 DOWNTO 0)  -- ufix32
          );
  END COMPONENT;

  COMPONENT ur_ear_fpga_sim_ihc_nl_log_nfp_sub_single
    PORT( nfp_in1                         :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          nfp_in2                         :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          nfp_out                         :   OUT   std_logic_vector(31 DOWNTO 0)  -- ufix32
          );
  END COMPONENT;

  COMPONENT ur_ear_fpga_sim_ihc_nl_log_nfp_add_single
    PORT( nfp_in1                         :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          nfp_in2                         :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          nfp_out                         :   OUT   std_logic_vector(31 DOWNTO 0)  -- ufix32
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : ur_ear_fpga_sim_ihc_nl_log_nfp_div_single
    USE ENTITY work.ur_ear_fpga_sim_ihc_nl_log_nfp_div_single(rtl);

  FOR ALL : ur_ear_fpga_sim_ihc_nl_log_nfp_uminus_single
    USE ENTITY work.ur_ear_fpga_sim_ihc_nl_log_nfp_uminus_single(rtl);

  FOR ALL : ur_ear_fpga_sim_ihc_nl_log_nfp_log10_single
    USE ENTITY work.ur_ear_fpga_sim_ihc_nl_log_nfp_log10_single(rtl);

  FOR ALL : ur_ear_fpga_sim_ihc_nl_log_nfp_mul_single
    USE ENTITY work.ur_ear_fpga_sim_ihc_nl_log_nfp_mul_single(rtl);

  FOR ALL : ur_ear_fpga_sim_ihc_nl_log_nfp_exp_single
    USE ENTITY work.ur_ear_fpga_sim_ihc_nl_log_nfp_exp_single(rtl);

  FOR ALL : ur_ear_fpga_sim_ihc_nl_log_nfp_sub_single
    USE ENTITY work.ur_ear_fpga_sim_ihc_nl_log_nfp_sub_single(rtl);

  FOR ALL : ur_ear_fpga_sim_ihc_nl_log_nfp_add_single
    USE ENTITY work.ur_ear_fpga_sim_ihc_nl_log_nfp_add_single(rtl);

  -- Signals
  SIGNAL Constant1_out1                   : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL ihcasym_1                        : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Constant16_out1                  : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Constant13_out1                  : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Constant14_out1                  : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Divide4_out1                     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Gain2_out1                       : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Log10_out1                       : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL splx                             : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Constant18_out1                  : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Divide5_out1                     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Math_Function1_out1              : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Subtract4_out1                   : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Constant19_out1                  : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Add3_out1                        : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Divide2_out1                     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL asym_t                           : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Divide1_out1                     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Product4_out1                    : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Product4_out1_bypass             : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Out1_bypass_bypass_reg           : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Product4_out1_bypass_1           : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Product4_out1_last_value         : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Product4_out1_bypass_2           : std_logic_vector(31 DOWNTO 0);  -- ufix32

BEGIN
  -- Calculate asym_t

  u_nfp_div_comp : ur_ear_fpga_sim_ihc_nl_log_nfp_div_single
    PORT MAP( nfp_in1 => x,  -- ufix32
              nfp_in2 => Constant14_out1,  -- ufix32
              nfp_out => Divide4_out1  -- ufix32
              );

  u_nfp_uminus_comp : ur_ear_fpga_sim_ihc_nl_log_nfp_uminus_single
    PORT MAP( nfp_in => Divide4_out1,  -- ufix32
              nfp_out => Gain2_out1  -- ufix32
              );

  u_nfp_log10_comp : ur_ear_fpga_sim_ihc_nl_log_nfp_log10_single
    PORT MAP( nfp_in => Gain2_out1,  -- ufix32
              nfp_out => Log10_out1  -- ufix32
              );

  u_nfp_mul_comp : ur_ear_fpga_sim_ihc_nl_log_nfp_mul_single
    PORT MAP( nfp_in1 => Constant13_out1,  -- ufix32
              nfp_in2 => Log10_out1,  -- ufix32
              nfp_out => splx  -- ufix32
              );

  u_nfp_div_comp_1 : ur_ear_fpga_sim_ihc_nl_log_nfp_div_single
    PORT MAP( nfp_in1 => splx,  -- ufix32
              nfp_in2 => Constant18_out1,  -- ufix32
              nfp_out => Divide5_out1  -- ufix32
              );

  u_nfp_exp_comp : ur_ear_fpga_sim_ihc_nl_log_nfp_exp_single
    PORT MAP( nfp_in => Divide5_out1,  -- ufix32
              nfp_out => Math_Function1_out1  -- ufix32
              );

  u_nfp_sub_comp : ur_ear_fpga_sim_ihc_nl_log_nfp_sub_single
    PORT MAP( nfp_in1 => ihcasym_1,  -- ufix32
              nfp_in2 => Constant16_out1,  -- ufix32
              nfp_out => Subtract4_out1  -- ufix32
              );

  u_nfp_add_comp : ur_ear_fpga_sim_ihc_nl_log_nfp_add_single
    PORT MAP( nfp_in1 => Math_Function1_out1,  -- ufix32
              nfp_in2 => Constant19_out1,  -- ufix32
              nfp_out => Add3_out1  -- ufix32
              );

  u_nfp_div_comp_2 : ur_ear_fpga_sim_ihc_nl_log_nfp_div_single
    PORT MAP( nfp_in1 => Subtract4_out1,  -- ufix32
              nfp_in2 => Add3_out1,  -- ufix32
              nfp_out => Divide2_out1  -- ufix32
              );

  u_nfp_sub_comp_1 : ur_ear_fpga_sim_ihc_nl_log_nfp_sub_single
    PORT MAP( nfp_in1 => ihcasym_1,  -- ufix32
              nfp_in2 => Divide2_out1,  -- ufix32
              nfp_out => asym_t  -- ufix32
              );

  u_nfp_div_comp_3 : ur_ear_fpga_sim_ihc_nl_log_nfp_div_single
    PORT MAP( nfp_in1 => Constant1_out1,  -- ufix32
              nfp_in2 => asym_t,  -- ufix32
              nfp_out => Divide1_out1  -- ufix32
              );

  u_nfp_mul_comp_1 : ur_ear_fpga_sim_ihc_nl_log_nfp_mul_single
    PORT MAP( nfp_in1 => In2,  -- ufix32
              nfp_in2 => Divide1_out1,  -- ufix32
              nfp_out => Product4_out1  -- ufix32
              );

  Constant1_out1 <= X"bf800000";

  ihcasym_1 <= ihcasym;

  Constant16_out1 <= X"3f800000";

  Constant13_out1 <= X"41a00000";

  Constant14_out1 <= X"37a7c5ac";

  Constant18_out1 <= X"40a00000";

  Constant19_out1 <= X"3f800000";

  Out1_bypass_bypass_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Out1_bypass_bypass_reg <= X"00000000";
    ELSIF rising_edge(clk) THEN
      IF enb_1_2048_1 = '1' THEN
        Out1_bypass_bypass_reg <= Product4_out1_bypass;
      END IF;
    END IF;
  END PROCESS Out1_bypass_bypass_process;

  
  Product4_out1_bypass_1 <= Product4_out1_bypass WHEN enb_1_2048_1 = '1' ELSE
      Out1_bypass_bypass_reg;

  Product4_out1_last_value <= Product4_out1_bypass_1;

  
  Product4_out1_bypass_2 <= Product4_out1_last_value WHEN Enable = '0' ELSE
      Product4_out1;

  reduced_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Product4_out1_bypass <= X"00000000";
    ELSIF rising_edge(clk) THEN
      IF enb = '1' THEN
        Product4_out1_bypass <= Product4_out1_bypass_2;
      END IF;
    END IF;
  END PROCESS reduced_process;


  Out1 <= Product4_out1_bypass;

END rtl;

