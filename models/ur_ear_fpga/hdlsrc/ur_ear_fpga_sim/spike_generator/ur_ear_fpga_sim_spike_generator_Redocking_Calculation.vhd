-- -------------------------------------------------------------
-- 
-- File Name: D:\NIH3Repo\simulink_models\models\ur_ear_fpga\hdlsrc\ur_ear_fpga_sim\spike_generator\ur_ear_fpga_sim_spike_generator_Redocking_Calculation.vhd
-- 
-- Generated by MATLAB 9.9 and HDL Coder 3.17
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: ur_ear_fpga_sim_spike_generator_Redocking_Calculation
-- Source Path: spike_generator/Redocking Calculation
-- Hierarchy Level: 5
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY ur_ear_fpga_sim_spike_generator_Redocking_Calculation IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb_1_2048_0                      :   IN    std_logic;
        t_rd_jump                         :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        t_rd_init                         :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        site_1_recalculate                :   IN    std_logic;
        site_2_recalculate                :   IN    std_logic;
        site_3_recalculate                :   IN    std_logic;
        site_4_recalculate                :   IN    std_logic;
        tau_rd                            :   OUT   std_logic_vector(31 DOWNTO 0)  -- single
        );
END ur_ear_fpga_sim_spike_generator_Redocking_Calculation;


ARCHITECTURE rtl OF ur_ear_fpga_sim_spike_generator_Redocking_Calculation IS

  ATTRIBUTE multstyle : string;

  -- Component Declarations
  COMPONENT ur_ear_fpga_sim_spike_generator_nfp_convert_double2single
    PORT( nfp_in                          :   IN    std_logic_vector(63 DOWNTO 0);  -- ufix64
          nfp_out                         :   OUT   std_logic_vector(31 DOWNTO 0)  -- ufix32
          );
  END COMPONENT;

  COMPONENT ur_ear_fpga_sim_spike_generator_Current_Redock_Component
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb_1_2048_0                    :   IN    std_logic;
          previous_redocking_period       :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          t_rd_jump                       :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          t_rd_init                       :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          site_1_recalculate              :   IN    std_logic;
          site_2_recalculate              :   IN    std_logic;
          site_3_recalculate              :   IN    std_logic;
          site_4_recalculate              :   IN    std_logic;
          current_redocking_period        :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
          recalculate_previous_redocking  :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT ur_ear_fpga_sim_spike_generator_Correct_Redocking_Period
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb_1_2048_0                    :   IN    std_logic;
          current_redocking_period        :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          recalculate_previous            :   IN    std_logic;
          t_rd_decay                      :   IN    std_logic;
          tau                             :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          tdres                           :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          t_rd_rest                       :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          previous_redocking_period       :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
          tau_rd                          :   OUT   std_logic_vector(31 DOWNTO 0)  -- single
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : ur_ear_fpga_sim_spike_generator_nfp_convert_double2single
    USE ENTITY work.ur_ear_fpga_sim_spike_generator_nfp_convert_double2single(rtl);

  FOR ALL : ur_ear_fpga_sim_spike_generator_Current_Redock_Component
    USE ENTITY work.ur_ear_fpga_sim_spike_generator_Current_Redock_Component(rtl);

  FOR ALL : ur_ear_fpga_sim_spike_generator_Correct_Redocking_Period
    USE ENTITY work.ur_ear_fpga_sim_spike_generator_Correct_Redocking_Period(rtl);

  -- Signals
  SIGNAL OR_out1                          : std_logic;
  SIGNAL Constant1_out1                   : std_logic;
  SIGNAL HDL_Counter_out1                 : std_logic;  -- ufix1
  SIGNAL NOT1_out1                        : std_logic;
  SIGNAL AND1_out1                        : std_logic;
  SIGNAL NOT_out1                         : std_logic;
  SIGNAL NOT_out1_1                       : std_logic;
  SIGNAL Constant6_out1                   : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Data_Type_Conversion4_out1       : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Constant7_out1                   : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Data_Type_Conversion2_out1       : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Constant8_out1                   : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Data_Type_Conversion8_out1       : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Correct_Redocking_Period_out1    : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Current_Redock_Component_out1    : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Current_Redock_Component_out2    : std_logic;
  SIGNAL Correct_Redocking_Period_out2    : std_logic_vector(31 DOWNTO 0);  -- ufix32

BEGIN
  -- When a redocking event occurred, correct the value
  -- 
  -- Ensure a decay doesn't occur on the first clock cycle

  u_spike_generator_nfp_convert_double2single : ur_ear_fpga_sim_spike_generator_nfp_convert_double2single
    PORT MAP( nfp_in => Constant6_out1,  -- ufix64
              nfp_out => Data_Type_Conversion4_out1  -- ufix32
              );

  u_spike_generator_nfp_convert_double2single_1 : ur_ear_fpga_sim_spike_generator_nfp_convert_double2single
    PORT MAP( nfp_in => Constant7_out1,  -- ufix64
              nfp_out => Data_Type_Conversion2_out1  -- ufix32
              );

  u_spike_generator_nfp_convert_double2single_2 : ur_ear_fpga_sim_spike_generator_nfp_convert_double2single
    PORT MAP( nfp_in => Constant8_out1,  -- ufix64
              nfp_out => Data_Type_Conversion8_out1  -- ufix32
              );

  u_Current_Redock_Component : ur_ear_fpga_sim_spike_generator_Current_Redock_Component
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_2048_0 => enb_1_2048_0,
              previous_redocking_period => Correct_Redocking_Period_out1,  -- single
              t_rd_jump => t_rd_jump,  -- single
              t_rd_init => t_rd_init,  -- single
              site_1_recalculate => site_1_recalculate,
              site_2_recalculate => site_2_recalculate,
              site_3_recalculate => site_3_recalculate,
              site_4_recalculate => site_4_recalculate,
              current_redocking_period => Current_Redock_Component_out1,  -- single
              recalculate_previous_redocking => Current_Redock_Component_out2
              );

  u_Correct_Redocking_Period : ur_ear_fpga_sim_spike_generator_Correct_Redocking_Period
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_2048_0 => enb_1_2048_0,
              current_redocking_period => Current_Redock_Component_out1,  -- single
              recalculate_previous => Current_Redock_Component_out2,
              t_rd_decay => NOT_out1_1,
              tau => Data_Type_Conversion4_out1,  -- single
              tdres => Data_Type_Conversion2_out1,  -- single
              t_rd_rest => Data_Type_Conversion8_out1,  -- single
              previous_redocking_period => Correct_Redocking_Period_out1,  -- single
              tau_rd => Correct_Redocking_Period_out2  -- single
              );

  OR_out1 <= site_1_recalculate OR (site_2_recalculate OR (site_4_recalculate OR site_3_recalculate));

  Constant1_out1 <= '0';

  NOT1_out1 <=  NOT HDL_Counter_out1;

  -- Count limited, Unsigned Counter
  --  initial value   = 0
  --  step value      = 1
  --  count to value  = 1
  HDL_Counter_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      HDL_Counter_out1 <= '0';
    ELSIF rising_edge(clk) THEN
      IF enb_1_2048_0 = '1' THEN
        IF Constant1_out1 = '1' THEN 
          HDL_Counter_out1 <= '0';
        ELSIF NOT1_out1 = '1' THEN 
          HDL_Counter_out1 <=  NOT HDL_Counter_out1;
        END IF;
      END IF;
    END IF;
  END PROCESS HDL_Counter_process;


  AND1_out1 <= OR_out1 AND HDL_Counter_out1;

  NOT_out1 <=  NOT AND1_out1;

  delayMatch_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      NOT_out1_1 <= '0';
    ELSIF rising_edge(clk) THEN
      IF enb_1_2048_0 = '1' THEN
        NOT_out1_1 <= NOT_out1;
      END IF;
    END IF;
  END PROCESS delayMatch_process;


  Constant6_out1 <= X"3faeb851eb851eb8";

  Constant7_out1 <= X"3f10624dd2f1a9fc";

  Constant8_out1 <= X"3f8cac083126e979";

  tau_rd <= Correct_Redocking_Period_out2;

END rtl;

