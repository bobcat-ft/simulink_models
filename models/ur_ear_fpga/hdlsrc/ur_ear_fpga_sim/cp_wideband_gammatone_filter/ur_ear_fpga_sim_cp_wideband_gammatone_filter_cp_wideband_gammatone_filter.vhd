-- -------------------------------------------------------------
-- 
-- File Name: D:\NIH3Repo\simulink_models\models\ur_ear_fpga\hdlsrc\ur_ear_fpga_sim\cp_wideband_gammatone_filter\ur_ear_fpga_sim_cp_wideband_gammatone_filter_cp_wideband_gammatone_filter.vhd
-- 
-- Generated by MATLAB 9.9 and HDL Coder 3.17
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: ur_ear_fpga_sim_cp_wideband_gammatone_filter_cp_wideband_gammatone_filter
-- Source Path: cp_wideband_gammatone_filter
-- Hierarchy Level: 5
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY ur_ear_fpga_sim_cp_wideband_gammatone_filter_cp_wideband_gammatone_filter IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb_1_2048_0                      :   IN    std_logic;
        wbgain                            :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        tauwb                             :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        cp_wbgt_in                        :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        cp_wbgt_out                       :   OUT   std_logic_vector(31 DOWNTO 0)  -- single
        );
END ur_ear_fpga_sim_cp_wideband_gammatone_filter_cp_wideband_gammatone_filter;


ARCHITECTURE rtl OF ur_ear_fpga_sim_cp_wideband_gammatone_filter_cp_wideband_gammatone_filter IS

  ATTRIBUTE multstyle : string;

  -- Component Declarations
  COMPONENT ur_ear_fpga_sim_cp_wideband_gammatone_filter_MATLAB_Function1
    PORT( phase                           :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          delta_phase                     :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          wbphase                         :   OUT   std_logic_vector(31 DOWNTO 0)  -- single
          );
  END COMPONENT;

  COMPONENT ur_ear_fpga_sim_cp_wideband_gammatone_filter_nfp_add_single
    PORT( nfp_in1                         :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          nfp_in2                         :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          nfp_out                         :   OUT   std_logic_vector(31 DOWNTO 0)  -- ufix32
          );
  END COMPONENT;

  COMPONENT ur_ear_fpga_sim_cp_wideband_gammatone_filter_nfp_sincos_single
    PORT( nfp_in                          :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          nfp_out1                        :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
          nfp_out2                        :   OUT   std_logic_vector(31 DOWNTO 0)  -- ufix32
          );
  END COMPONENT;

  COMPONENT ur_ear_fpga_sim_cp_wideband_gammatone_filter_nfp_mul_single
    PORT( nfp_in1                         :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          nfp_in2                         :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          nfp_out                         :   OUT   std_logic_vector(31 DOWNTO 0)  -- ufix32
          );
  END COMPONENT;

  COMPONENT ur_ear_fpga_sim_cp_wideband_gammatone_filter_Third_Order_IIR_Filter
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb_1_2048_0                    :   IN    std_logic;
          Signal_In_re                    :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          Signal_In_im                    :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          wbgain                          :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          tauwb                           :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          Signal_Out_re                   :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
          Signal_Out_im                   :   OUT   std_logic_vector(31 DOWNTO 0)  -- single
          );
  END COMPONENT;

  COMPONENT ur_ear_fpga_sim_cp_wideband_gammatone_filter_nfp_uminus_single
    PORT( nfp_in                          :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          nfp_out                         :   OUT   std_logic_vector(31 DOWNTO 0)  -- ufix32
          );
  END COMPONENT;

  COMPONENT ur_ear_fpga_sim_cp_wideband_gammatone_filter_nfp_sub_single
    PORT( nfp_in1                         :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          nfp_in2                         :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          nfp_out                         :   OUT   std_logic_vector(31 DOWNTO 0)  -- ufix32
          );
  END COMPONENT;

  COMPONENT ur_ear_fpga_sim_cp_wideband_gammatone_filter_Calculate_wbout
    PORT( In1                             :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          tauwb                           :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          output1                         :   OUT   std_logic_vector(31 DOWNTO 0)  -- single
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : ur_ear_fpga_sim_cp_wideband_gammatone_filter_MATLAB_Function1
    USE ENTITY work.ur_ear_fpga_sim_cp_wideband_gammatone_filter_MATLAB_Function1(rtl);

  FOR ALL : ur_ear_fpga_sim_cp_wideband_gammatone_filter_nfp_add_single
    USE ENTITY work.ur_ear_fpga_sim_cp_wideband_gammatone_filter_nfp_add_single(rtl);

  FOR ALL : ur_ear_fpga_sim_cp_wideband_gammatone_filter_nfp_sincos_single
    USE ENTITY work.ur_ear_fpga_sim_cp_wideband_gammatone_filter_nfp_sincos_single(rtl);

  FOR ALL : ur_ear_fpga_sim_cp_wideband_gammatone_filter_nfp_mul_single
    USE ENTITY work.ur_ear_fpga_sim_cp_wideband_gammatone_filter_nfp_mul_single(rtl);

  FOR ALL : ur_ear_fpga_sim_cp_wideband_gammatone_filter_Third_Order_IIR_Filter
    USE ENTITY work.ur_ear_fpga_sim_cp_wideband_gammatone_filter_Third_Order_IIR_Filter(rtl);

  FOR ALL : ur_ear_fpga_sim_cp_wideband_gammatone_filter_nfp_uminus_single
    USE ENTITY work.ur_ear_fpga_sim_cp_wideband_gammatone_filter_nfp_uminus_single(rtl);

  FOR ALL : ur_ear_fpga_sim_cp_wideband_gammatone_filter_nfp_sub_single
    USE ENTITY work.ur_ear_fpga_sim_cp_wideband_gammatone_filter_nfp_sub_single(rtl);

  FOR ALL : ur_ear_fpga_sim_cp_wideband_gammatone_filter_Calculate_wbout
    USE ENTITY work.ur_ear_fpga_sim_cp_wideband_gammatone_filter_Calculate_wbout(rtl);

  -- Signals
  SIGNAL delta_phase_out1                 : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL wbphase                          : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL wbphase_1                        : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay_out1                       : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL wbphase_2                        : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL sin                              : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL cos                              : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Product_Re                       : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Product_Im                       : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL output_re                        : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL output_im                        : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Gain_out1                        : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL sin_1                            : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL cos_1                            : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Product1_Re_AC                   : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Product1_Re_BD                   : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL mulOutput                        : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL wbout1                           : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL wbout                            : std_logic_vector(31 DOWNTO 0);  -- ufix32

BEGIN
  -- Calculate Wideband Output
  -- 
  -- Inputs: Wideband Filter Output (wbout1)
  -- 		Wideband Time Constant Feedback 				(tauwb)
  -- 
  -- Output: Wideband Output  (wbout)
  -- 
  -- - A few simple calculations to get the wideband output
  -- 
  -- Control Path Wideband Gammatone Filter
  -- 
  -- Inputs: Phase-Shifted ME Filter Output
  -- 		Wideband Gain Feedback (wbgain)
  -- 		Wideband Time Constant Feedback 				(tauwb)
  -- 
  -- Output: Wideband Gammatone Filtered Signal 			 (wbout1)
  -- 
  -- - 3rd Order Wideband Gammatone IIR Filter
  -- 
  -- - Coefficients are determined in the subsystem and depend on gain and time constant feedback
  -- 
  -- - Implemented w/ Direct Form I Block Structure
  -- 
  -- MATLAB function to ensure the output remains within the CORDIC cos + jsin argument range of -2pi to 2pi
  -- 
  -- Adding delta_phase to itself after each iteration
  -- 
  -- Note: Number of CORDIC iterations given by variable cordiciterationswb which is declared in the initialization 
  -- scrip
  -- 
  -- Passing Real Part and Terminating Imaginary Part

  u_MATLAB_Function1 : ur_ear_fpga_sim_cp_wideband_gammatone_filter_MATLAB_Function1
    PORT MAP( phase => Delay_out1,  -- single
              delta_phase => delta_phase_out1,  -- single
              wbphase => wbphase_2  -- single
              );

  u_nfp_add_comp : ur_ear_fpga_sim_cp_wideband_gammatone_filter_nfp_add_single
    PORT MAP( nfp_in1 => delta_phase_out1,  -- ufix32
              nfp_in2 => wbphase_2,  -- ufix32
              nfp_out => wbphase  -- ufix32
              );

  u_nfp_sincos_comp : ur_ear_fpga_sim_cp_wideband_gammatone_filter_nfp_sincos_single
    PORT MAP( nfp_in => wbphase,  -- ufix32
              nfp_out1 => sin,  -- ufix32
              nfp_out2 => cos  -- ufix32
              );

  u_nfp_mul_comp : ur_ear_fpga_sim_cp_wideband_gammatone_filter_nfp_mul_single
    PORT MAP( nfp_in1 => cos,  -- ufix32
              nfp_in2 => cp_wbgt_in,  -- ufix32
              nfp_out => Product_Re  -- ufix32
              );

  u_nfp_mul_comp_1 : ur_ear_fpga_sim_cp_wideband_gammatone_filter_nfp_mul_single
    PORT MAP( nfp_in1 => sin,  -- ufix32
              nfp_in2 => cp_wbgt_in,  -- ufix32
              nfp_out => Product_Im  -- ufix32
              );

  u_Third_Order_IIR_Filter : ur_ear_fpga_sim_cp_wideband_gammatone_filter_Third_Order_IIR_Filter
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_2048_0 => enb_1_2048_0,
              Signal_In_re => Product_Re,  -- single
              Signal_In_im => Product_Im,  -- single
              wbgain => wbgain,  -- single
              tauwb => tauwb,  -- single
              Signal_Out_re => output_re,  -- single
              Signal_Out_im => output_im  -- single
              );

  u_nfp_uminus_comp : ur_ear_fpga_sim_cp_wideband_gammatone_filter_nfp_uminus_single
    PORT MAP( nfp_in => wbphase,  -- ufix32
              nfp_out => Gain_out1  -- ufix32
              );

  u_nfp_sincos_comp_1 : ur_ear_fpga_sim_cp_wideband_gammatone_filter_nfp_sincos_single
    PORT MAP( nfp_in => Gain_out1,  -- ufix32
              nfp_out1 => sin_1,  -- ufix32
              nfp_out2 => cos_1  -- ufix32
              );

  u_nfp_mul_comp_2 : ur_ear_fpga_sim_cp_wideband_gammatone_filter_nfp_mul_single
    PORT MAP( nfp_in1 => output_re,  -- ufix32
              nfp_in2 => cos_1,  -- ufix32
              nfp_out => Product1_Re_AC  -- ufix32
              );

  u_nfp_mul_comp_3 : ur_ear_fpga_sim_cp_wideband_gammatone_filter_nfp_mul_single
    PORT MAP( nfp_in1 => output_im,  -- ufix32
              nfp_in2 => sin_1,  -- ufix32
              nfp_out => Product1_Re_BD  -- ufix32
              );

  u_nfp_sub_comp : ur_ear_fpga_sim_cp_wideband_gammatone_filter_nfp_sub_single
    PORT MAP( nfp_in1 => Product1_Re_AC,  -- ufix32
              nfp_in2 => Product1_Re_BD,  -- ufix32
              nfp_out => mulOutput  -- ufix32
              );

  u_Calculate_wbout : ur_ear_fpga_sim_cp_wideband_gammatone_filter_Calculate_wbout
    PORT MAP( In1 => wbout1,  -- single
              tauwb => tauwb,  -- single
              output1 => wbout  -- single
              );

  delta_phase_out1 <= X"bef35071";

  wbphase_1 <= wbphase;

  Delay_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay_out1 <= X"00000000";
    ELSIF rising_edge(clk) THEN
      IF enb_1_2048_0 = '1' THEN
        Delay_out1 <= wbphase_1;
      END IF;
    END IF;
  END PROCESS Delay_process;


  wbout1 <= mulOutput;

  cp_wbgt_out <= wbout;

END rtl;

