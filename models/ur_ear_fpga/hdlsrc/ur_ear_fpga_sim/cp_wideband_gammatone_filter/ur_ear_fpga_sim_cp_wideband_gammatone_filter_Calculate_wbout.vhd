-- -------------------------------------------------------------
-- 
-- File Name: D:\NIH3Repo\simulink_models\models\ur_ear_fpga\hdlsrc\ur_ear_fpga_sim\cp_wideband_gammatone_filter\ur_ear_fpga_sim_cp_wideband_gammatone_filter_Calculate_wbout.vhd
-- 
-- Generated by MATLAB 9.9 and HDL Coder 3.17
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: ur_ear_fpga_sim_cp_wideband_gammatone_filter_Calculate_wbout
-- Source Path: cp_wideband_gammatone_filter/Calculate wbout
-- Hierarchy Level: 6
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY ur_ear_fpga_sim_cp_wideband_gammatone_filter_Calculate_wbout IS
  PORT( In1                               :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        tauwb                             :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        output1                           :   OUT   std_logic_vector(31 DOWNTO 0)  -- single
        );
END ur_ear_fpga_sim_cp_wideband_gammatone_filter_Calculate_wbout;


ARCHITECTURE rtl OF ur_ear_fpga_sim_cp_wideband_gammatone_filter_Calculate_wbout IS

  ATTRIBUTE multstyle : string;

  -- Component Declarations
  COMPONENT ur_ear_fpga_sim_cp_wideband_gammatone_filter_nfp_div_single
    PORT( nfp_in1                         :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          nfp_in2                         :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          nfp_out                         :   OUT   std_logic_vector(31 DOWNTO 0)  -- ufix32
          );
  END COMPONENT;

  COMPONENT ur_ear_fpga_sim_cp_wideband_gammatone_filter_nfp_pow_single
    PORT( nfp_in1                         :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          nfp_in2                         :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          nfp_out                         :   OUT   std_logic_vector(31 DOWNTO 0)  -- ufix32
          );
  END COMPONENT;

  COMPONENT ur_ear_fpga_sim_cp_wideband_gammatone_filter_nfp_mul_single
    PORT( nfp_in1                         :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          nfp_in2                         :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          nfp_out                         :   OUT   std_logic_vector(31 DOWNTO 0)  -- ufix32
          );
  END COMPONENT;

  COMPONENT ur_ear_fpga_sim_cp_wideband_gammatone_filter_nfp_relop_single
    PORT( nfp_in1                         :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          nfp_in2                         :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          nfp_out1                        :   OUT   std_logic
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : ur_ear_fpga_sim_cp_wideband_gammatone_filter_nfp_div_single
    USE ENTITY work.ur_ear_fpga_sim_cp_wideband_gammatone_filter_nfp_div_single(rtl);

  FOR ALL : ur_ear_fpga_sim_cp_wideband_gammatone_filter_nfp_pow_single
    USE ENTITY work.ur_ear_fpga_sim_cp_wideband_gammatone_filter_nfp_pow_single(rtl);

  FOR ALL : ur_ear_fpga_sim_cp_wideband_gammatone_filter_nfp_mul_single
    USE ENTITY work.ur_ear_fpga_sim_cp_wideband_gammatone_filter_nfp_mul_single(rtl);

  FOR ALL : ur_ear_fpga_sim_cp_wideband_gammatone_filter_nfp_relop_single
    USE ENTITY work.ur_ear_fpga_sim_cp_wideband_gammatone_filter_nfp_relop_single(rtl);

  -- Signals
  SIGNAL kconst                           : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Constant_out1                    : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Divide_out1                      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Constant1_out1                   : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Pow_out1                         : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Product_out1                     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Gain_out1                        : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Constant3_out1                   : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Divide1_out1                     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL MinMax_stage1_sel                : std_logic;
  SIGNAL MinMax_stage1_val                : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Product1_out1                    : std_logic_vector(31 DOWNTO 0);  -- ufix32

BEGIN
  u_nfp_div_comp : ur_ear_fpga_sim_cp_wideband_gammatone_filter_nfp_div_single
    PORT MAP( nfp_in1 => tauwb,  -- ufix32
              nfp_in2 => Constant_out1,  -- ufix32
              nfp_out => Divide_out1  -- ufix32
              );

  u_nfp_pow_comp : ur_ear_fpga_sim_cp_wideband_gammatone_filter_nfp_pow_single
    PORT MAP( nfp_in1 => Divide_out1,  -- ufix32
              nfp_in2 => Constant1_out1,  -- ufix32
              nfp_out => Pow_out1  -- ufix32
              );

  u_nfp_mul_comp : ur_ear_fpga_sim_cp_wideband_gammatone_filter_nfp_mul_single
    PORT MAP( nfp_in1 => In1,  -- ufix32
              nfp_in2 => Pow_out1,  -- ufix32
              nfp_out => Product_out1  -- ufix32
              );

  u_nfp_mul_comp_1 : ur_ear_fpga_sim_cp_wideband_gammatone_filter_nfp_mul_single
    PORT MAP( nfp_in1 => kconst,  -- ufix32
              nfp_in2 => Product_out1,  -- ufix32
              nfp_out => Gain_out1  -- ufix32
              );

  u_nfp_relop_comp : ur_ear_fpga_sim_cp_wideband_gammatone_filter_nfp_relop_single
    PORT MAP( nfp_in1 => Constant3_out1,  -- ufix32
              nfp_in2 => Divide1_out1,  -- ufix32
              nfp_out1 => MinMax_stage1_sel
              );

  u_nfp_mul_comp_2 : ur_ear_fpga_sim_cp_wideband_gammatone_filter_nfp_mul_single
    PORT MAP( nfp_in1 => Gain_out1,  -- ufix32
              nfp_in2 => MinMax_stage1_val,  -- ufix32
              nfp_out => Product1_out1  -- ufix32
              );

  kconst <= X"461c4000";

  Constant_out1 <= X"3a4b640d";

  Constant1_out1 <= X"40400000";

  Constant3_out1 <= X"3f800000";

  Divide1_out1 <= X"3e4ccccd";

  
  MinMax_stage1_val <= Constant3_out1 WHEN MinMax_stage1_sel = '0' ELSE
      Divide1_out1;

  output1 <= Product1_out1;

END rtl;

