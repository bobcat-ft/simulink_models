-- -------------------------------------------------------------
-- 
-- File Name: D:\NIH3Repo\simulink_models\models\ur_ear_fpga\hdlsrc\ur_ear_fpga_sim\calc_coeff\ur_ear_fpga_sim_calc_coeff_calc_coeff.vhd
-- 
-- Generated by MATLAB 9.9 and HDL Coder 3.17
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: ur_ear_fpga_sim_calc_coeff_calc_coeff
-- Source Path: calc_coeff
-- Hierarchy Level: 7
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY ur_ear_fpga_sim_calc_coeff_calc_coeff IS
  PORT( preal                             :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        temp                              :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        pimg                              :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        rzero                             :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        c1_coef_1                         :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
        c1_coef_2                         :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
        c1_coef_3                         :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
        c1_coef_5                         :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
        c1_coef_6                         :   OUT   std_logic_vector(31 DOWNTO 0)  -- single
        );
END ur_ear_fpga_sim_calc_coeff_calc_coeff;


ARCHITECTURE rtl OF ur_ear_fpga_sim_calc_coeff_calc_coeff IS

  ATTRIBUTE multstyle : string;

  -- Component Declarations
  COMPONENT ur_ear_fpga_sim_calc_coeff_nfp_convert_double2single
    PORT( nfp_in                          :   IN    std_logic_vector(63 DOWNTO 0);  -- ufix64
          nfp_out                         :   OUT   std_logic_vector(31 DOWNTO 0)  -- ufix32
          );
  END COMPONENT;

  COMPONENT ur_ear_fpga_sim_calc_coeff_nfp_sub_single
    PORT( nfp_in1                         :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          nfp_in2                         :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          nfp_out                         :   OUT   std_logic_vector(31 DOWNTO 0)  -- ufix32
          );
  END COMPONENT;

  COMPONENT ur_ear_fpga_sim_calc_coeff_nfp_div_single
    PORT( nfp_in1                         :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          nfp_in2                         :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          nfp_out                         :   OUT   std_logic_vector(31 DOWNTO 0)  -- ufix32
          );
  END COMPONENT;

  COMPONENT ur_ear_fpga_sim_calc_coeff_nfp_gain_pow2_single
    PORT( nfp_in1                         :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          nfp_in2                         :   IN    std_logic;  -- ufix1
          nfp_in3                         :   IN    std_logic_vector(8 DOWNTO 0);  -- ufix9
          nfp_out                         :   OUT   std_logic_vector(31 DOWNTO 0)  -- ufix32
          );
  END COMPONENT;

  COMPONENT ur_ear_fpga_sim_calc_coeff_nfp_add_single
    PORT( nfp_in1                         :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          nfp_in2                         :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          nfp_out                         :   OUT   std_logic_vector(31 DOWNTO 0)  -- ufix32
          );
  END COMPONENT;

  COMPONENT ur_ear_fpga_sim_calc_coeff_nfp_uminus_single
    PORT( nfp_in                          :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          nfp_out                         :   OUT   std_logic_vector(31 DOWNTO 0)  -- ufix32
          );
  END COMPONENT;

  COMPONENT ur_ear_fpga_sim_calc_coeff_nfp_pow_single
    PORT( nfp_in1                         :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          nfp_in2                         :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          nfp_out                         :   OUT   std_logic_vector(31 DOWNTO 0)  -- ufix32
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : ur_ear_fpga_sim_calc_coeff_nfp_convert_double2single
    USE ENTITY work.ur_ear_fpga_sim_calc_coeff_nfp_convert_double2single(rtl);

  FOR ALL : ur_ear_fpga_sim_calc_coeff_nfp_sub_single
    USE ENTITY work.ur_ear_fpga_sim_calc_coeff_nfp_sub_single(rtl);

  FOR ALL : ur_ear_fpga_sim_calc_coeff_nfp_div_single
    USE ENTITY work.ur_ear_fpga_sim_calc_coeff_nfp_div_single(rtl);

  FOR ALL : ur_ear_fpga_sim_calc_coeff_nfp_gain_pow2_single
    USE ENTITY work.ur_ear_fpga_sim_calc_coeff_nfp_gain_pow2_single(rtl);

  FOR ALL : ur_ear_fpga_sim_calc_coeff_nfp_add_single
    USE ENTITY work.ur_ear_fpga_sim_calc_coeff_nfp_add_single(rtl);

  FOR ALL : ur_ear_fpga_sim_calc_coeff_nfp_uminus_single
    USE ENTITY work.ur_ear_fpga_sim_calc_coeff_nfp_uminus_single(rtl);

  FOR ALL : ur_ear_fpga_sim_calc_coeff_nfp_pow_single
    USE ENTITY work.ur_ear_fpga_sim_calc_coeff_nfp_pow_single(rtl);

  -- Signals
  SIGNAL Constant1_out1                   : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Data_Type_Conversion2_out1       : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Subtract_out1                    : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Divide_out1                      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL pw2_sign_const                   : std_logic;  -- ufix1
  SIGNAL pw2_shift_const                  : signed(8 DOWNTO 0);  -- sfix9
  SIGNAL Multiply_out1                    : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Divide1_out1                     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Add_out1                         : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Multiply1_out1                   : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Divide2_out1                     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Constant2_out1                   : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Power1_out1                      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Constant3_out1                   : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Power2_out1                      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Subtract1_out1                   : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Constant4_out1                   : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Power3_out1                      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Subtract2_out1                   : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL pw2_sign_const_1                 : std_logic;  -- ufix1
  SIGNAL pw2_shift_const_1                : signed(8 DOWNTO 0);  -- sfix9
  SIGNAL Multiply2_out1                   : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Divide3_out1                     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Add1_out1                        : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Constant5_out1                   : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Power4_out1                      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Add2_out1                        : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Multiply3_out1                   : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Divide4_out1                     : std_logic_vector(31 DOWNTO 0);  -- ufix32

BEGIN
  u_calc_coeff_nfp_convert_double2single : ur_ear_fpga_sim_calc_coeff_nfp_convert_double2single
    PORT MAP( nfp_in => Constant1_out1,  -- ufix64
              nfp_out => Data_Type_Conversion2_out1  -- ufix32
              );

  u_nfp_sub_comp : ur_ear_fpga_sim_calc_coeff_nfp_sub_single
    PORT MAP( nfp_in1 => Data_Type_Conversion2_out1,  -- ufix32
              nfp_in2 => rzero,  -- ufix32
              nfp_out => Subtract_out1  -- ufix32
              );

  u_nfp_div_comp : ur_ear_fpga_sim_calc_coeff_nfp_div_single
    PORT MAP( nfp_in1 => Subtract_out1,  -- ufix32
              nfp_in2 => temp,  -- ufix32
              nfp_out => Divide_out1  -- ufix32
              );

  u_nfp_gain_pow2_single : ur_ear_fpga_sim_calc_coeff_nfp_gain_pow2_single
    PORT MAP( nfp_in1 => rzero,  -- ufix32
              nfp_in2 => pw2_sign_const,  -- ufix1
              nfp_in3 => std_logic_vector(pw2_shift_const),  -- ufix9
              nfp_out => Multiply_out1  -- ufix32
              );

  u_nfp_div_comp_1 : ur_ear_fpga_sim_calc_coeff_nfp_div_single
    PORT MAP( nfp_in1 => Multiply_out1,  -- ufix32
              nfp_in2 => temp,  -- ufix32
              nfp_out => Divide1_out1  -- ufix32
              );

  u_nfp_add_comp : ur_ear_fpga_sim_calc_coeff_nfp_add_single
    PORT MAP( nfp_in1 => Data_Type_Conversion2_out1,  -- ufix32
              nfp_in2 => rzero,  -- ufix32
              nfp_out => Add_out1  -- ufix32
              );

  u_nfp_uminus_comp : ur_ear_fpga_sim_calc_coeff_nfp_uminus_single
    PORT MAP( nfp_in => Add_out1,  -- ufix32
              nfp_out => Multiply1_out1  -- ufix32
              );

  u_nfp_div_comp_2 : ur_ear_fpga_sim_calc_coeff_nfp_div_single
    PORT MAP( nfp_in1 => Multiply1_out1,  -- ufix32
              nfp_in2 => temp,  -- ufix32
              nfp_out => Divide2_out1  -- ufix32
              );

  u_nfp_pow_comp : ur_ear_fpga_sim_calc_coeff_nfp_pow_single
    PORT MAP( nfp_in1 => Data_Type_Conversion2_out1,  -- ufix32
              nfp_in2 => Constant2_out1,  -- ufix32
              nfp_out => Power1_out1  -- ufix32
              );

  u_nfp_pow_comp_1 : ur_ear_fpga_sim_calc_coeff_nfp_pow_single
    PORT MAP( nfp_in1 => preal,  -- ufix32
              nfp_in2 => Constant3_out1,  -- ufix32
              nfp_out => Power2_out1  -- ufix32
              );

  u_nfp_sub_comp_1 : ur_ear_fpga_sim_calc_coeff_nfp_sub_single
    PORT MAP( nfp_in1 => Power1_out1,  -- ufix32
              nfp_in2 => Power2_out1,  -- ufix32
              nfp_out => Subtract1_out1  -- ufix32
              );

  u_nfp_pow_comp_2 : ur_ear_fpga_sim_calc_coeff_nfp_pow_single
    PORT MAP( nfp_in1 => pimg,  -- ufix32
              nfp_in2 => Constant4_out1,  -- ufix32
              nfp_out => Power3_out1  -- ufix32
              );

  u_nfp_sub_comp_2 : ur_ear_fpga_sim_calc_coeff_nfp_sub_single
    PORT MAP( nfp_in1 => Subtract1_out1,  -- ufix32
              nfp_in2 => Power3_out1,  -- ufix32
              nfp_out => Subtract2_out1  -- ufix32
              );

  u_nfp_gain_pow2_single_1 : ur_ear_fpga_sim_calc_coeff_nfp_gain_pow2_single
    PORT MAP( nfp_in1 => Subtract2_out1,  -- ufix32
              nfp_in2 => pw2_sign_const_1,  -- ufix1
              nfp_in3 => std_logic_vector(pw2_shift_const_1),  -- ufix9
              nfp_out => Multiply2_out1  -- ufix32
              );

  u_nfp_div_comp_3 : ur_ear_fpga_sim_calc_coeff_nfp_div_single
    PORT MAP( nfp_in1 => Multiply2_out1,  -- ufix32
              nfp_in2 => temp,  -- ufix32
              nfp_out => Divide3_out1  -- ufix32
              );

  u_nfp_add_comp_1 : ur_ear_fpga_sim_calc_coeff_nfp_add_single
    PORT MAP( nfp_in1 => preal,  -- ufix32
              nfp_in2 => Data_Type_Conversion2_out1,  -- ufix32
              nfp_out => Add1_out1  -- ufix32
              );

  u_nfp_pow_comp_3 : ur_ear_fpga_sim_calc_coeff_nfp_pow_single
    PORT MAP( nfp_in1 => Add1_out1,  -- ufix32
              nfp_in2 => Constant5_out1,  -- ufix32
              nfp_out => Power4_out1  -- ufix32
              );

  u_nfp_add_comp_2 : ur_ear_fpga_sim_calc_coeff_nfp_add_single
    PORT MAP( nfp_in1 => Power3_out1,  -- ufix32
              nfp_in2 => Power4_out1,  -- ufix32
              nfp_out => Add2_out1  -- ufix32
              );

  u_nfp_uminus_comp_1 : ur_ear_fpga_sim_calc_coeff_nfp_uminus_single
    PORT MAP( nfp_in => Add2_out1,  -- ufix32
              nfp_out => Multiply3_out1  -- ufix32
              );

  u_nfp_div_comp_4 : ur_ear_fpga_sim_calc_coeff_nfp_div_single
    PORT MAP( nfp_in1 => Multiply3_out1,  -- ufix32
              nfp_in2 => temp,  -- ufix32
              nfp_out => Divide4_out1  -- ufix32
              );

  Constant1_out1 <= X"40ded8ed290f7752";

  pw2_sign_const <= '1';

  pw2_shift_const <= to_signed(16#001#, 9);

  Constant2_out1 <= X"40000000";

  Constant3_out1 <= X"40000000";

  Constant4_out1 <= X"40000000";

  pw2_sign_const_1 <= '0';

  pw2_shift_const_1 <= to_signed(16#001#, 9);

  Constant5_out1 <= X"40000000";

  c1_coef_1 <= Divide_out1;

  c1_coef_2 <= Divide1_out1;

  c1_coef_3 <= Divide2_out1;

  c1_coef_5 <= Divide3_out1;

  c1_coef_6 <= Divide4_out1;

END rtl;

