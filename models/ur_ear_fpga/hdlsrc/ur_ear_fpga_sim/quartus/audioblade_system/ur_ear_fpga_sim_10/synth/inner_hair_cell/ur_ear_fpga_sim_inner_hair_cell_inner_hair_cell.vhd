-- -------------------------------------------------------------
-- 
-- File Name: D:\NIH3Repo\simulink_models\models\ur_ear_fpga\hdlsrc\ur_ear_fpga_sim\inner_hair_cell\ur_ear_fpga_sim_inner_hair_cell_inner_hair_cell.vhd
-- 
-- Generated by MATLAB 9.9 and HDL Coder 3.17
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: ur_ear_fpga_sim_inner_hair_cell_inner_hair_cell
-- Source Path: inner_hair_cell
-- Hierarchy Level: 5
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY ur_ear_fpga_sim_inner_hair_cell_inner_hair_cell IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        enb_1_2048_0                      :   IN    std_logic;
        enb_1_2048_1                      :   IN    std_logic;
        ihc_c1_in                         :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        ihc_c2_in                         :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        ihc_out                           :   OUT   std_logic_vector(31 DOWNTO 0)  -- single
        );
END ur_ear_fpga_sim_inner_hair_cell_inner_hair_cell;


ARCHITECTURE rtl OF ur_ear_fpga_sim_inner_hair_cell_inner_hair_cell IS

  ATTRIBUTE multstyle : string;

  -- Component Declarations
  COMPONENT ur_ear_fpga_sim_inner_hair_cell_nfp_convert_double2single
    PORT( nfp_in                          :   IN    std_logic_vector(63 DOWNTO 0);  -- ufix64
          nfp_out                         :   OUT   std_logic_vector(31 DOWNTO 0)  -- ufix32
          );
  END COMPONENT;

  COMPONENT ihc_nl_log
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          enb_1_2048_1                    :   IN    std_logic;
          stimulus                        :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          ihcasym                         :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          slope                           :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          output                          :   OUT   std_logic_vector(31 DOWNTO 0)  -- single
          );
  END COMPONENT;

  COMPONENT ihc_lowpass_filter
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb_1_2048_0                    :   IN    std_logic;
          In1                             :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          In2                             :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          Source_Data                     :   OUT   std_logic_vector(31 DOWNTO 0)  -- single
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : ur_ear_fpga_sim_inner_hair_cell_nfp_convert_double2single
    USE ENTITY work.ur_ear_fpga_sim_inner_hair_cell_nfp_convert_double2single(rtl);

  FOR ALL : ihc_nl_log
    USE ENTITY work.ur_ear_fpga_sim_ihc_nl_log_ihc_nl_log(rtl);

  FOR ALL : ihc_lowpass_filter
    USE ENTITY work.ur_ear_fpga_sim_ihc_lowpass_filter_ihc_lowpass_filter(rtl);

  -- Signals
  SIGNAL Data_Type_Conversion2_out1       : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Data_Type_Conversion3_out1       : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL C1_Chirp_Nonlinear_Log_Path_out1 : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Data_Type_Conversion4_out1       : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Data_Type_Conversion5_out1       : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL C2_Wideband_Nonlinear_Log_Path_out1 : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Model2_out1                      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Constant1_out1                   : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Constant2_out1                   : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Constant4_out1                   : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Constant5_out1                   : std_logic_vector(63 DOWNTO 0);  -- ufix64

BEGIN
  u_inner_hair_cell_nfp_convert_double2single : ur_ear_fpga_sim_inner_hair_cell_nfp_convert_double2single
    PORT MAP( nfp_in => Constant1_out1,  -- ufix64
              nfp_out => Data_Type_Conversion2_out1  -- ufix32
              );

  u_inner_hair_cell_nfp_convert_double2single_1 : ur_ear_fpga_sim_inner_hair_cell_nfp_convert_double2single
    PORT MAP( nfp_in => Constant2_out1,  -- ufix64
              nfp_out => Data_Type_Conversion3_out1  -- ufix32
              );

  u_C1_Chirp_Nonlinear_Log_Path : ihc_nl_log
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              enb_1_2048_1 => enb_1_2048_1,
              stimulus => ihc_c1_in,  -- single
              ihcasym => Data_Type_Conversion2_out1,  -- single
              slope => Data_Type_Conversion3_out1,  -- single
              output => C1_Chirp_Nonlinear_Log_Path_out1  -- single
              );

  u_inner_hair_cell_nfp_convert_double2single_2 : ur_ear_fpga_sim_inner_hair_cell_nfp_convert_double2single
    PORT MAP( nfp_in => Constant4_out1,  -- ufix64
              nfp_out => Data_Type_Conversion4_out1  -- ufix32
              );

  u_inner_hair_cell_nfp_convert_double2single_3 : ur_ear_fpga_sim_inner_hair_cell_nfp_convert_double2single
    PORT MAP( nfp_in => Constant5_out1,  -- ufix64
              nfp_out => Data_Type_Conversion5_out1  -- ufix32
              );

  u_C2_Wideband_Nonlinear_Log_Path : ihc_nl_log
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              enb_1_2048_1 => enb_1_2048_1,
              stimulus => ihc_c2_in,  -- single
              ihcasym => Data_Type_Conversion4_out1,  -- single
              slope => Data_Type_Conversion5_out1,  -- single
              output => C2_Wideband_Nonlinear_Log_Path_out1  -- single
              );

  u_Model2 : ihc_lowpass_filter
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_2048_0 => enb_1_2048_0,
              In1 => C1_Chirp_Nonlinear_Log_Path_out1,  -- single
              In2 => C2_Wideband_Nonlinear_Log_Path_out1,  -- single
              Source_Data => Model2_out1  -- single
              );

  Constant1_out1 <= X"4008000000000000";

  Constant2_out1 <= X"3fb999999999999a";

  Constant4_out1 <= X"3ff0000000000000";

  Constant5_out1 <= X"3fc999999999999a";

  ihc_out <= Model2_out1;

END rtl;

