-- -------------------------------------------------------------
-- 
-- File Name: D:\NIH3Repo\simulink_models\models\ur_ear_fpga\hdlsrc\ur_ear_fpga_sim\accumulator\ur_ear_fpga_sim_accumulator_accumulator.vhd
-- 
-- Generated by MATLAB 9.9 and HDL Coder 3.17
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: ur_ear_fpga_sim_accumulator_accumulator
-- Source Path: accumulator
-- Hierarchy Level: 4
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY ur_ear_fpga_sim_accumulator_accumulator IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb_1_2048_0                      :   IN    std_logic;
        register_control_integration_time :   IN    std_logic_vector(31 DOWNTO 0);  -- uint32
        redocking_site_1_input            :   IN    std_logic;
        redocking_site_2_spcount          :   IN    std_logic;
        redocking_site_3_spcount          :   IN    std_logic;
        redocking_site_4_spcount          :   IN    std_logic;
        count                             :   OUT   std_logic_vector(17 DOWNTO 0);  -- ufix18
        valid                             :   OUT   std_logic
        );
END ur_ear_fpga_sim_accumulator_accumulator;


ARCHITECTURE rtl OF ur_ear_fpga_sim_accumulator_accumulator IS

  ATTRIBUTE multstyle : string;

  -- Signals
  SIGNAL register_control_integration_time_unsigned : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL Constant_out1                    : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL Subtract_sub_cast                : signed(32 DOWNTO 0);  -- sfix33
  SIGNAL Subtract_sub_cast_1              : signed(32 DOWNTO 0);  -- sfix33
  SIGNAL Subtract_out1                    : signed(32 DOWNTO 0);  -- sfix33
  SIGNAL Equal_relop1                     : std_logic;
  SIGNAL NOT_out1                         : std_logic;
  SIGNAL HDL_Counter_out1                 : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL Equal_1_cast                     : signed(32 DOWNTO 0);  -- sfix33
  SIGNAL HDL_Counter1_out1                : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL HDL_Counter4_out1                : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL HDL_Counter3_out1                : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL HDL_Counter2_out1                : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL Add_add_temp                     : unsigned(17 DOWNTO 0);  -- ufix18
  SIGNAL Add_add_temp_1                   : unsigned(17 DOWNTO 0);  -- ufix18
  SIGNAL Add_out1                         : unsigned(17 DOWNTO 0);  -- ufix18

BEGIN
  register_control_integration_time_unsigned <= unsigned(register_control_integration_time);

  Constant_out1 <= to_unsigned(1, 32);

  Subtract_sub_cast <= signed(resize(register_control_integration_time_unsigned, 33));
  Subtract_sub_cast_1 <= signed(resize(Constant_out1, 33));
  Subtract_out1 <= Subtract_sub_cast - Subtract_sub_cast_1;

  NOT_out1 <=  NOT Equal_relop1;

  -- Count limited, Unsigned Counter
  --  initial value   = 0
  --  step value      = 1
  --  count to value  = 65535
  HDL_Counter_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      HDL_Counter_out1 <= to_unsigned(16#0000#, 16);
    ELSIF rising_edge(clk) THEN
      IF enb_1_2048_0 = '1' THEN
        IF Equal_relop1 = '1' THEN 
          HDL_Counter_out1 <= to_unsigned(16#0000#, 16);
        ELSIF NOT_out1 = '1' THEN 
          HDL_Counter_out1 <= HDL_Counter_out1 + to_unsigned(16#0001#, 16);
        END IF;
      END IF;
    END IF;
  END PROCESS HDL_Counter_process;


  Equal_1_cast <= signed(resize(HDL_Counter_out1, 33));
  
  Equal_relop1 <= '1' WHEN Subtract_out1 = Equal_1_cast ELSE
      '0';

  -- Count limited, Unsigned Counter
  --  initial value   = 0
  --  step value      = 1
  --  count to value  = 65535
  HDL_Counter1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      HDL_Counter1_out1 <= to_unsigned(16#0000#, 16);
    ELSIF rising_edge(clk) THEN
      IF enb_1_2048_0 = '1' THEN
        IF Equal_relop1 = '1' THEN 
          HDL_Counter1_out1 <= to_unsigned(16#0000#, 16);
        ELSIF redocking_site_1_input = '1' THEN 
          HDL_Counter1_out1 <= HDL_Counter1_out1 + to_unsigned(16#0001#, 16);
        END IF;
      END IF;
    END IF;
  END PROCESS HDL_Counter1_process;


  -- Count limited, Unsigned Counter
  --  initial value   = 0
  --  step value      = 1
  --  count to value  = 65535
  HDL_Counter4_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      HDL_Counter4_out1 <= to_unsigned(16#0000#, 16);
    ELSIF rising_edge(clk) THEN
      IF enb_1_2048_0 = '1' THEN
        IF Equal_relop1 = '1' THEN 
          HDL_Counter4_out1 <= to_unsigned(16#0000#, 16);
        ELSIF redocking_site_2_spcount = '1' THEN 
          HDL_Counter4_out1 <= HDL_Counter4_out1 + to_unsigned(16#0001#, 16);
        END IF;
      END IF;
    END IF;
  END PROCESS HDL_Counter4_process;


  -- Count limited, Unsigned Counter
  --  initial value   = 0
  --  step value      = 1
  --  count to value  = 65535
  HDL_Counter3_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      HDL_Counter3_out1 <= to_unsigned(16#0000#, 16);
    ELSIF rising_edge(clk) THEN
      IF enb_1_2048_0 = '1' THEN
        IF Equal_relop1 = '1' THEN 
          HDL_Counter3_out1 <= to_unsigned(16#0000#, 16);
        ELSIF redocking_site_3_spcount = '1' THEN 
          HDL_Counter3_out1 <= HDL_Counter3_out1 + to_unsigned(16#0001#, 16);
        END IF;
      END IF;
    END IF;
  END PROCESS HDL_Counter3_process;


  -- Count limited, Unsigned Counter
  --  initial value   = 0
  --  step value      = 1
  --  count to value  = 65535
  HDL_Counter2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      HDL_Counter2_out1 <= to_unsigned(16#0000#, 16);
    ELSIF rising_edge(clk) THEN
      IF enb_1_2048_0 = '1' THEN
        IF Equal_relop1 = '1' THEN 
          HDL_Counter2_out1 <= to_unsigned(16#0000#, 16);
        ELSIF redocking_site_4_spcount = '1' THEN 
          HDL_Counter2_out1 <= HDL_Counter2_out1 + to_unsigned(16#0001#, 16);
        END IF;
      END IF;
    END IF;
  END PROCESS HDL_Counter2_process;


  Add_add_temp <= resize(HDL_Counter1_out1, 18) + resize(HDL_Counter4_out1, 18);
  Add_add_temp_1 <= Add_add_temp + resize(HDL_Counter3_out1, 18);
  Add_out1 <= Add_add_temp_1 + resize(HDL_Counter2_out1, 18);

  count <= std_logic_vector(Add_out1);

  valid <= Equal_relop1;

END rtl;

