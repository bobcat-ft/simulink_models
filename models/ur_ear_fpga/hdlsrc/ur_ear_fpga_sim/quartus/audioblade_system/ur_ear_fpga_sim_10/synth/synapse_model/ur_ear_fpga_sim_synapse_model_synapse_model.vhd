-- -------------------------------------------------------------
-- 
-- File Name: D:\NIH3Repo\simulink_models\models\ur_ear_fpga\hdlsrc\ur_ear_fpga_sim\synapse_model\ur_ear_fpga_sim_synapse_model_synapse_model.vhd
-- 
-- Generated by MATLAB 9.9 and HDL Coder 3.17
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: ur_ear_fpga_sim_synapse_model_synapse_model
-- Source Path: synapse_model
-- Hierarchy Level: 4
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY ur_ear_fpga_sim_synapse_model_synapse_model IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        enb_1_2048_0                      :   IN    std_logic;
        enb_1_2048_1                      :   IN    std_logic;
        pla_nlf_in                        :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        randNum                           :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        syn_out                           :   OUT   std_logic_vector(31 DOWNTO 0)  -- single
        );
END ur_ear_fpga_sim_synapse_model_synapse_model;


ARCHITECTURE rtl OF ur_ear_fpga_sim_synapse_model_synapse_model IS

  -- Component Declarations
  COMPONENT nl_pla_filter
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          enb_1_2048_1                    :   IN    std_logic;
          pla_nlf_in                      :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          pla_nlf_out                     :   OUT   std_logic_vector(31 DOWNTO 0)  -- single
          );
  END COMPONENT;

  COMPONENT power_law_adapter
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb_1_2048_0                    :   IN    std_logic;
          pla_in                          :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          ffGn                            :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          syn_out                         :   OUT   std_logic_vector(31 DOWNTO 0)  -- single
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : nl_pla_filter
    USE ENTITY work.ur_ear_fpga_sim_nl_pla_filter_nl_pla_filter(rtl);

  FOR ALL : power_law_adapter
    USE ENTITY work.ur_ear_fpga_sim_power_law_adapter_power_law_adapter(rtl);

  -- Signals
  SIGNAL Model_out1                       : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL randNum_1                        : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL synout                           : std_logic_vector(31 DOWNTO 0);  -- ufix32

BEGIN
  u_Model : nl_pla_filter
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              enb_1_2048_1 => enb_1_2048_1,
              pla_nlf_in => pla_nlf_in,  -- single
              pla_nlf_out => Model_out1  -- single
              );

  u_Model1 : power_law_adapter
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_2048_0 => enb_1_2048_0,
              pla_in => Model_out1,  -- single
              ffGn => randNum_1,  -- single
              syn_out => synout  -- single
              );

  delayMatch_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      randNum_1 <= X"00000000";
    ELSIF rising_edge(clk) THEN
      IF enb_1_2048_0 = '1' THEN
        randNum_1 <= randNum;
      END IF;
    END IF;
  END PROCESS delayMatch_process;


  syn_out <= synout;

END rtl;

