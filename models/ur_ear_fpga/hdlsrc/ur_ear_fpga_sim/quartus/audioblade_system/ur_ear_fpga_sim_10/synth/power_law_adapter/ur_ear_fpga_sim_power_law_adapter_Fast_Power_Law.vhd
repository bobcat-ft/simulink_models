-- -------------------------------------------------------------
-- 
-- File Name: D:\NIH3Repo\simulink_models\models\ur_ear_fpga\hdlsrc\ur_ear_fpga_sim\power_law_adapter\ur_ear_fpga_sim_power_law_adapter_Fast_Power_Law.vhd
-- 
-- Generated by MATLAB 9.9 and HDL Coder 3.17
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: ur_ear_fpga_sim_power_law_adapter_Fast_Power_Law
-- Source Path: power_law_adapter/Fast Power Law
-- Hierarchy Level: 6
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY ur_ear_fpga_sim_power_law_adapter_Fast_Power_Law IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb_1_2048_0                      :   IN    std_logic;
        stimulus1                         :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        output1                           :   OUT   std_logic_vector(31 DOWNTO 0)  -- single
        );
END ur_ear_fpga_sim_power_law_adapter_Fast_Power_Law;


ARCHITECTURE rtl OF ur_ear_fpga_sim_power_law_adapter_Fast_Power_Law IS

  ATTRIBUTE multstyle : string;

  -- Component Declarations
  COMPONENT ur_ear_fpga_sim_power_law_adapter_nfp_mul_single
    PORT( nfp_in1                         :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          nfp_in2                         :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          nfp_out                         :   OUT   std_logic_vector(31 DOWNTO 0)  -- ufix32
          );
  END COMPONENT;

  COMPONENT ur_ear_fpga_sim_power_law_adapter_nfp_add_single
    PORT( nfp_in1                         :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          nfp_in2                         :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          nfp_out                         :   OUT   std_logic_vector(31 DOWNTO 0)  -- ufix32
          );
  END COMPONENT;

  COMPONENT ur_ear_fpga_sim_power_law_adapter_nfp_uminus_single
    PORT( nfp_in                          :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          nfp_out                         :   OUT   std_logic_vector(31 DOWNTO 0)  -- ufix32
          );
  END COMPONENT;

  COMPONENT ur_ear_fpga_sim_power_law_adapter_nfp_gain_pow2_single
    PORT( nfp_in1                         :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          nfp_in2                         :   IN    std_logic;  -- ufix1
          nfp_in3                         :   IN    std_logic_vector(8 DOWNTO 0);  -- ufix9
          nfp_out                         :   OUT   std_logic_vector(31 DOWNTO 0)  -- ufix32
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : ur_ear_fpga_sim_power_law_adapter_nfp_mul_single
    USE ENTITY work.ur_ear_fpga_sim_power_law_adapter_nfp_mul_single(rtl);

  FOR ALL : ur_ear_fpga_sim_power_law_adapter_nfp_add_single
    USE ENTITY work.ur_ear_fpga_sim_power_law_adapter_nfp_add_single(rtl);

  FOR ALL : ur_ear_fpga_sim_power_law_adapter_nfp_uminus_single
    USE ENTITY work.ur_ear_fpga_sim_power_law_adapter_nfp_uminus_single(rtl);

  FOR ALL : ur_ear_fpga_sim_power_law_adapter_nfp_gain_pow2_single
    USE ENTITY work.ur_ear_fpga_sim_power_law_adapter_nfp_gain_pow2_single(rtl);

  -- Signals
  SIGNAL Constant24_out1                  : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Unit_Delay6_out1                 : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Constant32_out1                  : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Constant23_out1                  : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Product33_out1                   : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Product32_out1                   : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Unit_Delay7_out1                 : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Product25_out1                   : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Sum21_out1                       : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Sum24_out1                       : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Constant39_out1                  : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Constant26_out1                  : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Unit_Delay12_out1                : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Unit_Delay13_out1                : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Gain12_out1                      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Product26_out1                   : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Sum25_out1                       : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Gain11_out1                      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Product34_out1                   : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Sum20_out1                       : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL pw2_sign_const                   : std_logic;  -- ufix1
  SIGNAL pw2_shift_const                  : signed(8 DOWNTO 0);  -- sfix9
  SIGNAL Constant34_out1                  : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Product37_out1                   : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Constant35_out1                  : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Product38_out1                   : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Product35_out1                   : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Sum27_out1                       : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Sum28_out1                       : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Constant27_out1                  : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Constant28_out1                  : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Unit_Delay16_out1                : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Unit_Delay17_out1                : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Gain15_out1                      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Product36_out1                   : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Sum29_out1                       : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Gain13_out1                      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Product39_out1                   : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Sum26_out1                       : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL pw2_sign_const_1                 : std_logic;  -- ufix1
  SIGNAL pw2_shift_const_1                : signed(8 DOWNTO 0);  -- sfix9
  SIGNAL Constant37_out1                  : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Product29_out1                   : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Constant30_out1                  : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Constant31_out1                  : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Product30_out1                   : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Product27_out1                   : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Sum31_out1                       : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Sum22_out1                       : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Constant38_out1                  : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Unit_Delay18_out1                : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Unit_Delay19_out1                : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Gain16_out1                      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Product28_out1                   : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Sum23_out1                       : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Gain14_out1                      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Product31_out1                   : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Sum30_out1                       : std_logic_vector(31 DOWNTO 0);  -- ufix32

BEGIN
  u_nfp_mul_comp : ur_ear_fpga_sim_power_law_adapter_nfp_mul_single
    PORT MAP( nfp_in1 => Constant23_out1,  -- ufix32
              nfp_in2 => stimulus1,  -- ufix32
              nfp_out => Product33_out1  -- ufix32
              );

  u_nfp_mul_comp_1 : ur_ear_fpga_sim_power_law_adapter_nfp_mul_single
    PORT MAP( nfp_in1 => Constant24_out1,  -- ufix32
              nfp_in2 => Unit_Delay6_out1,  -- ufix32
              nfp_out => Product32_out1  -- ufix32
              );

  u_nfp_mul_comp_2 : ur_ear_fpga_sim_power_law_adapter_nfp_mul_single
    PORT MAP( nfp_in1 => Constant32_out1,  -- ufix32
              nfp_in2 => Unit_Delay7_out1,  -- ufix32
              nfp_out => Product25_out1  -- ufix32
              );

  u_nfp_add_comp : ur_ear_fpga_sim_power_law_adapter_nfp_add_single
    PORT MAP( nfp_in1 => Product32_out1,  -- ufix32
              nfp_in2 => Product25_out1,  -- ufix32
              nfp_out => Sum21_out1  -- ufix32
              );

  u_nfp_add_comp_1 : ur_ear_fpga_sim_power_law_adapter_nfp_add_single
    PORT MAP( nfp_in1 => Product33_out1,  -- ufix32
              nfp_in2 => Sum21_out1,  -- ufix32
              nfp_out => Sum24_out1  -- ufix32
              );

  u_nfp_uminus_comp : ur_ear_fpga_sim_power_law_adapter_nfp_uminus_single
    PORT MAP( nfp_in => Unit_Delay13_out1,  -- ufix32
              nfp_out => Gain12_out1  -- ufix32
              );

  u_nfp_mul_comp_3 : ur_ear_fpga_sim_power_law_adapter_nfp_mul_single
    PORT MAP( nfp_in1 => Constant26_out1,  -- ufix32
              nfp_in2 => Gain12_out1,  -- ufix32
              nfp_out => Product26_out1  -- ufix32
              );

  u_nfp_uminus_comp_1 : ur_ear_fpga_sim_power_law_adapter_nfp_uminus_single
    PORT MAP( nfp_in => Unit_Delay12_out1,  -- ufix32
              nfp_out => Gain11_out1  -- ufix32
              );

  u_nfp_mul_comp_4 : ur_ear_fpga_sim_power_law_adapter_nfp_mul_single
    PORT MAP( nfp_in1 => Constant39_out1,  -- ufix32
              nfp_in2 => Gain11_out1,  -- ufix32
              nfp_out => Product34_out1  -- ufix32
              );

  u_nfp_add_comp_2 : ur_ear_fpga_sim_power_law_adapter_nfp_add_single
    PORT MAP( nfp_in1 => Product34_out1,  -- ufix32
              nfp_in2 => Product26_out1,  -- ufix32
              nfp_out => Sum20_out1  -- ufix32
              );

  u_nfp_add_comp_3 : ur_ear_fpga_sim_power_law_adapter_nfp_add_single
    PORT MAP( nfp_in1 => Sum24_out1,  -- ufix32
              nfp_in2 => Sum20_out1,  -- ufix32
              nfp_out => Sum25_out1  -- ufix32
              );

  u_nfp_mul_comp_5 : ur_ear_fpga_sim_power_law_adapter_nfp_mul_single
    PORT MAP( nfp_in1 => Constant34_out1,  -- ufix32
              nfp_in2 => Unit_Delay12_out1,  -- ufix32
              nfp_out => Product37_out1  -- ufix32
              );

  u_nfp_gain_pow2_single : ur_ear_fpga_sim_power_law_adapter_nfp_gain_pow2_single
    PORT MAP( nfp_in1 => Sum25_out1,  -- ufix32
              nfp_in2 => pw2_sign_const,  -- ufix1
              nfp_in3 => std_logic_vector(pw2_shift_const),  -- ufix9
              nfp_out => Product38_out1  -- ufix32
              );

  u_nfp_mul_comp_6 : ur_ear_fpga_sim_power_law_adapter_nfp_mul_single
    PORT MAP( nfp_in1 => Constant35_out1,  -- ufix32
              nfp_in2 => Unit_Delay13_out1,  -- ufix32
              nfp_out => Product35_out1  -- ufix32
              );

  u_nfp_add_comp_4 : ur_ear_fpga_sim_power_law_adapter_nfp_add_single
    PORT MAP( nfp_in1 => Product37_out1,  -- ufix32
              nfp_in2 => Product35_out1,  -- ufix32
              nfp_out => Sum27_out1  -- ufix32
              );

  u_nfp_add_comp_5 : ur_ear_fpga_sim_power_law_adapter_nfp_add_single
    PORT MAP( nfp_in1 => Product38_out1,  -- ufix32
              nfp_in2 => Sum27_out1,  -- ufix32
              nfp_out => Sum28_out1  -- ufix32
              );

  u_nfp_uminus_comp_2 : ur_ear_fpga_sim_power_law_adapter_nfp_uminus_single
    PORT MAP( nfp_in => Unit_Delay17_out1,  -- ufix32
              nfp_out => Gain15_out1  -- ufix32
              );

  u_nfp_mul_comp_7 : ur_ear_fpga_sim_power_law_adapter_nfp_mul_single
    PORT MAP( nfp_in1 => Constant28_out1,  -- ufix32
              nfp_in2 => Gain15_out1,  -- ufix32
              nfp_out => Product36_out1  -- ufix32
              );

  u_nfp_uminus_comp_3 : ur_ear_fpga_sim_power_law_adapter_nfp_uminus_single
    PORT MAP( nfp_in => Unit_Delay16_out1,  -- ufix32
              nfp_out => Gain13_out1  -- ufix32
              );

  u_nfp_mul_comp_8 : ur_ear_fpga_sim_power_law_adapter_nfp_mul_single
    PORT MAP( nfp_in1 => Constant27_out1,  -- ufix32
              nfp_in2 => Gain13_out1,  -- ufix32
              nfp_out => Product39_out1  -- ufix32
              );

  u_nfp_add_comp_6 : ur_ear_fpga_sim_power_law_adapter_nfp_add_single
    PORT MAP( nfp_in1 => Product39_out1,  -- ufix32
              nfp_in2 => Product36_out1,  -- ufix32
              nfp_out => Sum26_out1  -- ufix32
              );

  u_nfp_add_comp_7 : ur_ear_fpga_sim_power_law_adapter_nfp_add_single
    PORT MAP( nfp_in1 => Sum28_out1,  -- ufix32
              nfp_in2 => Sum26_out1,  -- ufix32
              nfp_out => Sum29_out1  -- ufix32
              );

  u_nfp_mul_comp_9 : ur_ear_fpga_sim_power_law_adapter_nfp_mul_single
    PORT MAP( nfp_in1 => Constant37_out1,  -- ufix32
              nfp_in2 => Unit_Delay16_out1,  -- ufix32
              nfp_out => Product29_out1  -- ufix32
              );

  u_nfp_gain_pow2_single_1 : ur_ear_fpga_sim_power_law_adapter_nfp_gain_pow2_single
    PORT MAP( nfp_in1 => Sum29_out1,  -- ufix32
              nfp_in2 => pw2_sign_const_1,  -- ufix1
              nfp_in3 => std_logic_vector(pw2_shift_const_1),  -- ufix9
              nfp_out => Product30_out1  -- ufix32
              );

  u_nfp_mul_comp_10 : ur_ear_fpga_sim_power_law_adapter_nfp_mul_single
    PORT MAP( nfp_in1 => Constant30_out1,  -- ufix32
              nfp_in2 => Unit_Delay17_out1,  -- ufix32
              nfp_out => Product27_out1  -- ufix32
              );

  u_nfp_add_comp_8 : ur_ear_fpga_sim_power_law_adapter_nfp_add_single
    PORT MAP( nfp_in1 => Product29_out1,  -- ufix32
              nfp_in2 => Product27_out1,  -- ufix32
              nfp_out => Sum31_out1  -- ufix32
              );

  u_nfp_add_comp_9 : ur_ear_fpga_sim_power_law_adapter_nfp_add_single
    PORT MAP( nfp_in1 => Product30_out1,  -- ufix32
              nfp_in2 => Sum31_out1,  -- ufix32
              nfp_out => Sum22_out1  -- ufix32
              );

  u_nfp_uminus_comp_4 : ur_ear_fpga_sim_power_law_adapter_nfp_uminus_single
    PORT MAP( nfp_in => Unit_Delay19_out1,  -- ufix32
              nfp_out => Gain16_out1  -- ufix32
              );

  u_nfp_mul_comp_11 : ur_ear_fpga_sim_power_law_adapter_nfp_mul_single
    PORT MAP( nfp_in1 => Constant38_out1,  -- ufix32
              nfp_in2 => Gain16_out1,  -- ufix32
              nfp_out => Product28_out1  -- ufix32
              );

  u_nfp_uminus_comp_5 : ur_ear_fpga_sim_power_law_adapter_nfp_uminus_single
    PORT MAP( nfp_in => Unit_Delay18_out1,  -- ufix32
              nfp_out => Gain14_out1  -- ufix32
              );

  u_nfp_mul_comp_12 : ur_ear_fpga_sim_power_law_adapter_nfp_mul_single
    PORT MAP( nfp_in1 => Constant31_out1,  -- ufix32
              nfp_in2 => Gain14_out1,  -- ufix32
              nfp_out => Product31_out1  -- ufix32
              );

  u_nfp_add_comp_10 : ur_ear_fpga_sim_power_law_adapter_nfp_add_single
    PORT MAP( nfp_in1 => Product31_out1,  -- ufix32
              nfp_in2 => Product28_out1,  -- ufix32
              nfp_out => Sum30_out1  -- ufix32
              );

  u_nfp_add_comp_11 : ur_ear_fpga_sim_power_law_adapter_nfp_add_single
    PORT MAP( nfp_in1 => Sum22_out1,  -- ufix32
              nfp_in2 => Sum30_out1,  -- ufix32
              nfp_out => Sum23_out1  -- ufix32
              );

  Constant24_out1 <= X"ba8258c6";

  Unit_Delay6_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Unit_Delay6_out1 <= X"00000000";
    ELSIF rising_edge(clk) THEN
      IF enb_1_2048_0 = '1' THEN
        Unit_Delay6_out1 <= stimulus1;
      END IF;
    END IF;
  END PROCESS Unit_Delay6_process;


  Constant32_out1 <= X"27291e82";

  Constant23_out1 <= X"3a83126f";

  Unit_Delay7_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Unit_Delay7_out1 <= X"00000000";
    ELSIF rising_edge(clk) THEN
      IF enb_1_2048_0 = '1' THEN
        Unit_Delay7_out1 <= Unit_Delay6_out1;
      END IF;
    END IF;
  END PROCESS Unit_Delay7_process;


  Constant39_out1 <= X"bffefe0c";

  Constant26_out1 <= X"3f7dfced";

  Unit_Delay13_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Unit_Delay13_out1 <= X"00000000";
    ELSIF rising_edge(clk) THEN
      IF enb_1_2048_0 = '1' THEN
        Unit_Delay13_out1 <= Unit_Delay12_out1;
      END IF;
    END IF;
  END PROCESS Unit_Delay13_process;


  Unit_Delay12_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Unit_Delay12_out1 <= X"00000000";
    ELSIF rising_edge(clk) THEN
      IF enb_1_2048_0 = '1' THEN
        Unit_Delay12_out1 <= Sum25_out1;
      END IF;
    END IF;
  END PROCESS Unit_Delay12_process;


  pw2_sign_const <= '0';

  pw2_shift_const <= to_signed(16#000#, 9);

  Constant34_out1 <= X"bfffb9b9";

  Constant35_out1 <= X"3f7f737b";

  Constant27_out1 <= X"bfffe5a2";

  Constant28_out1 <= X"3f7fcb45";

  Unit_Delay17_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Unit_Delay17_out1 <= X"00000000";
    ELSIF rising_edge(clk) THEN
      IF enb_1_2048_0 = '1' THEN
        Unit_Delay17_out1 <= Unit_Delay16_out1;
      END IF;
    END IF;
  END PROCESS Unit_Delay17_process;


  Unit_Delay16_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Unit_Delay16_out1 <= X"00000000";
    ELSIF rising_edge(clk) THEN
      IF enb_1_2048_0 = '1' THEN
        Unit_Delay16_out1 <= Sum29_out1;
      END IF;
    END IF;
  END PROCESS Unit_Delay16_process;


  pw2_sign_const_1 <= '0';

  pw2_shift_const_1 <= to_signed(16#000#, 9);

  Constant37_out1 <= X"3f4c5ae1";

  Constant30_out1 <= X"3e4be929";

  Constant31_out1 <= X"3f4c5ae1";

  Constant38_out1 <= X"3e4be929";

  Unit_Delay19_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Unit_Delay19_out1 <= X"00000000";
    ELSIF rising_edge(clk) THEN
      IF enb_1_2048_0 = '1' THEN
        Unit_Delay19_out1 <= Unit_Delay18_out1;
      END IF;
    END IF;
  END PROCESS Unit_Delay19_process;


  Unit_Delay18_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Unit_Delay18_out1 <= X"00000000";
    ELSIF rising_edge(clk) THEN
      IF enb_1_2048_0 = '1' THEN
        Unit_Delay18_out1 <= Sum23_out1;
      END IF;
    END IF;
  END PROCESS Unit_Delay18_process;


  output1 <= Sum23_out1;

END rtl;

