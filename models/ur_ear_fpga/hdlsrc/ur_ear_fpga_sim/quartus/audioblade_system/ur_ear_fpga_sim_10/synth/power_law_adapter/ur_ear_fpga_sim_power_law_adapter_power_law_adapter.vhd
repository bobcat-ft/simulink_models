-- -------------------------------------------------------------
-- 
-- File Name: D:\NIH3Repo\simulink_models\models\ur_ear_fpga\hdlsrc\ur_ear_fpga_sim\power_law_adapter\ur_ear_fpga_sim_power_law_adapter_power_law_adapter.vhd
-- 
-- Generated by MATLAB 9.9 and HDL Coder 3.17
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: ur_ear_fpga_sim_power_law_adapter_power_law_adapter
-- Source Path: power_law_adapter
-- Hierarchy Level: 5
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY ur_ear_fpga_sim_power_law_adapter_power_law_adapter IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb_1_2048_0                      :   IN    std_logic;
        pla_in                            :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        ffGn                              :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        syn_out                           :   OUT   std_logic_vector(31 DOWNTO 0)  -- single
        );
END ur_ear_fpga_sim_power_law_adapter_power_law_adapter;


ARCHITECTURE rtl OF ur_ear_fpga_sim_power_law_adapter_power_law_adapter IS

  ATTRIBUTE multstyle : string;

  -- Component Declarations
  COMPONENT ur_ear_fpga_sim_power_law_adapter_Fast_Power_Law
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb_1_2048_0                    :   IN    std_logic;
          stimulus1                       :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          output1                         :   OUT   std_logic_vector(31 DOWNTO 0)  -- single
          );
  END COMPONENT;

  COMPONENT ur_ear_fpga_sim_power_law_adapter_nfp_mul_single
    PORT( nfp_in1                         :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          nfp_in2                         :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          nfp_out                         :   OUT   std_logic_vector(31 DOWNTO 0)  -- ufix32
          );
  END COMPONENT;

  COMPONENT ur_ear_fpga_sim_power_law_adapter_nfp_sub_single
    PORT( nfp_in1                         :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          nfp_in2                         :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          nfp_out                         :   OUT   std_logic_vector(31 DOWNTO 0)  -- ufix32
          );
  END COMPONENT;

  COMPONENT ur_ear_fpga_sim_power_law_adapter_nfp_relop_single
    PORT( nfp_in1                         :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          nfp_in2                         :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          nfp_out1                        :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT ur_ear_fpga_sim_power_law_adapter_Slow_Power_Law
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb_1_2048_0                    :   IN    std_logic;
          stimulus1                       :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          output1                         :   OUT   std_logic_vector(31 DOWNTO 0)  -- single
          );
  END COMPONENT;

  COMPONENT ur_ear_fpga_sim_power_law_adapter_nfp_add_single
    PORT( nfp_in1                         :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          nfp_in2                         :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          nfp_out                         :   OUT   std_logic_vector(31 DOWNTO 0)  -- ufix32
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : ur_ear_fpga_sim_power_law_adapter_Fast_Power_Law
    USE ENTITY work.ur_ear_fpga_sim_power_law_adapter_Fast_Power_Law(rtl);

  FOR ALL : ur_ear_fpga_sim_power_law_adapter_nfp_mul_single
    USE ENTITY work.ur_ear_fpga_sim_power_law_adapter_nfp_mul_single(rtl);

  FOR ALL : ur_ear_fpga_sim_power_law_adapter_nfp_sub_single
    USE ENTITY work.ur_ear_fpga_sim_power_law_adapter_nfp_sub_single(rtl);

  FOR ALL : ur_ear_fpga_sim_power_law_adapter_nfp_relop_single
    USE ENTITY work.ur_ear_fpga_sim_power_law_adapter_nfp_relop_single(rtl);

  FOR ALL : ur_ear_fpga_sim_power_law_adapter_Slow_Power_Law
    USE ENTITY work.ur_ear_fpga_sim_power_law_adapter_Slow_Power_Law(rtl);

  FOR ALL : ur_ear_fpga_sim_power_law_adapter_nfp_add_single
    USE ENTITY work.ur_ear_fpga_sim_power_law_adapter_nfp_add_single(rtl);

  -- Signals
  SIGNAL kconst                           : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Constant_out1                    : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL MinMax1_stage1_val               : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL sout2                            : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL I2                               : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Gain1_out1                       : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Subtract_out1                    : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL MinMax1_stage1_sel               : std_logic;
  SIGNAL kconst_1                         : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL MinMax_stage1_val                : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL sout1                            : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL I1                               : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Gain_out1                        : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Subtract1_out1                   : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Add1_out1                        : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL MinMax_stage1_sel                : std_logic;
  SIGNAL synout                           : std_logic_vector(31 DOWNTO 0);  -- ufix32

BEGIN
  -- Slow Power Law Adaptation:
  -- 
  -- - 10th Order IIR Filter
  -- 
  -- - Coefficients are derived for Fs = 100kHz! 
  -- 
  -- - Implemented w/ Simulink biquad block
  -- 
  -- Fast Power Law Adaptation:
  -- 
  -- - 6th Order IIR Filter
  -- 
  -- - Coefficients are derived for Fs = 100kHz!
  -- 
  -- - Implemented w/ Simulink biquad block
  -- 
  -- Fast Fractional Gaussian Noise:
  -- 
  -- - From ffGn MATLAB function
  -- 
  -- - Mean of 0

  u_Fast_Power_Law : ur_ear_fpga_sim_power_law_adapter_Fast_Power_Law
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_2048_0 => enb_1_2048_0,
              stimulus1 => sout2,  -- single
              output1 => I2  -- single
              );

  u_nfp_mul_comp : ur_ear_fpga_sim_power_law_adapter_nfp_mul_single
    PORT MAP( nfp_in1 => kconst,  -- ufix32
              nfp_in2 => I2,  -- ufix32
              nfp_out => Gain1_out1  -- ufix32
              );

  u_nfp_sub_comp : ur_ear_fpga_sim_power_law_adapter_nfp_sub_single
    PORT MAP( nfp_in1 => pla_in,  -- ufix32
              nfp_in2 => Gain1_out1,  -- ufix32
              nfp_out => Subtract_out1  -- ufix32
              );

  u_nfp_relop_comp : ur_ear_fpga_sim_power_law_adapter_nfp_relop_single
    PORT MAP( nfp_in1 => Subtract_out1,  -- ufix32
              nfp_in2 => Constant_out1,  -- ufix32
              nfp_out1 => MinMax1_stage1_sel
              );

  u_Slow_Power_Law : ur_ear_fpga_sim_power_law_adapter_Slow_Power_Law
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_2048_0 => enb_1_2048_0,
              stimulus1 => sout1,  -- single
              output1 => I1  -- single
              );

  u_nfp_mul_comp_1 : ur_ear_fpga_sim_power_law_adapter_nfp_mul_single
    PORT MAP( nfp_in1 => kconst_1,  -- ufix32
              nfp_in2 => I1,  -- ufix32
              nfp_out => Gain_out1  -- ufix32
              );

  u_nfp_sub_comp_1 : ur_ear_fpga_sim_power_law_adapter_nfp_sub_single
    PORT MAP( nfp_in1 => pla_in,  -- ufix32
              nfp_in2 => Gain_out1,  -- ufix32
              nfp_out => Subtract1_out1  -- ufix32
              );

  u_nfp_add_comp : ur_ear_fpga_sim_power_law_adapter_nfp_add_single
    PORT MAP( nfp_in1 => Subtract1_out1,  -- ufix32
              nfp_in2 => ffGn,  -- ufix32
              nfp_out => Add1_out1  -- ufix32
              );

  u_nfp_relop_comp_1 : ur_ear_fpga_sim_power_law_adapter_nfp_relop_single
    PORT MAP( nfp_in1 => Constant_out1,  -- ufix32
              nfp_in2 => Add1_out1,  -- ufix32
              nfp_out1 => MinMax_stage1_sel
              );

  u_nfp_add_comp_1 : ur_ear_fpga_sim_power_law_adapter_nfp_add_single
    PORT MAP( nfp_in1 => MinMax1_stage1_val,  -- ufix32
              nfp_in2 => MinMax_stage1_val,  -- ufix32
              nfp_out => synout  -- ufix32
              );

  kconst <= X"447a0000";

  Constant_out1 <= X"00000000";

  delayMatch_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      sout2 <= X"00000000";
    ELSIF rising_edge(clk) THEN
      IF enb_1_2048_0 = '1' THEN
        sout2 <= MinMax1_stage1_val;
      END IF;
    END IF;
  END PROCESS delayMatch_process;


  
  MinMax1_stage1_val <= Subtract_out1 WHEN MinMax1_stage1_sel = '0' ELSE
      Constant_out1;

  kconst_1 <= X"3e19999a";

  delayMatch1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      sout1 <= X"00000000";
    ELSIF rising_edge(clk) THEN
      IF enb_1_2048_0 = '1' THEN
        sout1 <= MinMax_stage1_val;
      END IF;
    END IF;
  END PROCESS delayMatch1_process;


  
  MinMax_stage1_val <= Constant_out1 WHEN MinMax_stage1_sel = '0' ELSE
      Add1_out1;

  syn_out <= synout;

END rtl;

