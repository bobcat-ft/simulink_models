-- -------------------------------------------------------------
-- 
-- File Name: D:\NIH3Repo\simulink_models\models\ur_ear_fpga\hdlsrc\ur_ear_fpga_sim\ur_ear_fpga_sim_dataplane.vhd
-- 
-- Generated by MATLAB 9.9 and HDL Coder 3.17
-- 
-- 
-- -------------------------------------------------------------
-- Rate and Clocking Details
-- -------------------------------------------------------------
-- Model base rate: 1.01725e-08
-- Target subsystem base rate: 1.01725e-08
-- Explicit user oversample request: 2048x
-- 
-- 
-- Clock Enable  Sample Time
-- -------------------------------------------------------------
-- ce_out        2.08333e-05
-- -------------------------------------------------------------
-- 
-- 
-- Output Signal                 Clock Enable  Sample Time
-- -------------------------------------------------------------
-- avalon_source_valid           ce_out        2.08333e-05
-- avalon_source_data            ce_out        2.08333e-05
-- avalon_source_channel         ce_out        2.08333e-05
-- avalon_source_error           ce_out        2.08333e-05
-- spike_count_out               ce_out        2.08333e-05
-- spike_valid_out               ce_out        2.08333e-05
-- -------------------------------------------------------------
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: ur_ear_fpga_sim_dataplane
-- Source Path: ur_ear_fpga_sim/dataplane
-- Hierarchy Level: 0
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.ur_ear_fpga_sim_dataplane_pkg.ALL;

ENTITY ur_ear_fpga_sim_dataplane IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        clk_enable                        :   IN    std_logic;
        avalon_sink_valid                 :   IN    std_logic;
        avalon_sink_data                  :   IN    std_logic_vector(31 DOWNTO 0);  -- sfix32_En28
        avalon_sink_channel               :   IN    std_logic;  -- ufix1
        avalon_sink_error                 :   IN    std_logic_vector(1 DOWNTO 0);  -- ufix2
        rand_nums                         :   IN    std_logic_vector(63 DOWNTO 0);  -- double
        register_control_integration_time :   IN    std_logic_vector(31 DOWNTO 0);  -- uint32
        randNum1                          :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        randNum2                          :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        randNum3                          :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        randNum4                          :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        randNum5                          :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        randNum6                          :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        randNum7                          :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        randNum8                          :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        randNum9                          :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        randNum10                         :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        randNum11                         :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        randNum12                         :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        ce_out                            :   OUT   std_logic;
        avalon_source_valid               :   OUT   std_logic;
        avalon_source_data                :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
        avalon_source_channel             :   OUT   std_logic;  -- ufix1
        avalon_source_error               :   OUT   std_logic_vector(1 DOWNTO 0);  -- ufix2
        spike_count_out                   :   OUT   std_logic_vector(17 DOWNTO 0);  -- ufix18
        spike_valid_out                   :   OUT   std_logic
        );
END ur_ear_fpga_sim_dataplane;


ARCHITECTURE rtl OF ur_ear_fpga_sim_dataplane IS

  -- Component Declarations
  COMPONENT ur_ear_fpga_sim_dataplane_tc
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          clk_enable                      :   IN    std_logic;
          enb                             :   OUT   std_logic;
          enb_1_2048_0                    :   OUT   std_logic;
          enb_1_2048_1                    :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT ur_ear_fpga_sim_Avalon_Data_Processing
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          enb_1_2048_0                    :   IN    std_logic;
          enb_1_2048_1                    :   IN    std_logic;
          sink_data                       :   IN    std_logic_vector(31 DOWNTO 0);  -- sfix32_En28
          rand_nums                       :   IN    std_logic_vector(63 DOWNTO 0);  -- double
          integration_time                :   IN    std_logic_vector(31 DOWNTO 0);  -- uint32
          randNum1                        :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          randNum2                        :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          randNum3                        :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          randNum4                        :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          randNum5                        :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          randNum6                        :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          randNum7                        :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          randNum8                        :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          randNum9                        :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          randNum10                       :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          randNum11                       :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          randNum12                       :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          source_data                     :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
          spike_count_out                 :   OUT   std_logic_vector(17 DOWNTO 0);  -- ufix18
          spike_valid_out                 :   OUT   std_logic
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : ur_ear_fpga_sim_dataplane_tc
    USE ENTITY work.ur_ear_fpga_sim_dataplane_tc(rtl);

  FOR ALL : ur_ear_fpga_sim_Avalon_Data_Processing
    USE ENTITY work.ur_ear_fpga_sim_Avalon_Data_Processing(rtl);

  -- Signals
  SIGNAL enb                              : std_logic;
  SIGNAL enb_1_2048_0                     : std_logic;
  SIGNAL enb_1_2048_1                     : std_logic;
  SIGNAL delayMatch_reg                   : std_logic_vector(0 TO 1);  -- ufix1 [2]
  SIGNAL delayMatch_reg_next              : std_logic_vector(0 TO 1);  -- ufix1 [2]
  SIGNAL avalon_sink_valid_1              : std_logic;
  SIGNAL Avalon_Data_Processing_out1      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Avalon_Data_Processing_out2      : std_logic_vector(17 DOWNTO 0);  -- ufix18
  SIGNAL Avalon_Data_Processing_out3      : std_logic;
  SIGNAL delayMatch1_reg                  : vector_of_std_logic_vector32(0 TO 1);  -- ufix32 [2]
  SIGNAL delayMatch1_reg_next             : vector_of_std_logic_vector32(0 TO 1);  -- ufix32 [2]
  SIGNAL Avalon_Data_Processing_out1_1    : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL delayMatch2_reg                  : std_logic_vector(0 TO 1);  -- ufix1 [2]
  SIGNAL delayMatch2_reg_next             : std_logic_vector(0 TO 1);  -- ufix1 [2]
  SIGNAL avalon_sink_channel_1            : std_logic;  -- ufix1
  SIGNAL avalon_sink_error_unsigned       : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL delayMatch3_reg                  : vector_of_unsigned2(0 TO 1);  -- ufix2 [2]
  SIGNAL delayMatch3_reg_next             : vector_of_unsigned2(0 TO 1);  -- ufix2 [2]
  SIGNAL avalon_sink_error_1              : unsigned(1 DOWNTO 0);  -- ufix2

BEGIN
  -- The Avalon Data Processing Block
  -- performs DSP on the left and right channels.

  u_dataplane_tc : ur_ear_fpga_sim_dataplane_tc
    PORT MAP( clk => clk,
              reset => reset,
              clk_enable => clk_enable,
              enb => enb,
              enb_1_2048_0 => enb_1_2048_0,
              enb_1_2048_1 => enb_1_2048_1
              );

  u_Avalon_Data_Processing : ur_ear_fpga_sim_Avalon_Data_Processing
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              enb_1_2048_0 => enb_1_2048_0,
              enb_1_2048_1 => enb_1_2048_1,
              sink_data => avalon_sink_data,  -- sfix32_En28
              rand_nums => rand_nums,  -- double
              integration_time => register_control_integration_time,  -- uint32
              randNum1 => randNum1,  -- single
              randNum2 => randNum2,  -- single
              randNum3 => randNum3,  -- single
              randNum4 => randNum4,  -- single
              randNum5 => randNum5,  -- single
              randNum6 => randNum6,  -- single
              randNum7 => randNum7,  -- single
              randNum8 => randNum8,  -- single
              randNum9 => randNum9,  -- single
              randNum10 => randNum10,  -- single
              randNum11 => randNum11,  -- single
              randNum12 => randNum12,  -- single
              source_data => Avalon_Data_Processing_out1,  -- single
              spike_count_out => Avalon_Data_Processing_out2,  -- ufix18
              spike_valid_out => Avalon_Data_Processing_out3
              );

  delayMatch_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch_reg(0) <= '0';
      delayMatch_reg(1) <= '0';
    ELSIF rising_edge(clk) THEN
      IF enb_1_2048_0 = '1' THEN
        delayMatch_reg(0) <= delayMatch_reg_next(0);
        delayMatch_reg(1) <= delayMatch_reg_next(1);
      END IF;
    END IF;
  END PROCESS delayMatch_process;

  avalon_sink_valid_1 <= delayMatch_reg(1);
  delayMatch_reg_next(0) <= avalon_sink_valid;
  delayMatch_reg_next(1) <= delayMatch_reg(0);

  avalon_source_valid <= avalon_sink_valid_1;

  delayMatch1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch1_reg(0) <= X"00000000";
      delayMatch1_reg(1) <= X"00000000";
    ELSIF rising_edge(clk) THEN
      IF enb_1_2048_0 = '1' THEN
        delayMatch1_reg(0) <= delayMatch1_reg_next(0);
        delayMatch1_reg(1) <= delayMatch1_reg_next(1);
      END IF;
    END IF;
  END PROCESS delayMatch1_process;

  Avalon_Data_Processing_out1_1 <= delayMatch1_reg(1);
  delayMatch1_reg_next(0) <= Avalon_Data_Processing_out1;
  delayMatch1_reg_next(1) <= delayMatch1_reg(0);

  delayMatch2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch2_reg(0) <= '0';
      delayMatch2_reg(1) <= '0';
    ELSIF rising_edge(clk) THEN
      IF enb_1_2048_0 = '1' THEN
        delayMatch2_reg(0) <= delayMatch2_reg_next(0);
        delayMatch2_reg(1) <= delayMatch2_reg_next(1);
      END IF;
    END IF;
  END PROCESS delayMatch2_process;

  avalon_sink_channel_1 <= delayMatch2_reg(1);
  delayMatch2_reg_next(0) <= avalon_sink_channel;
  delayMatch2_reg_next(1) <= delayMatch2_reg(0);

  avalon_source_channel <= avalon_sink_channel_1;

  avalon_sink_error_unsigned <= unsigned(avalon_sink_error);

  delayMatch3_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch3_reg(0) <= to_unsigned(16#0#, 2);
      delayMatch3_reg(1) <= to_unsigned(16#0#, 2);
    ELSIF rising_edge(clk) THEN
      IF enb_1_2048_0 = '1' THEN
        delayMatch3_reg(0) <= delayMatch3_reg_next(0);
        delayMatch3_reg(1) <= delayMatch3_reg_next(1);
      END IF;
    END IF;
  END PROCESS delayMatch3_process;

  avalon_sink_error_1 <= delayMatch3_reg(1);
  delayMatch3_reg_next(0) <= avalon_sink_error_unsigned;
  delayMatch3_reg_next(1) <= delayMatch3_reg(0);

  avalon_source_error <= std_logic_vector(avalon_sink_error_1);

  spike_valid_out <= Avalon_Data_Processing_out3;

  ce_out <= enb_1_2048_1;

  avalon_source_data <= Avalon_Data_Processing_out1_1;

  spike_count_out <= Avalon_Data_Processing_out2;

END rtl;

