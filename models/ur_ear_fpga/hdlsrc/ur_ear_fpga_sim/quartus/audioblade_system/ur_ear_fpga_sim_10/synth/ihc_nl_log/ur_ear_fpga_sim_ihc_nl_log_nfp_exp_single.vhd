-- -------------------------------------------------------------
-- 
-- File Name: D:\NIH3Repo\simulink_models\models\ur_ear_fpga\hdlsrc\ur_ear_fpga_sim\ihc_nl_log\ur_ear_fpga_sim_ihc_nl_log_nfp_exp_single.vhd
-- 
-- Generated by MATLAB 9.9 and HDL Coder 3.17
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: ur_ear_fpga_sim_ihc_nl_log_nfp_exp_single
-- Source Path: ihc_nl_log/Subsystem/nfp_exp_single
-- Hierarchy Level: 8
-- 
-- {Latency Strategy = "Zero", Denormal Handling = "off"}
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY ur_ear_fpga_sim_ihc_nl_log_nfp_exp_single IS
  PORT( nfp_in                            :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
        nfp_out                           :   OUT   std_logic_vector(31 DOWNTO 0)  -- ufix32
        );
END ur_ear_fpga_sim_ihc_nl_log_nfp_exp_single;


ARCHITECTURE rtl OF ur_ear_fpga_sim_ihc_nl_log_nfp_exp_single IS

  ATTRIBUTE multstyle : string;

  -- Signals
  SIGNAL nfp_in_unsigned                  : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL aSign                            : std_logic;  -- ufix1
  SIGNAL aExponent                        : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL aMantissa                        : unsigned(22 DOWNTO 0);  -- ufix23
  SIGNAL aExponent_cfType_Exponent_I_out1 : std_logic;  -- ufix1
  SIGNAL C3_out1                          : std_logic;  -- ufix1
  SIGNAL Compare_To_Zero_out1             : std_logic;  -- ufix1
  SIGNAL Constant_out1                    : unsigned(22 DOWNTO 0);  -- ufix23
  SIGNAL Switch_out1                      : unsigned(22 DOWNTO 0);  -- ufix23
  SIGNAL aMantissa_0_out1                 : std_logic;  -- ufix1
  SIGNAL alphaaMantissa_0_aSign_out1      : std_logic;  -- ufix1
  SIGNAL C2_out1                          : std_logic;  -- ufix1
  SIGNAL if_aMantissa_0_aSign_2_out1      : std_logic;  -- ufix1
  SIGNAL if_aExponent_cfType_Exponent_2_out1 : std_logic;  -- ufix1
  SIGNAL C1_out1                          : signed(10 DOWNTO 0);  -- sfix11
  SIGNAL C_out1                           : signed(10 DOWNTO 0);  -- sfix11
  SIGNAL if_aSign_out1                    : signed(10 DOWNTO 0);  -- sfix11
  SIGNAL alpha0_out1                      : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL Exponent_0_out1                  : std_logic;  -- ufix1
  SIGNAL alpha1_out1                      : std_logic;  -- ufix1
  SIGNAL Bit_Concat1_out1                 : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL alpha0_out1_1                    : std_logic;  -- ufix1
  SIGNAL Bit_Concat_out1                  : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL if_Exponent_0_cfType_Exp_out1    : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL reinterpretcast_mant_cor_nume_out1 : unsigned(23 DOWNTO 0);  -- ufix24_En23
  SIGNAL alpha1_66096404753625392914_out1 : unsigned(32 DOWNTO 0);  -- ufix33_En31
  SIGNAL tmp1_1_66096404753625392914_mul_temp : unsigned(56 DOWNTO 0);  -- ufix57_En54
  SIGNAL tmp1_1_66096404753625392914_out1 : unsigned(32 DOWNTO 0);  -- ufix33_En31
  SIGNAL BitSlice_out1                    : std_logic;  -- ufix1
  SIGNAL C_out1_1                         : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL if_Exponent_0_out1               : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL C_out1_2                         : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL exp_cor_2_add_temp               : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL exp_cor_2_out1                   : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL if_bitget_tmp2_tmp2_WordLength_out1 : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Bit_Concat_out1_1                : unsigned(10 DOWNTO 0);  -- ufix11
  SIGNAL reinterpretcast_bitconcat_fi_0_out1 : signed(10 DOWNTO 0);  -- sfix11
  SIGNAL exp_tmp_upperBound_relop1        : std_logic;
  SIGNAL C1_out1_1                        : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL C_out1_3                         : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL if_aSign_out1_1                  : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL alpha0_out1_2                    : std_logic;  -- ufix1
  SIGNAL alpha127_out1                    : signed(9 DOWNTO 0);  -- sfix10
  SIGNAL alpha1_out1_1                    : std_logic;  -- ufix1
  SIGNAL C4_out1                          : unsigned(39 DOWNTO 0);  -- ufix40_En31
  SIGNAL cast_cfType_ExponentBias_lik_out1 : signed(10 DOWNTO 0);  -- sfix11
  SIGNAL exp_tmp_cast_cfType_Exponent_out1 : signed(11 DOWNTO 0);  -- sfix12
  SIGNAL DTC_out1                         : signed(10 DOWNTO 0);  -- sfix11
  SIGNAL BitSlice_out1_1                  : std_logic;  -- ufix1
  SIGNAL alpha3_out1                      : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL BitSlice2_out1                   : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL reinterpretcast_bitsliceget_t_out1 : unsigned(31 DOWNTO 0);  -- ufix32_En31
  SIGNAL BitSlice1_out1                   : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL reinterpretcast_bitsliceget_t_out1_1 : unsigned(31 DOWNTO 0);  -- ufix32_En31
  SIGNAL if_bitget_tmp2_tmp2_WordLength_1_out1 : unsigned(31 DOWNTO 0);  -- ufix32_En31
  SIGNAL Bit_Concat3_out1                 : unsigned(39 DOWNTO 0);  -- ufix40
  SIGNAL reinterpretcast_bitconcat_fi_0_out1_1 : unsigned(39 DOWNTO 0);  -- ufix40_En31
  SIGNAL DTC2_out1                        : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL dynamic_shift_cast               : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL bitsll_tmp1_shift_length_out1    : unsigned(39 DOWNTO 0);  -- ufix40_En31
  SIGNAL cast_cfType_ExponentBias_lik_out1_1 : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL cast_cfType_ExponentBias_lik_sub_cast : signed(11 DOWNTO 0);  -- sfix12
  SIGNAL cast_cfType_ExponentBias_lik_sub_cast_1 : signed(11 DOWNTO 0);  -- sfix12
  SIGNAL cast_cfType_ExponentBias_lik_sub_temp : signed(11 DOWNTO 0);  -- sfix12
  SIGNAL cast_cfType_ExponentBias_lik_out1_2 : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL DTC1_out1                        : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL dynamic_shift_cast_1             : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Shift_Arithmetic_out1            : unsigned(39 DOWNTO 0);  -- ufix40_En31
  SIGNAL if_shift_sign_out1               : unsigned(39 DOWNTO 0);  -- ufix40_En31
  SIGNAL if_exp_tmp_upperBound_1_out1     : unsigned(39 DOWNTO 0);  -- ufix40_En31
  SIGNAL BitSlice2_out1_1                 : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL Bit_Concat1_out1_1               : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL reinterpretcast_bitconcat_fi_0_out1_2 : signed(9 DOWNTO 0);  -- sfix10
  SIGNAL alpha127_exp_tmp_out1            : signed(9 DOWNTO 0);  -- sfix10
  SIGNAL cast_1_like_mant_frac_out1       : unsigned(31 DOWNTO 0);  -- ufix32_En31
  SIGNAL alpha0_out1_3                    : std_logic;  -- ufix1
  SIGNAL BitSlice_out1_2                  : unsigned(30 DOWNTO 0);  -- ufix31
  SIGNAL Bit_Concat_out1_2                : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL reinterpretcast_bitconcat_fi_0_out1_3 : unsigned(31 DOWNTO 0);  -- ufix32_En31
  SIGNAL cast_1_like_mant_frac_m_out1     : unsigned(31 DOWNTO 0);  -- ufix32_En31
  SIGNAL BitSlice1_out1_1                 : std_logic;  -- ufix1
  SIGNAL Logical_Operator_out1            : std_logic;  -- ufix1
  SIGNAL C1_out1_2                        : signed(9 DOWNTO 0);  -- sfix10
  SIGNAL exp_adj_exp_tmp_out1             : signed(9 DOWNTO 0);  -- sfix10
  SIGNAL C_out1_4                         : signed(9 DOWNTO 0);  -- sfix10
  SIGNAL exp_adj_exp_tmp1_out1            : signed(9 DOWNTO 0);  -- sfix10
  SIGNAL if_sticky_out1                   : signed(9 DOWNTO 0);  -- sfix10
  SIGNAL if_aSign_1_out1                  : signed(9 DOWNTO 0);  -- sfix10
  SIGNAL exp_out_0_out1                   : std_logic;  -- ufix1
  SIGNAL C2_out1_1                        : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL Logical_Operator1_out1           : std_logic;  -- ufix1
  SIGNAL if_sticky_1_out1                 : unsigned(31 DOWNTO 0);  -- ufix32_En31
  SIGNAL Constant_out1_1                  : std_logic;  -- ufix1
  SIGNAL Bit_Concat_out1_3                : unsigned(32 DOWNTO 0);  -- ufix33
  SIGNAL Data_Type_Conversion_out1        : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL BitSlice_out1_3                  : std_logic;  -- ufix1
  SIGNAL Log2Table_1_out1                 : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL w_Log2Table_1_out1               : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL if_bitget_w_w_WordLength_1_out1  : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL bitsll_w_1_out1                  : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL BitSlice1_out1_2                 : std_logic;  -- ufix1
  SIGNAL BitSlice_out1_4                  : std_logic;  -- ufix1
  SIGNAL alphabitget_w_w_WordLength_1_out1 : std_logic;  -- ufix1
  SIGNAL Log2Table_int32_2_out1           : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL Log2MinusTable_int32_2_out1      : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL if_bitget_w_w_WordLength_0_out1  : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL w_Log2MinusTable_int32_2_1_out1  : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL if_bitget_w_w_WordLength_1_out1_1 : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL bitsll_w_1_out1_1                : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL BitSlice1_out1_3                 : std_logic;  -- ufix1
  SIGNAL BitSlice_out1_5                  : std_logic;  -- ufix1
  SIGNAL alphabitget_w_w_WordLength_1_out1_1 : std_logic;  -- ufix1
  SIGNAL Log2Table_int32_3_out1           : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL Log2MinusTable_int32_3_out1      : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL if_bitget_w_w_WordLength_0_out1_1 : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL w_Log2MinusTable_int32_2_out1    : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL if_bitget_w_w_WordLength_1_out1_2 : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL bitsll_w_1_out1_2                : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL BitSlice1_out1_4                 : std_logic;  -- ufix1
  SIGNAL BitSlice_out1_6                  : std_logic;  -- ufix1
  SIGNAL alphabitget_w_w_WordLength_1_out1_2 : std_logic;  -- ufix1
  SIGNAL Log2Table_int32_4_out1           : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL Log2MinusTable_int32_4_out1      : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL if_bitget_w_w_WordLength_0_out1_2 : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL w_Log2MinusTable_int32_2_out1_1  : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL if_bitget_w_w_WordLength_1_out1_3 : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL bitsll_w_1_out1_3                : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL BitSlice1_out1_5                 : std_logic;  -- ufix1
  SIGNAL BitSlice_out1_7                  : std_logic;  -- ufix1
  SIGNAL alphabitget_w_w_WordLength_1_out1_3 : std_logic;  -- ufix1
  SIGNAL Log2Table_int32_5_out1           : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL Log2MinusTable_int32_5_out1      : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL if_bitget_w_w_WordLength_0_out1_3 : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL w_Log2MinusTable_int32_2_out1_2  : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL if_bitget_w_w_WordLength_1_out1_4 : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL bitsll_w_1_out1_4                : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL BitSlice1_out1_6                 : std_logic;  -- ufix1
  SIGNAL BitSlice_out1_8                  : std_logic;  -- ufix1
  SIGNAL alphabitget_w_w_WordLength_1_out1_4 : std_logic;  -- ufix1
  SIGNAL Log2Table_int32_6_out1           : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL Log2MinusTable_int32_6_out1      : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL if_bitget_w_w_WordLength_0_out1_4 : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL w_Log2MinusTable_int32_2_out1_3  : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL if_bitget_w_w_WordLength_1_out1_5 : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL bitsll_w_1_out1_5                : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL BitSlice1_out1_7                 : std_logic;  -- ufix1
  SIGNAL BitSlice_out1_9                  : std_logic;  -- ufix1
  SIGNAL alphabitget_w_w_WordLength_1_out1_5 : std_logic;  -- ufix1
  SIGNAL Log2Table_int32_7_out1           : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL Log2MinusTable_int32_7_out1      : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL if_bitget_w_w_WordLength_0_out1_5 : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL w_Log2MinusTable_int32_2_out1_4  : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL if_bitget_w_w_WordLength_1_out1_6 : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL bitsll_w_1_out1_6                : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL BitSlice1_out1_8                 : std_logic;  -- ufix1
  SIGNAL BitSlice_out1_10                 : std_logic;  -- ufix1
  SIGNAL alphabitget_w_w_WordLength_1_out1_6 : std_logic;  -- ufix1
  SIGNAL Log2Table_int32_8_out1           : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL Log2MinusTable_int32_8_out1      : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL if_bitget_w_w_WordLength_0_out1_6 : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL w_Log2MinusTable_int32_2_out1_5  : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL if_bitget_w_w_WordLength_1_out1_7 : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL bitsll_w_1_out1_7                : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL BitSlice1_out1_9                 : std_logic;  -- ufix1
  SIGNAL BitSlice_out1_11                 : std_logic;  -- ufix1
  SIGNAL alphabitget_w_w_WordLength_1_out1_7 : std_logic;  -- ufix1
  SIGNAL Log2Table_int32_9_out1           : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL Log2MinusTable_int32_9_out1      : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL if_bitget_w_w_WordLength_0_out1_7 : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL w_Log2MinusTable_int32_2_out1_6  : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL if_bitget_w_w_WordLength_1_out1_8 : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL bitsll_w_1_out1_8                : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL BitSlice1_out1_10                : std_logic;  -- ufix1
  SIGNAL BitSlice_out1_12                 : std_logic;  -- ufix1
  SIGNAL alphabitget_w_w_WordLength_1_out1_8 : std_logic;  -- ufix1
  SIGNAL Log2Table_int32_10_out1          : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL Log2MinusTable_int32_10_out1     : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL if_bitget_w_w_WordLength_0_out1_8 : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL w_Log2MinusTable_int32_2_out1_7  : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL if_bitget_w_w_WordLength_1_out1_9 : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL bitsll_w_1_out1_9                : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL BitSlice1_out1_11                : std_logic;  -- ufix1
  SIGNAL BitSlice_out1_13                 : std_logic;  -- ufix1
  SIGNAL alphabitget_w_w_WordLength_1_out1_9 : std_logic;  -- ufix1
  SIGNAL Log2Table_int32_11_out1          : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL Log2MinusTable_int32_11_out1     : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL if_bitget_w_w_WordLength_0_out1_9 : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL w_Log2MinusTable_int32_2_out1_8  : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL if_bitget_w_w_WordLength_1_out1_10 : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL bitsll_w_1_out1_10               : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL BitSlice1_out1_12                : std_logic;  -- ufix1
  SIGNAL BitSlice_out1_14                 : std_logic;  -- ufix1
  SIGNAL alphabitget_w_w_WordLength_1_out1_10 : std_logic;  -- ufix1
  SIGNAL C1_out1_3                        : signed(3 DOWNTO 0);  -- sfix4_En1
  SIGNAL C_out1_5                         : signed(3 DOWNTO 0);  -- sfix4_En1
  SIGNAL if_bitget_w_w_WordLength_1_1_out1 : signed(3 DOWNTO 0);  -- sfix4_En1
  SIGNAL Constant_out1_2                  : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL Bit_Concat_out1_4                : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL dtc1_out1_1                      : signed(5 DOWNTO 0);  -- sfix6_En3
  SIGNAL bitsrl_y_int32_2_out1            : signed(5 DOWNTO 0);  -- sfix6_En3
  SIGNAL y_tmp1_out1                      : signed(5 DOWNTO 0);  -- sfix6_En3
  SIGNAL y_tmp1_out1_1                    : signed(5 DOWNTO 0);  -- sfix6_En3
  SIGNAL if_bitget_w_w_WordLength_0_1_out1 : signed(5 DOWNTO 0);  -- sfix6_En3
  SIGNAL if_bitget_w_w_WordLength_1_1_out1_1 : signed(5 DOWNTO 0);  -- sfix6_En3
  SIGNAL Constant_out1_3                  : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL Bit_Concat_out1_5                : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL dtc1_out1_2                      : signed(8 DOWNTO 0);  -- sfix9_En6
  SIGNAL bitsrl_y_int32_2_out1_1          : signed(8 DOWNTO 0);  -- sfix9_En6
  SIGNAL y_tmp1_out1_2                    : signed(8 DOWNTO 0);  -- sfix9_En6
  SIGNAL y_tmp1_out1_3                    : signed(8 DOWNTO 0);  -- sfix9_En6
  SIGNAL if_bitget_w_w_WordLength_0_1_out1_1 : signed(8 DOWNTO 0);  -- sfix9_En6
  SIGNAL if_bitget_w_w_WordLength_1_1_out1_2 : signed(8 DOWNTO 0);  -- sfix9_En6
  SIGNAL Constant_out1_4                  : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL Bit_Concat_out1_6                : unsigned(12 DOWNTO 0);  -- ufix13
  SIGNAL dtc1_out1_3                      : signed(12 DOWNTO 0);  -- sfix13_En10
  SIGNAL bitsrl_y_int32_2_out1_2          : signed(12 DOWNTO 0);  -- sfix13_En10
  SIGNAL y_tmp1_out1_4                    : signed(12 DOWNTO 0);  -- sfix13_En10
  SIGNAL y_tmp1_out1_5                    : signed(12 DOWNTO 0);  -- sfix13_En10
  SIGNAL if_bitget_w_w_WordLength_0_1_out1_2 : signed(12 DOWNTO 0);  -- sfix13_En10
  SIGNAL if_bitget_w_w_WordLength_1_1_out1_3 : signed(12 DOWNTO 0);  -- sfix13_En10
  SIGNAL Constant_out1_5                  : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL Bit_Concat_out1_7                : unsigned(17 DOWNTO 0);  -- ufix18
  SIGNAL dtc1_out1_4                      : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL bitsrl_y_int32_2_out1_3          : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL y_tmp1_out1_6                    : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL y_tmp1_out1_7                    : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL if_bitget_w_w_WordLength_0_1_out1_3 : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL if_bitget_w_w_WordLength_1_1_out1_4 : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL Constant_out1_6                  : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Bit_Concat_out1_8                : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL dtc1_out1_5                      : signed(23 DOWNTO 0);  -- sfix24_En21
  SIGNAL bitsrl_y_int32_2_out1_4          : signed(23 DOWNTO 0);  -- sfix24_En21
  SIGNAL y_tmp1_out1_8                    : signed(23 DOWNTO 0);  -- sfix24_En21
  SIGNAL y_tmp1_out1_9                    : signed(23 DOWNTO 0);  -- sfix24_En21
  SIGNAL if_bitget_w_w_WordLength_0_1_out1_4 : signed(23 DOWNTO 0);  -- sfix24_En21
  SIGNAL if_bitget_w_w_WordLength_1_1_out1_5 : signed(23 DOWNTO 0);  -- sfix24_En21
  SIGNAL Constant_out1_7                  : unsigned(6 DOWNTO 0);  -- ufix7
  SIGNAL Bit_Concat_out1_9                : unsigned(30 DOWNTO 0);  -- ufix31
  SIGNAL dtc1_out1_6                      : signed(30 DOWNTO 0);  -- sfix31_En28
  SIGNAL bitsrl_y_int32_2_out1_5          : signed(30 DOWNTO 0);  -- sfix31_En28
  SIGNAL y_tmp1_out1_10                   : signed(30 DOWNTO 0);  -- sfix31_En28
  SIGNAL y_tmp1_out1_11                   : signed(30 DOWNTO 0);  -- sfix31_En28
  SIGNAL if_bitget_w_w_WordLength_0_1_out1_5 : signed(30 DOWNTO 0);  -- sfix31_En28
  SIGNAL if_bitget_w_w_WordLength_1_1_out1_6 : signed(30 DOWNTO 0);  -- sfix31_En28
  SIGNAL Constant_out1_8                  : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL Bit_Concat_out1_10               : unsigned(33 DOWNTO 0);  -- ufix34
  SIGNAL dtc1_out1_7                      : signed(33 DOWNTO 0);  -- sfix34_En31
  SIGNAL bitsrl_y_int32_2_out1_6          : signed(33 DOWNTO 0);  -- sfix34_En31
  SIGNAL y_tmp1_out1_12                   : signed(33 DOWNTO 0);  -- sfix34_En31
  SIGNAL y_tmp1_out1_13                   : signed(33 DOWNTO 0);  -- sfix34_En31
  SIGNAL if_bitget_w_w_WordLength_0_1_out1_6 : signed(33 DOWNTO 0);  -- sfix34_En31
  SIGNAL if_bitget_w_w_WordLength_1_1_out1_7 : signed(33 DOWNTO 0);  -- sfix34_En31
  SIGNAL bitsrl_y_int32_2_out1_7          : signed(33 DOWNTO 0);  -- sfix34_En31
  SIGNAL y_tmp1_out1_14                   : signed(33 DOWNTO 0);  -- sfix34_En31
  SIGNAL y_tmp1_out1_15                   : signed(33 DOWNTO 0);  -- sfix34_En31
  SIGNAL if_bitget_w_w_WordLength_0_1_out1_7 : signed(33 DOWNTO 0);  -- sfix34_En31
  SIGNAL if_bitget_w_w_WordLength_1_1_out1_8 : signed(33 DOWNTO 0);  -- sfix34_En31
  SIGNAL bitsrl_y_int32_2_out1_8          : signed(33 DOWNTO 0);  -- sfix34_En31
  SIGNAL y_tmp1_out1_16                   : signed(33 DOWNTO 0);  -- sfix34_En31
  SIGNAL y_tmp1_out1_17                   : signed(33 DOWNTO 0);  -- sfix34_En31
  SIGNAL if_bitget_w_w_WordLength_0_1_out1_8 : signed(33 DOWNTO 0);  -- sfix34_En31
  SIGNAL if_bitget_w_w_WordLength_1_1_out1_9 : signed(33 DOWNTO 0);  -- sfix34_En31
  SIGNAL bitsrl_y_int32_2_out1_9          : signed(33 DOWNTO 0);  -- sfix34_En31
  SIGNAL y_tmp1_out1_18                   : signed(33 DOWNTO 0);  -- sfix34_En31
  SIGNAL y_tmp1_out1_19                   : signed(33 DOWNTO 0);  -- sfix34_En31
  SIGNAL if_bitget_w_w_WordLength_0_1_out1_9 : signed(33 DOWNTO 0);  -- sfix34_En31
  SIGNAL if_bitget_w_w_WordLength_1_1_out1_10 : signed(33 DOWNTO 0);  -- sfix34_En31
  SIGNAL bitsrl_y_int32_2_out1_10         : signed(33 DOWNTO 0);  -- sfix34_En31
  SIGNAL y_tmp1_out1_20                   : signed(33 DOWNTO 0);  -- sfix34_En31
  SIGNAL y_tmp1_out1_21                   : signed(33 DOWNTO 0);  -- sfix34_En31
  SIGNAL if_bitget_w_w_WordLength_0_1_out1_10 : signed(33 DOWNTO 0);  -- sfix34_En31
  SIGNAL if_bitget_w_w_WordLength_1_1_out1_11 : signed(33 DOWNTO 0);  -- sfix34_En31
  SIGNAL Log2Table_int32_11_out1_1        : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL Log2MinusTable_int32_11_out1_1   : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL if_bitget_w_w_WordLength_0_out1_10 : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL w_Log2MinusTable_int32_2_out1_9  : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL if_bitget_w_w_WordLength_1_out1_11 : signed(32 DOWNTO 0);  -- sfix33_En31
  SIGNAL Bit_Slice_out1                   : unsigned(20 DOWNTO 0);  -- ufix21
  SIGNAL Data_Type_Conversion_out1_1      : signed(20 DOWNTO 0);  -- sfix21_En19
  SIGNAL Bit_Slice2_out1                  : unsigned(20 DOWNTO 0);  -- ufix21
  SIGNAL Data_Type_Conversion1_out1       : signed(20 DOWNTO 0);  -- sfix21_En19
  SIGNAL alpha0_69314717873930931_out1    : signed(20 DOWNTO 0);  -- sfix21_En19
  SIGNAL tmp1_0_69314717873930931_mul_temp : signed(41 DOWNTO 0);  -- sfix42_En38
  SIGNAL tmp1_0_69314717873930931_out1    : signed(20 DOWNTO 0);  -- sfix21_En19
  SIGNAL tmp2_y_mul_temp                  : signed(41 DOWNTO 0);  -- sfix42_En38
  SIGNAL tmp2_y_out1                      : signed(20 DOWNTO 0);  -- sfix21_En19
  SIGNAL Bit_Slice1_out1                  : std_logic;  -- ufix1
  SIGNAL Constant1_out1                   : signed(12 DOWNTO 0);  -- sfix13
  SIGNAL Constant_out1_9                  : signed(12 DOWNTO 0);  -- sfix13
  SIGNAL Switch_out1_1                    : signed(12 DOWNTO 0);  -- sfix13
  SIGNAL Bit_Concat_out1_11               : unsigned(33 DOWNTO 0);  -- ufix34
  SIGNAL DTC2_out1_1                      : signed(33 DOWNTO 0);  -- sfix34_En31
  SIGNAL y_tmp3_out1                      : signed(33 DOWNTO 0);  -- sfix34_En31
  SIGNAL BitSlice_out1_15                 : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL if_exp_out_0_1_out1              : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL Bit_Concat_out1_12               : unsigned(24 DOWNTO 0);  -- ufix25
  SIGNAL BitSlice_out1_16                 : std_logic;  -- ufix1
  SIGNAL BitSlice1_out1_13                : std_logic;  -- ufix1
  SIGNAL alphabitget_Mant_tmp_2_0_out1    : std_logic;  -- ufix1
  SIGNAL alphabitget_Mant_tmp_1_0_out1    : std_logic;  -- ufix1
  SIGNAL cast_2_like_Mant_tmp_out1        : unsigned(24 DOWNTO 0);  -- ufix25
  SIGNAL Mant_tmp_cast_2_like_Man_out1    : unsigned(24 DOWNTO 0);  -- ufix25
  SIGNAL if_bitget_Mant_tmp_1_0_out1      : unsigned(24 DOWNTO 0);  -- ufix25
  SIGNAL BitSlice2_out1_2                 : std_logic;  -- ufix1
  SIGNAL BitSlice2_out1_3                 : std_logic;  -- ufix1
  SIGNAL Logical_Operator_out1_1          : std_logic;  -- ufix1
  SIGNAL BitSlice1_out1_14                : std_logic;  -- ufix1
  SIGNAL bitget_y_cfType_Pow2Intermedi_out1 : std_logic;  -- ufix1
  SIGNAL C1_out1_4                        : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL C_out1_6                         : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL if_bitget_y_cfType_Pow2Intermed_out1 : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL DTC_out1_1                       : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL if_exp_out_0_out1                : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL cast_1_like_Exp_out1             : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Exp_cast_1_like_Exp_out1         : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL if_bitget_Mant_tmp_Mant_tmp_Wor_out1 : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL if_in_range_out1                 : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL C_out1_7                         : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL if_aMantissa_0_aSign_out1        : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL if_aExponent_cfType_Exponent_out1 : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL C2_out1_2                        : unsigned(22 DOWNTO 0);  -- ufix23
  SIGNAL Compare_To_Zero_out1_1           : std_logic;  -- ufix1
  SIGNAL Logical_Operator_out1_2          : std_logic;  -- ufix1
  SIGNAL BitSlice3_out1                   : unsigned(22 DOWNTO 0);  -- ufix23
  SIGNAL C_out1_8                         : unsigned(22 DOWNTO 0);  -- ufix23
  SIGNAL if_bitget_Mant_tmp_Mant_tmp_Wor_1_out1 : unsigned(22 DOWNTO 0);  -- ufix23
  SIGNAL if_in_range_1_out1               : unsigned(22 DOWNTO 0);  -- ufix23
  SIGNAL if_aExponent_cfType_Exponent_1_out1 : unsigned(22 DOWNTO 0);  -- ufix23
  SIGNAL nfp_out_pack                     : unsigned(31 DOWNTO 0);  -- ufix32

BEGIN
  nfp_in_unsigned <= unsigned(nfp_in);

  -- Split 32 bit word into FP sign, exponent, mantissa
  aSign <= nfp_in_unsigned(31);
  aExponent <= nfp_in_unsigned(30 DOWNTO 23);
  aMantissa <= nfp_in_unsigned(22 DOWNTO 0);

  
  aExponent_cfType_Exponent_I_out1 <= '1' WHEN aExponent = to_unsigned(16#FF#, 8) ELSE
      '0';

  C3_out1 <= '0';

  
  Compare_To_Zero_out1 <= '1' WHEN aExponent = to_unsigned(16#00#, 8) ELSE
      '0';

  Constant_out1 <= to_unsigned(16#000000#, 23);

  
  Switch_out1 <= aMantissa WHEN Compare_To_Zero_out1 = '0' ELSE
      Constant_out1;

  
  aMantissa_0_out1 <= '1' WHEN Switch_out1 = to_unsigned(16#000000#, 23) ELSE
      '0';

  alphaaMantissa_0_aSign_out1 <= aSign AND aMantissa_0_out1;

  C2_out1 <= '0';

  
  if_aMantissa_0_aSign_2_out1 <= aSign WHEN alphaaMantissa_0_aSign_out1 = '0' ELSE
      C2_out1;

  
  if_aExponent_cfType_Exponent_2_out1 <= C3_out1 WHEN aExponent_cfType_Exponent_I_out1 = '0' ELSE
      if_aMantissa_0_aSign_2_out1;

  C1_out1 <= to_signed(16#086#, 11);

  C_out1 <= to_signed(16#086#, 11);

  
  if_aSign_out1 <= C1_out1 WHEN aSign = '0' ELSE
      C_out1;

  alpha0_out1 <= to_unsigned(16#0#, 3);

  
  Exponent_0_out1 <= '1' WHEN aExponent = to_unsigned(16#00#, 8) ELSE
      '0';

  alpha1_out1 <= '1';

  Bit_Concat1_out1 <= alpha1_out1 & Switch_out1;

  alpha0_out1_1 <= '0';

  Bit_Concat_out1 <= alpha0_out1_1 & Switch_out1;

  
  if_Exponent_0_cfType_Exp_out1 <= Bit_Concat1_out1 WHEN Exponent_0_out1 = '0' ELSE
      Bit_Concat_out1;

  reinterpretcast_mant_cor_nume_out1 <= if_Exponent_0_cfType_Exp_out1;

  alpha1_66096404753625392914_out1 <= unsigned'("010111000101010100011101100101001");

  tmp1_1_66096404753625392914_mul_temp <= reinterpretcast_mant_cor_nume_out1 * alpha1_66096404753625392914_out1;
  tmp1_1_66096404753625392914_out1 <= tmp1_1_66096404753625392914_mul_temp(55 DOWNTO 23);

  BitSlice_out1 <= tmp1_1_66096404753625392914_out1(32);

  C_out1_1 <= to_unsigned(16#01#, 8);

  
  if_Exponent_0_out1 <= aExponent WHEN Exponent_0_out1 = '0' ELSE
      C_out1_1;

  C_out1_2 <= to_unsigned(16#01#, 8);

  exp_cor_2_add_temp <= resize(if_Exponent_0_out1, 9) + resize(C_out1_2, 9);
  
  exp_cor_2_out1 <= "11111111" WHEN exp_cor_2_add_temp(8) /= '0' ELSE
      exp_cor_2_add_temp(7 DOWNTO 0);

  
  if_bitget_tmp2_tmp2_WordLength_out1 <= if_Exponent_0_out1 WHEN BitSlice_out1 = '0' ELSE
      exp_cor_2_out1;

  Bit_Concat_out1_1 <= alpha0_out1 & if_bitget_tmp2_tmp2_WordLength_out1;

  reinterpretcast_bitconcat_fi_0_out1 <= signed(Bit_Concat_out1_1);

  
  exp_tmp_upperBound_relop1 <= '1' WHEN if_aSign_out1 > reinterpretcast_bitconcat_fi_0_out1 ELSE
      '0';

  C1_out1_1 <= to_unsigned(16#FF#, 8);

  C_out1_3 <= to_unsigned(16#00#, 8);

  
  if_aSign_out1_1 <= C1_out1_1 WHEN aSign = '0' ELSE
      C_out1_3;

  alpha0_out1_2 <= '0';

  alpha127_out1 <= to_signed(16#07F#, 10);

  alpha1_out1_1 <= '0';

  C4_out1 <= to_unsigned(0, 40);

  cast_cfType_ExponentBias_lik_out1 <= to_signed(16#07F#, 11);

  exp_tmp_cast_cfType_Exponent_out1 <= resize(reinterpretcast_bitconcat_fi_0_out1, 12) - resize(cast_cfType_ExponentBias_lik_out1, 12);

  DTC_out1 <= exp_tmp_cast_cfType_Exponent_out1(10 DOWNTO 0);

  BitSlice_out1_1 <= DTC_out1(10);

  alpha3_out1 <= to_unsigned(16#00#, 8);

  BitSlice2_out1 <= tmp1_1_66096404753625392914_out1(31 DOWNTO 0);

  reinterpretcast_bitsliceget_t_out1 <= BitSlice2_out1;

  BitSlice1_out1 <= tmp1_1_66096404753625392914_out1(32 DOWNTO 1);

  reinterpretcast_bitsliceget_t_out1_1 <= BitSlice1_out1;

  
  if_bitget_tmp2_tmp2_WordLength_1_out1 <= reinterpretcast_bitsliceget_t_out1 WHEN BitSlice_out1 = '0' ELSE
      reinterpretcast_bitsliceget_t_out1_1;

  Bit_Concat3_out1 <= alpha3_out1 & if_bitget_tmp2_tmp2_WordLength_1_out1;

  reinterpretcast_bitconcat_fi_0_out1_1 <= Bit_Concat3_out1;

  
  DTC2_out1 <= "11111" WHEN (DTC_out1(10) = '0') AND (DTC_out1(9 DOWNTO 5) /= "00000") ELSE
      "00000" WHEN DTC_out1(10) = '1' ELSE
      unsigned(DTC_out1(4 DOWNTO 0));

  dynamic_shift_cast <= resize(DTC2_out1, 8);
  bitsll_tmp1_shift_length_out1 <= reinterpretcast_bitconcat_fi_0_out1_1 sll to_integer(dynamic_shift_cast);

  cast_cfType_ExponentBias_lik_out1_1 <= to_unsigned(16#7F#, 8);

  cast_cfType_ExponentBias_lik_sub_cast <= signed(resize(cast_cfType_ExponentBias_lik_out1_1, 12));
  cast_cfType_ExponentBias_lik_sub_cast_1 <= signed(resize(if_bitget_tmp2_tmp2_WordLength_out1, 12));
  cast_cfType_ExponentBias_lik_sub_temp <= cast_cfType_ExponentBias_lik_sub_cast - cast_cfType_ExponentBias_lik_sub_cast_1;
  cast_cfType_ExponentBias_lik_out1_2 <= unsigned(cast_cfType_ExponentBias_lik_sub_temp(8 DOWNTO 0));

  
  DTC1_out1 <= "11111" WHEN cast_cfType_ExponentBias_lik_out1_2(8 DOWNTO 5) /= "0000" ELSE
      cast_cfType_ExponentBias_lik_out1_2(4 DOWNTO 0);

  dynamic_shift_cast_1 <= resize(DTC1_out1, 8);
  Shift_Arithmetic_out1 <= SHIFT_RIGHT(reinterpretcast_bitconcat_fi_0_out1_1, to_integer(dynamic_shift_cast_1));

  
  if_shift_sign_out1 <= bitsll_tmp1_shift_length_out1 WHEN BitSlice_out1_1 = '0' ELSE
      Shift_Arithmetic_out1;

  
  if_exp_tmp_upperBound_1_out1 <= C4_out1 WHEN exp_tmp_upperBound_relop1 = '0' ELSE
      if_shift_sign_out1;

  BitSlice2_out1_1 <= if_exp_tmp_upperBound_1_out1(39 DOWNTO 31);

  Bit_Concat1_out1_1 <= alpha1_out1_1 & BitSlice2_out1_1;

  reinterpretcast_bitconcat_fi_0_out1_2 <= signed(Bit_Concat1_out1_1);

  alpha127_exp_tmp_out1 <= alpha127_out1 + reinterpretcast_bitconcat_fi_0_out1_2;

  cast_1_like_mant_frac_out1 <= unsigned'(X"80000000");

  alpha0_out1_3 <= '0';

  BitSlice_out1_2 <= if_exp_tmp_upperBound_1_out1(30 DOWNTO 0);

  Bit_Concat_out1_2 <= alpha0_out1_3 & BitSlice_out1_2;

  reinterpretcast_bitconcat_fi_0_out1_3 <= Bit_Concat_out1_2;

  cast_1_like_mant_frac_m_out1 <= cast_1_like_mant_frac_out1 - reinterpretcast_bitconcat_fi_0_out1_3;

  BitSlice1_out1_1 <= cast_1_like_mant_frac_m_out1(31);

  Logical_Operator_out1 <=  NOT BitSlice1_out1_1;

  C1_out1_2 <= to_signed(16#07F#, 10);

  exp_adj_exp_tmp_out1 <= C1_out1_2 - reinterpretcast_bitconcat_fi_0_out1_2;

  C_out1_4 <= to_signed(16#07E#, 10);

  exp_adj_exp_tmp1_out1 <= C_out1_4 - reinterpretcast_bitconcat_fi_0_out1_2;

  
  if_sticky_out1 <= exp_adj_exp_tmp_out1 WHEN Logical_Operator_out1 = '0' ELSE
      exp_adj_exp_tmp1_out1;

  
  if_aSign_1_out1 <= alpha127_exp_tmp_out1 WHEN aSign = '0' ELSE
      if_sticky_out1;

  
  exp_out_0_out1 <= '1' WHEN if_aSign_1_out1 > to_signed(16#000#, 10) ELSE
      '0';

  C2_out1_1 <= to_unsigned(16#000000#, 24);

  Logical_Operator1_out1 <= aSign AND Logical_Operator_out1;

  
  if_sticky_1_out1 <= reinterpretcast_bitconcat_fi_0_out1_3 WHEN Logical_Operator1_out1 = '0' ELSE
      cast_1_like_mant_frac_m_out1;

  Constant_out1_1 <= '0';

  Bit_Concat_out1_3 <= if_sticky_1_out1 & Constant_out1_1;

  Data_Type_Conversion_out1 <= signed(Bit_Concat_out1_3);

  BitSlice_out1_3 <= Data_Type_Conversion_out1(31);

  Log2Table_1_out1 <= signed'("101101010001111111110010111000110");

  w_Log2Table_1_out1 <= Data_Type_Conversion_out1 + Log2Table_1_out1;

  
  if_bitget_w_w_WordLength_1_out1 <= Data_Type_Conversion_out1 WHEN BitSlice_out1_3 = '0' ELSE
      w_Log2Table_1_out1;

  bitsll_w_1_out1 <= if_bitget_w_w_WordLength_1_out1 sll 1;

  BitSlice1_out1_2 <= bitsll_w_1_out1(31);

  BitSlice_out1_4 <= bitsll_w_1_out1(32);

  alphabitget_w_w_WordLength_1_out1 <= BitSlice1_out1_2 XOR BitSlice_out1_4;

  Log2Table_int32_2_out1 <= signed'("101011011001011000011110110100010");

  Log2MinusTable_int32_2_out1 <= signed'("011010100011111111100101110001100");

  
  if_bitget_w_w_WordLength_0_out1 <= Log2Table_int32_2_out1 WHEN BitSlice_out1_4 = '0' ELSE
      Log2MinusTable_int32_2_out1;

  w_Log2MinusTable_int32_2_1_out1 <= bitsll_w_1_out1 + if_bitget_w_w_WordLength_0_out1;

  
  if_bitget_w_w_WordLength_1_out1_1 <= bitsll_w_1_out1 WHEN alphabitget_w_w_WordLength_1_out1 = '0' ELSE
      w_Log2MinusTable_int32_2_1_out1;

  bitsll_w_1_out1_1 <= if_bitget_w_w_WordLength_1_out1_1 sll 1;

  BitSlice1_out1_3 <= bitsll_w_1_out1_1(31);

  BitSlice_out1_5 <= bitsll_w_1_out1_1(32);

  alphabitget_w_w_WordLength_1_out1_1 <= BitSlice1_out1_3 XOR BitSlice_out1_5;

  Log2Table_int32_3_out1 <= signed'("101010001111111110010111000110000");

  Log2MinusTable_int32_3_out1 <= signed'("011000101010001001100000001010110");

  
  if_bitget_w_w_WordLength_0_out1_1 <= Log2Table_int32_3_out1 WHEN BitSlice_out1_5 = '0' ELSE
      Log2MinusTable_int32_3_out1;

  w_Log2MinusTable_int32_2_out1 <= bitsll_w_1_out1_1 + if_bitget_w_w_WordLength_0_out1_1;

  
  if_bitget_w_w_WordLength_1_out1_2 <= bitsll_w_1_out1_1 WHEN alphabitget_w_w_WordLength_1_out1_1 = '0' ELSE
      w_Log2MinusTable_int32_2_out1;

  bitsll_w_1_out1_2 <= if_bitget_w_w_WordLength_1_out1_2 sll 1;

  BitSlice1_out1_4 <= bitsll_w_1_out1_2(31);

  BitSlice_out1_6 <= bitsll_w_1_out1_2(32);

  alphabitget_w_w_WordLength_1_out1_2 <= BitSlice1_out1_4 XOR BitSlice_out1_6;

  Log2Table_int32_4_out1 <= signed'("101001100111000000100100000101010");

  Log2MinusTable_int32_4_out1 <= signed'("010111110101100000010010010110110");

  
  if_bitget_w_w_WordLength_0_out1_2 <= Log2Table_int32_4_out1 WHEN BitSlice_out1_6 = '0' ELSE
      Log2MinusTable_int32_4_out1;

  w_Log2MinusTable_int32_2_out1_1 <= bitsll_w_1_out1_2 + if_bitget_w_w_WordLength_0_out1_2;

  
  if_bitget_w_w_WordLength_1_out1_3 <= bitsll_w_1_out1_2 WHEN alphabitget_w_w_WordLength_1_out1_2 = '0' ELSE
      w_Log2MinusTable_int32_2_out1_1;

  bitsll_w_1_out1_3 <= if_bitget_w_w_WordLength_1_out1_3 sll 1;

  BitSlice1_out1_5 <= bitsll_w_1_out1_3(31);

  BitSlice_out1_7 <= bitsll_w_1_out1_3(32);

  alphabitget_w_w_WordLength_1_out1_3 <= BitSlice1_out1_5 XOR BitSlice_out1_7;

  Log2Table_int32_5_out1 <= signed'("101001010001010010110010001010100");

  Log2MinusTable_int32_5_out1 <= signed'("010111011100111001010011001001110");

  
  if_bitget_w_w_WordLength_0_out1_3 <= Log2Table_int32_5_out1 WHEN BitSlice_out1_7 = '0' ELSE
      Log2MinusTable_int32_5_out1;

  w_Log2MinusTable_int32_2_out1_2 <= bitsll_w_1_out1_3 + if_bitget_w_w_WordLength_0_out1_3;

  
  if_bitget_w_w_WordLength_1_out1_4 <= bitsll_w_1_out1_3 WHEN alphabitget_w_w_WordLength_1_out1_3 = '0' ELSE
      w_Log2MinusTable_int32_2_out1_2;

  bitsll_w_1_out1_4 <= if_bitget_w_w_WordLength_1_out1_4 sll 1;

  BitSlice1_out1_6 <= bitsll_w_1_out1_4(31);

  BitSlice_out1_8 <= bitsll_w_1_out1_4(32);

  alphabitget_w_w_WordLength_1_out1_4 <= BitSlice1_out1_6 XOR BitSlice_out1_8;

  Log2Table_int32_6_out1 <= signed'("101001000110000110100101111010010");

  Log2MinusTable_int32_6_out1 <= signed'("010111010000111110111010000110000");

  
  if_bitget_w_w_WordLength_0_out1_4 <= Log2Table_int32_6_out1 WHEN BitSlice_out1_8 = '0' ELSE
      Log2MinusTable_int32_6_out1;

  w_Log2MinusTable_int32_2_out1_3 <= bitsll_w_1_out1_4 + if_bitget_w_w_WordLength_0_out1_4;

  
  if_bitget_w_w_WordLength_1_out1_5 <= bitsll_w_1_out1_4 WHEN alphabitget_w_w_WordLength_1_out1_4 = '0' ELSE
      w_Log2MinusTable_int32_2_out1_3;

  bitsll_w_1_out1_5 <= if_bitget_w_w_WordLength_1_out1_5 sll 1;

  BitSlice1_out1_7 <= bitsll_w_1_out1_5(31);

  BitSlice_out1_9 <= bitsll_w_1_out1_5(32);

  alphabitget_w_w_WordLength_1_out1_5 <= BitSlice1_out1_7 XOR BitSlice_out1_9;

  Log2Table_int32_7_out1 <= signed'("101001000000011010111101001001000");

  Log2MinusTable_int32_7_out1 <= signed'("010111001011000111101110100010000");

  
  if_bitget_w_w_WordLength_0_out1_5 <= Log2Table_int32_7_out1 WHEN BitSlice_out1_9 = '0' ELSE
      Log2MinusTable_int32_7_out1;

  w_Log2MinusTable_int32_2_out1_4 <= bitsll_w_1_out1_5 + if_bitget_w_w_WordLength_0_out1_5;

  
  if_bitget_w_w_WordLength_1_out1_6 <= bitsll_w_1_out1_5 WHEN alphabitget_w_w_WordLength_1_out1_5 = '0' ELSE
      w_Log2MinusTable_int32_2_out1_4;

  bitsll_w_1_out1_6 <= if_bitget_w_w_WordLength_1_out1_6 sll 1;

  BitSlice1_out1_8 <= bitsll_w_1_out1_6(31);

  BitSlice_out1_10 <= bitsll_w_1_out1_6(32);

  alphabitget_w_w_WordLength_1_out1_6 <= BitSlice1_out1_8 XOR BitSlice_out1_10;

  Log2Table_int32_8_out1 <= signed'("101000111101100011101110010010100");

  Log2MinusTable_int32_8_out1 <= signed'("010111001000001101100111000000100");

  
  if_bitget_w_w_WordLength_0_out1_6 <= Log2Table_int32_8_out1 WHEN BitSlice_out1_10 = '0' ELSE
      Log2MinusTable_int32_8_out1;

  w_Log2MinusTable_int32_2_out1_5 <= bitsll_w_1_out1_6 + if_bitget_w_w_WordLength_0_out1_6;

  
  if_bitget_w_w_WordLength_1_out1_7 <= bitsll_w_1_out1_6 WHEN alphabitget_w_w_WordLength_1_out1_6 = '0' ELSE
      w_Log2MinusTable_int32_2_out1_5;

  bitsll_w_1_out1_7 <= if_bitget_w_w_WordLength_1_out1_7 sll 1;

  BitSlice1_out1_9 <= bitsll_w_1_out1_7(31);

  BitSlice_out1_11 <= bitsll_w_1_out1_7(32);

  alphabitget_w_w_WordLength_1_out1_7 <= BitSlice1_out1_9 XOR BitSlice_out1_11;

  Log2Table_int32_9_out1 <= signed'("101000111100000111110000000001000");

  Log2MinusTable_int32_9_out1 <= signed'("010111000110110000111010100100010");

  
  if_bitget_w_w_WordLength_0_out1_7 <= Log2Table_int32_9_out1 WHEN BitSlice_out1_11 = '0' ELSE
      Log2MinusTable_int32_9_out1;

  w_Log2MinusTable_int32_2_out1_6 <= bitsll_w_1_out1_7 + if_bitget_w_w_WordLength_0_out1_7;

  
  if_bitget_w_w_WordLength_1_out1_8 <= bitsll_w_1_out1_7 WHEN alphabitget_w_w_WordLength_1_out1_7 = '0' ELSE
      w_Log2MinusTable_int32_2_out1_6;

  bitsll_w_1_out1_8 <= if_bitget_w_w_WordLength_1_out1_8 sll 1;

  BitSlice1_out1_10 <= bitsll_w_1_out1_8(31);

  BitSlice_out1_12 <= bitsll_w_1_out1_8(32);

  alphabitget_w_w_WordLength_1_out1_8 <= BitSlice1_out1_10 XOR BitSlice_out1_12;

  Log2Table_int32_10_out1 <= signed'("101000111011011001101011001000110");

  Log2MinusTable_int32_10_out1 <= signed'("010111000110000010101010001001010");

  
  if_bitget_w_w_WordLength_0_out1_8 <= Log2Table_int32_10_out1 WHEN BitSlice_out1_12 = '0' ELSE
      Log2MinusTable_int32_10_out1;

  w_Log2MinusTable_int32_2_out1_7 <= bitsll_w_1_out1_8 + if_bitget_w_w_WordLength_0_out1_8;

  
  if_bitget_w_w_WordLength_1_out1_9 <= bitsll_w_1_out1_8 WHEN alphabitget_w_w_WordLength_1_out1_8 = '0' ELSE
      w_Log2MinusTable_int32_2_out1_7;

  bitsll_w_1_out1_9 <= if_bitget_w_w_WordLength_1_out1_9 sll 1;

  BitSlice1_out1_11 <= bitsll_w_1_out1_9(31);

  BitSlice_out1_13 <= bitsll_w_1_out1_9(32);

  alphabitget_w_w_WordLength_1_out1_9 <= BitSlice1_out1_11 XOR BitSlice_out1_13;

  Log2Table_int32_11_out1 <= signed'("101000111011000010100111010000100");

  Log2MinusTable_int32_11_out1 <= signed'("010111000101101011100011011000100");

  
  if_bitget_w_w_WordLength_0_out1_9 <= Log2Table_int32_11_out1 WHEN BitSlice_out1_13 = '0' ELSE
      Log2MinusTable_int32_11_out1;

  w_Log2MinusTable_int32_2_out1_8 <= bitsll_w_1_out1_9 + if_bitget_w_w_WordLength_0_out1_9;

  
  if_bitget_w_w_WordLength_1_out1_10 <= bitsll_w_1_out1_9 WHEN alphabitget_w_w_WordLength_1_out1_9 = '0' ELSE
      w_Log2MinusTable_int32_2_out1_8;

  bitsll_w_1_out1_10 <= if_bitget_w_w_WordLength_1_out1_10 sll 1;

  BitSlice1_out1_12 <= bitsll_w_1_out1_10(31);

  BitSlice_out1_14 <= bitsll_w_1_out1_10(32);

  alphabitget_w_w_WordLength_1_out1_10 <= BitSlice1_out1_12 XOR BitSlice_out1_14;

  C1_out1_3 <= to_signed(16#2#, 4);

  C_out1_5 <= to_signed(16#3#, 4);

  
  if_bitget_w_w_WordLength_1_1_out1 <= C1_out1_3 WHEN BitSlice_out1_3 = '0' ELSE
      C_out1_5;

  Constant_out1_2 <= to_unsigned(16#0#, 2);

  Bit_Concat_out1_4 <= unsigned(if_bitget_w_w_WordLength_1_1_out1) & Constant_out1_2;

  dtc1_out1_1 <= signed(Bit_Concat_out1_4);

  bitsrl_y_int32_2_out1 <= dtc1_out1_1 srl 2;

  y_tmp1_out1 <= dtc1_out1_1 - bitsrl_y_int32_2_out1;

  y_tmp1_out1_1 <= dtc1_out1_1 + bitsrl_y_int32_2_out1;

  
  if_bitget_w_w_WordLength_0_1_out1 <= y_tmp1_out1 WHEN BitSlice1_out1_2 = '0' ELSE
      y_tmp1_out1_1;

  
  if_bitget_w_w_WordLength_1_1_out1_1 <= dtc1_out1_1 WHEN alphabitget_w_w_WordLength_1_out1 = '0' ELSE
      if_bitget_w_w_WordLength_0_1_out1;

  Constant_out1_3 <= to_unsigned(16#0#, 3);

  Bit_Concat_out1_5 <= unsigned(if_bitget_w_w_WordLength_1_1_out1_1) & Constant_out1_3;

  dtc1_out1_2 <= signed(Bit_Concat_out1_5);

  bitsrl_y_int32_2_out1_1 <= dtc1_out1_2 srl 3;

  y_tmp1_out1_2 <= dtc1_out1_2 - bitsrl_y_int32_2_out1_1;

  y_tmp1_out1_3 <= dtc1_out1_2 + bitsrl_y_int32_2_out1_1;

  
  if_bitget_w_w_WordLength_0_1_out1_1 <= y_tmp1_out1_2 WHEN BitSlice1_out1_3 = '0' ELSE
      y_tmp1_out1_3;

  
  if_bitget_w_w_WordLength_1_1_out1_2 <= dtc1_out1_2 WHEN alphabitget_w_w_WordLength_1_out1_1 = '0' ELSE
      if_bitget_w_w_WordLength_0_1_out1_1;

  Constant_out1_4 <= to_unsigned(16#0#, 4);

  Bit_Concat_out1_6 <= unsigned(if_bitget_w_w_WordLength_1_1_out1_2) & Constant_out1_4;

  dtc1_out1_3 <= signed(Bit_Concat_out1_6);

  bitsrl_y_int32_2_out1_2 <= dtc1_out1_3 srl 4;

  y_tmp1_out1_4 <= dtc1_out1_3 - bitsrl_y_int32_2_out1_2;

  y_tmp1_out1_5 <= dtc1_out1_3 + bitsrl_y_int32_2_out1_2;

  
  if_bitget_w_w_WordLength_0_1_out1_2 <= y_tmp1_out1_4 WHEN BitSlice1_out1_4 = '0' ELSE
      y_tmp1_out1_5;

  
  if_bitget_w_w_WordLength_1_1_out1_3 <= dtc1_out1_3 WHEN alphabitget_w_w_WordLength_1_out1_2 = '0' ELSE
      if_bitget_w_w_WordLength_0_1_out1_2;

  Constant_out1_5 <= to_unsigned(16#00#, 5);

  Bit_Concat_out1_7 <= unsigned(if_bitget_w_w_WordLength_1_1_out1_3) & Constant_out1_5;

  dtc1_out1_4 <= signed(Bit_Concat_out1_7);

  bitsrl_y_int32_2_out1_3 <= dtc1_out1_4 srl 5;

  y_tmp1_out1_6 <= dtc1_out1_4 - bitsrl_y_int32_2_out1_3;

  y_tmp1_out1_7 <= dtc1_out1_4 + bitsrl_y_int32_2_out1_3;

  
  if_bitget_w_w_WordLength_0_1_out1_3 <= y_tmp1_out1_6 WHEN BitSlice1_out1_5 = '0' ELSE
      y_tmp1_out1_7;

  
  if_bitget_w_w_WordLength_1_1_out1_4 <= dtc1_out1_4 WHEN alphabitget_w_w_WordLength_1_out1_3 = '0' ELSE
      if_bitget_w_w_WordLength_0_1_out1_3;

  Constant_out1_6 <= to_unsigned(16#00#, 6);

  Bit_Concat_out1_8 <= unsigned(if_bitget_w_w_WordLength_1_1_out1_4) & Constant_out1_6;

  dtc1_out1_5 <= signed(Bit_Concat_out1_8);

  bitsrl_y_int32_2_out1_4 <= dtc1_out1_5 srl 6;

  y_tmp1_out1_8 <= dtc1_out1_5 - bitsrl_y_int32_2_out1_4;

  y_tmp1_out1_9 <= dtc1_out1_5 + bitsrl_y_int32_2_out1_4;

  
  if_bitget_w_w_WordLength_0_1_out1_4 <= y_tmp1_out1_8 WHEN BitSlice1_out1_6 = '0' ELSE
      y_tmp1_out1_9;

  
  if_bitget_w_w_WordLength_1_1_out1_5 <= dtc1_out1_5 WHEN alphabitget_w_w_WordLength_1_out1_4 = '0' ELSE
      if_bitget_w_w_WordLength_0_1_out1_4;

  Constant_out1_7 <= to_unsigned(16#00#, 7);

  Bit_Concat_out1_9 <= unsigned(if_bitget_w_w_WordLength_1_1_out1_5) & Constant_out1_7;

  dtc1_out1_6 <= signed(Bit_Concat_out1_9);

  bitsrl_y_int32_2_out1_5 <= dtc1_out1_6 srl 7;

  y_tmp1_out1_10 <= dtc1_out1_6 - bitsrl_y_int32_2_out1_5;

  y_tmp1_out1_11 <= dtc1_out1_6 + bitsrl_y_int32_2_out1_5;

  
  if_bitget_w_w_WordLength_0_1_out1_5 <= y_tmp1_out1_10 WHEN BitSlice1_out1_7 = '0' ELSE
      y_tmp1_out1_11;

  
  if_bitget_w_w_WordLength_1_1_out1_6 <= dtc1_out1_6 WHEN alphabitget_w_w_WordLength_1_out1_5 = '0' ELSE
      if_bitget_w_w_WordLength_0_1_out1_5;

  Constant_out1_8 <= to_unsigned(16#0#, 3);

  Bit_Concat_out1_10 <= unsigned(if_bitget_w_w_WordLength_1_1_out1_6) & Constant_out1_8;

  dtc1_out1_7 <= signed(Bit_Concat_out1_10);

  bitsrl_y_int32_2_out1_6 <= dtc1_out1_7 srl 8;

  y_tmp1_out1_12 <= dtc1_out1_7 - bitsrl_y_int32_2_out1_6;

  y_tmp1_out1_13 <= dtc1_out1_7 + bitsrl_y_int32_2_out1_6;

  
  if_bitget_w_w_WordLength_0_1_out1_6 <= y_tmp1_out1_12 WHEN BitSlice1_out1_8 = '0' ELSE
      y_tmp1_out1_13;

  
  if_bitget_w_w_WordLength_1_1_out1_7 <= dtc1_out1_7 WHEN alphabitget_w_w_WordLength_1_out1_6 = '0' ELSE
      if_bitget_w_w_WordLength_0_1_out1_6;

  bitsrl_y_int32_2_out1_7 <= if_bitget_w_w_WordLength_1_1_out1_7 srl 9;

  y_tmp1_out1_14 <= if_bitget_w_w_WordLength_1_1_out1_7 - bitsrl_y_int32_2_out1_7;

  y_tmp1_out1_15 <= if_bitget_w_w_WordLength_1_1_out1_7 + bitsrl_y_int32_2_out1_7;

  
  if_bitget_w_w_WordLength_0_1_out1_7 <= y_tmp1_out1_14 WHEN BitSlice1_out1_9 = '0' ELSE
      y_tmp1_out1_15;

  
  if_bitget_w_w_WordLength_1_1_out1_8 <= if_bitget_w_w_WordLength_1_1_out1_7 WHEN alphabitget_w_w_WordLength_1_out1_7 = '0' ELSE
      if_bitget_w_w_WordLength_0_1_out1_7;

  bitsrl_y_int32_2_out1_8 <= if_bitget_w_w_WordLength_1_1_out1_8 srl 10;

  y_tmp1_out1_16 <= if_bitget_w_w_WordLength_1_1_out1_8 - bitsrl_y_int32_2_out1_8;

  y_tmp1_out1_17 <= if_bitget_w_w_WordLength_1_1_out1_8 + bitsrl_y_int32_2_out1_8;

  
  if_bitget_w_w_WordLength_0_1_out1_8 <= y_tmp1_out1_16 WHEN BitSlice1_out1_10 = '0' ELSE
      y_tmp1_out1_17;

  
  if_bitget_w_w_WordLength_1_1_out1_9 <= if_bitget_w_w_WordLength_1_1_out1_8 WHEN alphabitget_w_w_WordLength_1_out1_8 = '0' ELSE
      if_bitget_w_w_WordLength_0_1_out1_8;

  bitsrl_y_int32_2_out1_9 <= if_bitget_w_w_WordLength_1_1_out1_9 srl 11;

  y_tmp1_out1_18 <= if_bitget_w_w_WordLength_1_1_out1_9 - bitsrl_y_int32_2_out1_9;

  y_tmp1_out1_19 <= if_bitget_w_w_WordLength_1_1_out1_9 + bitsrl_y_int32_2_out1_9;

  
  if_bitget_w_w_WordLength_0_1_out1_9 <= y_tmp1_out1_18 WHEN BitSlice1_out1_11 = '0' ELSE
      y_tmp1_out1_19;

  
  if_bitget_w_w_WordLength_1_1_out1_10 <= if_bitget_w_w_WordLength_1_1_out1_9 WHEN alphabitget_w_w_WordLength_1_out1_9 = '0' ELSE
      if_bitget_w_w_WordLength_0_1_out1_9;

  bitsrl_y_int32_2_out1_10 <= if_bitget_w_w_WordLength_1_1_out1_10 srl 12;

  y_tmp1_out1_20 <= if_bitget_w_w_WordLength_1_1_out1_10 - bitsrl_y_int32_2_out1_10;

  y_tmp1_out1_21 <= if_bitget_w_w_WordLength_1_1_out1_10 + bitsrl_y_int32_2_out1_10;

  
  if_bitget_w_w_WordLength_0_1_out1_10 <= y_tmp1_out1_20 WHEN BitSlice1_out1_12 = '0' ELSE
      y_tmp1_out1_21;

  
  if_bitget_w_w_WordLength_1_1_out1_11 <= if_bitget_w_w_WordLength_1_1_out1_10 WHEN alphabitget_w_w_WordLength_1_out1_10 = '0' ELSE
      if_bitget_w_w_WordLength_0_1_out1_10;

  Log2Table_int32_11_out1_1 <= signed'("101000111010110111000100111101010");

  Log2MinusTable_int32_11_out1_1 <= signed'("010111000101100000000000010111000");

  
  if_bitget_w_w_WordLength_0_out1_10 <= Log2Table_int32_11_out1_1 WHEN BitSlice_out1_14 = '0' ELSE
      Log2MinusTable_int32_11_out1_1;

  w_Log2MinusTable_int32_2_out1_9 <= bitsll_w_1_out1_10 + if_bitget_w_w_WordLength_0_out1_10;

  
  if_bitget_w_w_WordLength_1_out1_11 <= bitsll_w_1_out1_10 WHEN alphabitget_w_w_WordLength_1_out1_10 = '0' ELSE
      w_Log2MinusTable_int32_2_out1_9;

  Bit_Slice_out1 <= unsigned(if_bitget_w_w_WordLength_1_out1_11(32 DOWNTO 12));

  Data_Type_Conversion_out1_1 <= signed(Bit_Slice_out1);

  Bit_Slice2_out1 <= unsigned(if_bitget_w_w_WordLength_1_1_out1_11(32 DOWNTO 12));

  Data_Type_Conversion1_out1 <= signed(Bit_Slice2_out1);

  alpha0_69314717873930931_out1 <= to_signed(16#058B90#, 21);

  tmp1_0_69314717873930931_mul_temp <= Data_Type_Conversion_out1_1 * alpha0_69314717873930931_out1;
  tmp1_0_69314717873930931_out1 <= tmp1_0_69314717873930931_mul_temp(39 DOWNTO 19);

  tmp2_y_mul_temp <= Data_Type_Conversion1_out1 * tmp1_0_69314717873930931_out1;
  tmp2_y_out1 <= tmp2_y_mul_temp(39 DOWNTO 19);

  Bit_Slice1_out1 <= tmp2_y_out1(20);

  Constant1_out1 <= to_signed(16#0000#, 13);

  Constant_out1_9 <= to_signed(-16#0001#, 13);

  
  Switch_out1_1 <= Constant1_out1 WHEN Bit_Slice1_out1 = '0' ELSE
      Constant_out1_9;

  Bit_Concat_out1_11 <= unsigned(Switch_out1_1) & unsigned(tmp2_y_out1);

  DTC2_out1_1 <= signed(Bit_Concat_out1_11);

  y_tmp3_out1 <= if_bitget_w_w_WordLength_1_1_out1_11 + DTC2_out1_1;

  BitSlice_out1_15 <= unsigned(y_tmp3_out1(30 DOWNTO 7));

  
  if_exp_out_0_1_out1 <= C2_out1_1 WHEN exp_out_0_out1 = '0' ELSE
      BitSlice_out1_15;

  Bit_Concat_out1_12 <= alpha0_out1_2 & if_exp_out_0_1_out1;

  BitSlice_out1_16 <= Bit_Concat_out1_12(0);

  BitSlice1_out1_13 <= Bit_Concat_out1_12(1);

  alphabitget_Mant_tmp_2_0_out1 <= BitSlice1_out1_13 OR Logical_Operator_out1;

  alphabitget_Mant_tmp_1_0_out1 <= BitSlice_out1_16 AND alphabitget_Mant_tmp_2_0_out1;

  cast_2_like_Mant_tmp_out1 <= to_unsigned(16#0000002#, 25);

  Mant_tmp_cast_2_like_Man_out1 <= resize(resize(Bit_Concat_out1_12, 32) + resize(cast_2_like_Mant_tmp_out1, 32), 25);

  
  if_bitget_Mant_tmp_1_0_out1 <= Bit_Concat_out1_12 WHEN alphabitget_Mant_tmp_1_0_out1 = '0' ELSE
      Mant_tmp_cast_2_like_Man_out1;

  BitSlice2_out1_2 <= if_bitget_Mant_tmp_1_0_out1(24);

  BitSlice2_out1_3 <= if_aSign_1_out1(9);

  Logical_Operator_out1_1 <=  NOT BitSlice2_out1_3;

  BitSlice1_out1_14 <= y_tmp3_out1(30);

  bitget_y_cfType_Pow2Intermedi_out1 <= Logical_Operator_out1_1 AND BitSlice1_out1_14;

  C1_out1_4 <= to_unsigned(16#00#, 8);

  C_out1_6 <= to_unsigned(16#01#, 8);

  
  if_bitget_y_cfType_Pow2Intermed_out1 <= C1_out1_4 WHEN bitget_y_cfType_Pow2Intermedi_out1 = '0' ELSE
      C_out1_6;

  DTC_out1_1 <= unsigned(if_aSign_1_out1(7 DOWNTO 0));

  
  if_exp_out_0_out1 <= if_bitget_y_cfType_Pow2Intermed_out1 WHEN exp_out_0_out1 = '0' ELSE
      DTC_out1_1;

  cast_1_like_Exp_out1 <= to_unsigned(16#01#, 8);

  Exp_cast_1_like_Exp_out1 <= if_exp_out_0_out1 + cast_1_like_Exp_out1;

  
  if_bitget_Mant_tmp_Mant_tmp_Wor_out1 <= if_exp_out_0_out1 WHEN BitSlice2_out1_2 = '0' ELSE
      Exp_cast_1_like_Exp_out1;

  
  if_in_range_out1 <= if_aSign_out1_1 WHEN exp_tmp_upperBound_relop1 = '0' ELSE
      if_bitget_Mant_tmp_Mant_tmp_Wor_out1;

  C_out1_7 <= to_unsigned(16#00#, 8);

  
  if_aMantissa_0_aSign_out1 <= aExponent WHEN alphaaMantissa_0_aSign_out1 = '0' ELSE
      C_out1_7;

  
  if_aExponent_cfType_Exponent_out1 <= if_in_range_out1 WHEN aExponent_cfType_Exponent_I_out1 = '0' ELSE
      if_aMantissa_0_aSign_out1;

  C2_out1_2 <= to_unsigned(16#000000#, 23);

  
  Compare_To_Zero_out1_1 <= '1' WHEN if_bitget_Mant_tmp_Mant_tmp_Wor_out1 = to_unsigned(16#00#, 8) ELSE
      '0';

  Logical_Operator_out1_2 <= Compare_To_Zero_out1_1 OR BitSlice2_out1_2;

  BitSlice3_out1 <= if_bitget_Mant_tmp_1_0_out1(23 DOWNTO 1);

  C_out1_8 <= to_unsigned(16#000000#, 23);

  
  if_bitget_Mant_tmp_Mant_tmp_Wor_1_out1 <= BitSlice3_out1 WHEN Logical_Operator_out1_2 = '0' ELSE
      C_out1_8;

  
  if_in_range_1_out1 <= C2_out1_2 WHEN exp_tmp_upperBound_relop1 = '0' ELSE
      if_bitget_Mant_tmp_Mant_tmp_Wor_1_out1;

  
  if_aExponent_cfType_Exponent_1_out1 <= if_in_range_1_out1 WHEN aExponent_cfType_Exponent_I_out1 = '0' ELSE
      Switch_out1;

  -- Combine FP sign, exponent, mantissa into 32 bit word
  nfp_out_pack <= if_aExponent_cfType_Exponent_2_out1 & if_aExponent_cfType_Exponent_out1 & if_aExponent_cfType_Exponent_1_out1;

  nfp_out <= std_logic_vector(nfp_out_pack);

END rtl;

