-- -------------------------------------------------------------
-- 
-- File Name: D:\NIH3Repo\simulink_models\models\ur_ear_fpga\hdlsrc\ur_ear_fpga_sim\initialize_signal\ur_ear_fpga_sim_initialize_signal_initialize_signal.vhd
-- 
-- Generated by MATLAB 9.9 and HDL Coder 3.17
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: ur_ear_fpga_sim_initialize_signal_initialize_signal
-- Source Path: initialize_signal
-- Hierarchy Level: 7
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY ur_ear_fpga_sim_initialize_signal_initialize_signal IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb_1_2048_0                      :   IN    std_logic;
        initalize                         :   OUT   std_logic_vector(63 DOWNTO 0)  -- double
        );
END ur_ear_fpga_sim_initialize_signal_initialize_signal;


ARCHITECTURE rtl OF ur_ear_fpga_sim_initialize_signal_initialize_signal IS

  ATTRIBUTE multstyle : string;

  -- Component Declarations
  COMPONENT ur_ear_fpga_sim_initialize_signal_nfp_wire_double
    PORT( nfp_in                          :   IN    std_logic_vector(63 DOWNTO 0);  -- ufix64
          nfp_out                         :   OUT   std_logic_vector(63 DOWNTO 0)  -- ufix64
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : ur_ear_fpga_sim_initialize_signal_nfp_wire_double
    USE ENTITY work.ur_ear_fpga_sim_initialize_signal_nfp_wire_double(rtl);

  -- Signals
  SIGNAL Constant2_out1                   : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Constant1_out1                   : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Switch_out1                      : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Data_Type_Conversion_toBits      : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Data_Type_Conversion_toBits_unsigned : unsigned(63 DOWNTO 0);  -- uint64
  SIGNAL Data_Type_Conversion_expAndMant  : unsigned(62 DOWNTO 0);  -- ufix63
  SIGNAL Data_Type_Conversion_out1        : std_logic;
  SIGNAL HDL_Counter_out1                 : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL switch_compare_1                 : std_logic;

BEGIN
  u_nfp_wire_double : ur_ear_fpga_sim_initialize_signal_nfp_wire_double
    PORT MAP( nfp_in => Switch_out1,  -- ufix64
              nfp_out => Data_Type_Conversion_toBits  -- ufix64
              );

  Constant2_out1 <= X"3ff0000000000000";

  Constant1_out1 <= X"0000000000000000";

  Data_Type_Conversion_toBits_unsigned <= unsigned(Data_Type_Conversion_toBits);

  Data_Type_Conversion_expAndMant <= Data_Type_Conversion_toBits_unsigned(62 DOWNTO 0);

  
  Data_Type_Conversion_out1 <= '1' WHEN Data_Type_Conversion_expAndMant /= to_unsigned(0, 63) ELSE
      '0';

  -- Count limited, Unsigned Counter
  --  initial value   = 0
  --  step value      = 1
  --  count to value  = 3
  HDL_Counter_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      HDL_Counter_out1 <= to_unsigned(16#0#, 2);
    ELSIF rising_edge(clk) THEN
      IF enb_1_2048_0 = '1' AND Data_Type_Conversion_out1 = '1' THEN
        HDL_Counter_out1 <= HDL_Counter_out1 + to_unsigned(16#1#, 2);
      END IF;
    END IF;
  END PROCESS HDL_Counter_process;


  
  switch_compare_1 <= '1' WHEN HDL_Counter_out1 > to_unsigned(16#0#, 2) ELSE
      '0';

  
  Switch_out1 <= Constant2_out1 WHEN switch_compare_1 = '0' ELSE
      Constant1_out1;

  initalize <= Switch_out1;

END rtl;

