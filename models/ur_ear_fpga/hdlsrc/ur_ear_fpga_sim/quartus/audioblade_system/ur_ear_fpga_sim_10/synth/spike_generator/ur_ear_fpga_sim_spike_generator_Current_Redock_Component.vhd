-- -------------------------------------------------------------
-- 
-- File Name: D:\NIH3Repo\simulink_models\models\ur_ear_fpga\hdlsrc\ur_ear_fpga_sim\spike_generator\ur_ear_fpga_sim_spike_generator_Current_Redock_Component.vhd
-- 
-- Generated by MATLAB 9.9 and HDL Coder 3.17
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: ur_ear_fpga_sim_spike_generator_Current_Redock_Component
-- Source Path: spike_generator/Redocking Calculation/Current Redock Component
-- Hierarchy Level: 6
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY ur_ear_fpga_sim_spike_generator_Current_Redock_Component IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb_1_2048_0                      :   IN    std_logic;
        previous_redocking_period         :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        t_rd_jump                         :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        t_rd_init                         :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        site_1_recalculate                :   IN    std_logic;
        site_2_recalculate                :   IN    std_logic;
        site_3_recalculate                :   IN    std_logic;
        site_4_recalculate                :   IN    std_logic;
        current_redocking_period          :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
        recalculate_previous_redocking    :   OUT   std_logic
        );
END ur_ear_fpga_sim_spike_generator_Current_Redock_Component;


ARCHITECTURE rtl OF ur_ear_fpga_sim_spike_generator_Current_Redock_Component IS

  ATTRIBUTE multstyle : string;

  -- Component Declarations
  COMPONENT initialize_signal
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb_1_2048_0                    :   IN    std_logic;
          initalize                       :   OUT   std_logic_vector(63 DOWNTO 0)  -- double
          );
  END COMPONENT;

  COMPONENT ur_ear_fpga_sim_spike_generator_nfp_abs_double
    PORT( nfp_in                          :   IN    std_logic_vector(63 DOWNTO 0);  -- ufix64
          nfp_out                         :   OUT   std_logic_vector(63 DOWNTO 0)  -- ufix64
          );
  END COMPONENT;

  COMPONENT ur_ear_fpga_sim_spike_generator_nfp_convert_fix_10_En0_to_single
    PORT( nfp_in                          :   IN    std_logic_vector(9 DOWNTO 0);  -- ufix10
          nfp_out                         :   OUT   std_logic_vector(31 DOWNTO 0)  -- ufix32
          );
  END COMPONENT;

  COMPONENT ur_ear_fpga_sim_spike_generator_nfp_mul_single
    PORT( nfp_in1                         :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          nfp_in2                         :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          nfp_out                         :   OUT   std_logic_vector(31 DOWNTO 0)  -- ufix32
          );
  END COMPONENT;

  COMPONENT ur_ear_fpga_sim_spike_generator_nfp_add_single
    PORT( nfp_in1                         :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          nfp_in2                         :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          nfp_out                         :   OUT   std_logic_vector(31 DOWNTO 0)  -- ufix32
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : initialize_signal
    USE ENTITY work.ur_ear_fpga_sim_initialize_signal_initialize_signal(rtl);

  FOR ALL : ur_ear_fpga_sim_spike_generator_nfp_abs_double
    USE ENTITY work.ur_ear_fpga_sim_spike_generator_nfp_abs_double(rtl);

  FOR ALL : ur_ear_fpga_sim_spike_generator_nfp_convert_fix_10_En0_to_single
    USE ENTITY work.ur_ear_fpga_sim_spike_generator_nfp_convert_fix_10_En0_to_single(rtl);

  FOR ALL : ur_ear_fpga_sim_spike_generator_nfp_mul_single
    USE ENTITY work.ur_ear_fpga_sim_spike_generator_nfp_mul_single(rtl);

  FOR ALL : ur_ear_fpga_sim_spike_generator_nfp_add_single
    USE ENTITY work.ur_ear_fpga_sim_spike_generator_nfp_add_single(rtl);

  -- Signals
  SIGNAL Initialization_Signal_out1       : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Switch_control_abs               : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL OR_out1                          : std_logic;
  SIGNAL OR_out1_1                        : std_logic;
  SIGNAL Add1_add_cast                    : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL Add1_add_cast_1                  : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL Add1_add_temp                    : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL Add1_add_cast_2                  : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL Add1_add_temp_1                  : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL Add1_add_cast_3                  : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL Add1_out1                        : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL Add1_out1_1                      : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL Data_Type_Conversion7_out1       : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Product_out1                     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Add_out1                         : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_out1                      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay_out1                       : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch1_out1                     : std_logic_vector(31 DOWNTO 0);  -- ufix32

BEGIN
  -- Whenever any redocking site "fires", the redocking period 
  -- is incremented by t_rd_jump
  -- 
  -- Line 575

  u_Initialization_Signal : initialize_signal
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_2048_0 => enb_1_2048_0,
              initalize => Initialization_Signal_out1  -- double
              );

  u_nfp_abs_comp : ur_ear_fpga_sim_spike_generator_nfp_abs_double
    PORT MAP( nfp_in => Initialization_Signal_out1,  -- ufix64
              nfp_out => Switch_control_abs  -- ufix64
              );

  u_spike_generator_Redocking_Calculation_Current_Redock_Component_nfp_convert_fix_10_En0_to_single : ur_ear_fpga_sim_spike_generator_nfp_convert_fix_10_En0_to_single
    PORT MAP( nfp_in => std_logic_vector(Add1_out1_1),  -- ufix10
              nfp_out => Data_Type_Conversion7_out1  -- ufix32
              );

  u_nfp_mul_comp : ur_ear_fpga_sim_spike_generator_nfp_mul_single
    PORT MAP( nfp_in1 => Data_Type_Conversion7_out1,  -- ufix32
              nfp_in2 => t_rd_jump,  -- ufix32
              nfp_out => Product_out1  -- ufix32
              );

  u_nfp_add_comp : ur_ear_fpga_sim_spike_generator_nfp_add_single
    PORT MAP( nfp_in1 => Product_out1,  -- ufix32
              nfp_in2 => previous_redocking_period,  -- ufix32
              nfp_out => Add_out1  -- ufix32
              );

  OR_out1 <= site_4_recalculate OR (site_3_recalculate OR (site_1_recalculate OR site_2_recalculate));

  delayMatch1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      OR_out1_1 <= '0';
    ELSIF rising_edge(clk) THEN
      IF enb_1_2048_0 = '1' THEN
        OR_out1_1 <= OR_out1;
      END IF;
    END IF;
  END PROCESS delayMatch1_process;


  Add1_add_cast <= '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & site_1_recalculate;
  Add1_add_cast_1 <= '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & site_2_recalculate;
  Add1_add_temp <= Add1_add_cast + Add1_add_cast_1;
  Add1_add_cast_2 <= '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & site_3_recalculate;
  Add1_add_temp_1 <= Add1_add_temp + Add1_add_cast_2;
  Add1_add_cast_3 <= '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & site_4_recalculate;
  Add1_out1 <= Add1_add_temp_1 + Add1_add_cast_3;

  delayMatch_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Add1_out1_1 <= to_unsigned(16#000#, 10);
    ELSIF rising_edge(clk) THEN
      IF enb_1_2048_0 = '1' THEN
        Add1_out1_1 <= Add1_out1;
      END IF;
    END IF;
  END PROCESS delayMatch_process;


  Delay_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay_out1 <= X"00000000";
    ELSIF rising_edge(clk) THEN
      IF enb_1_2048_0 = '1' THEN
        Delay_out1 <= Switch_out1;
      END IF;
    END IF;
  END PROCESS Delay_process;


  
  Switch1_out1 <= Delay_out1 WHEN OR_out1_1 = '0' ELSE
      Add_out1;

  
  Switch_out1 <= Switch1_out1 WHEN Switch_control_abs = X"0000000000000000" ELSE
      t_rd_init;

  recalculate_previous_redocking <= OR_out1_1;

  current_redocking_period <= Switch_out1;

END rtl;

