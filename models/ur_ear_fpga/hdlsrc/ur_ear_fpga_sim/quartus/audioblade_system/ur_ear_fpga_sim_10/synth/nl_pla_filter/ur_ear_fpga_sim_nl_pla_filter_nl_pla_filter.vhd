-- -------------------------------------------------------------
-- 
-- File Name: D:\NIH3Repo\simulink_models\models\ur_ear_fpga\hdlsrc\ur_ear_fpga_sim\nl_pla_filter\ur_ear_fpga_sim_nl_pla_filter_nl_pla_filter.vhd
-- 
-- Generated by MATLAB 9.9 and HDL Coder 3.17
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: ur_ear_fpga_sim_nl_pla_filter_nl_pla_filter
-- Source Path: nl_pla_filter
-- Hierarchy Level: 5
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY ur_ear_fpga_sim_nl_pla_filter_nl_pla_filter IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        enb_1_2048_1                      :   IN    std_logic;
        pla_nlf_in                        :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        pla_nlf_out                       :   OUT   std_logic_vector(31 DOWNTO 0)  -- single
        );
END ur_ear_fpga_sim_nl_pla_filter_nl_pla_filter;


ARCHITECTURE rtl OF ur_ear_fpga_sim_nl_pla_filter_nl_pla_filter IS

  ATTRIBUTE multstyle : string;

  -- Component Declarations
  COMPONENT ur_ear_fpga_sim_nl_pla_filter_nfp_abs_single
    PORT( nfp_in                          :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          nfp_out                         :   OUT   std_logic_vector(31 DOWNTO 0)  -- ufix32
          );
  END COMPONENT;

  COMPONENT ur_ear_fpga_sim_nl_pla_filter_nfp_relop_single
    PORT( nfp_in1                         :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          nfp_in2                         :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          nfp_out1                        :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT ur_ear_fpga_sim_nl_pla_filter_Subsystem
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          enb_1_2048_1                    :   IN    std_logic;
          In1                             :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          In2                             :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          Enable                          :   IN    std_logic;
          mappingOut                      :   OUT   std_logic_vector(31 DOWNTO 0)  -- single
          );
  END COMPONENT;

  COMPONENT ur_ear_fpga_sim_nl_pla_filter_nfp_add_single
    PORT( nfp_in1                         :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          nfp_in2                         :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          nfp_out                         :   OUT   std_logic_vector(31 DOWNTO 0)  -- ufix32
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : ur_ear_fpga_sim_nl_pla_filter_nfp_abs_single
    USE ENTITY work.ur_ear_fpga_sim_nl_pla_filter_nfp_abs_single(rtl);

  FOR ALL : ur_ear_fpga_sim_nl_pla_filter_nfp_relop_single
    USE ENTITY work.ur_ear_fpga_sim_nl_pla_filter_nfp_relop_single(rtl);

  FOR ALL : ur_ear_fpga_sim_nl_pla_filter_Subsystem
    USE ENTITY work.ur_ear_fpga_sim_nl_pla_filter_Subsystem(rtl);

  FOR ALL : ur_ear_fpga_sim_nl_pla_filter_nfp_add_single
    USE ENTITY work.ur_ear_fpga_sim_nl_pla_filter_nfp_add_single(rtl);

  -- Signals
  SIGNAL Abs_out1                         : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL const                            : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Compare_To_Zero_out1             : std_logic;
  SIGNAL Compare_To_Zero_out1_1           : std_logic;
  SIGNAL Constant6_out1                   : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Subsystem_out1                   : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_out1                      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Constant7_out1                   : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Add2_out1                        : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL t_bypass_reg                     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Add2_out1_1                      : std_logic_vector(31 DOWNTO 0);  -- ufix32

BEGIN
  u_nfp_abs_comp : ur_ear_fpga_sim_nl_pla_filter_nfp_abs_single
    PORT MAP( nfp_in => pla_nlf_in,  -- ufix32
              nfp_out => Abs_out1  -- ufix32
              );

  u_nfp_relop_comp : ur_ear_fpga_sim_nl_pla_filter_nfp_relop_single
    PORT MAP( nfp_in1 => Abs_out1,  -- ufix32
              nfp_in2 => const,  -- ufix32
              nfp_out1 => Compare_To_Zero_out1
              );

  u_Subsystem : ur_ear_fpga_sim_nl_pla_filter_Subsystem
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              enb_1_2048_1 => enb_1_2048_1,
              In1 => pla_nlf_in,  -- single
              In2 => Abs_out1,  -- single
              Enable => Compare_To_Zero_out1,
              mappingOut => Subsystem_out1  -- single
              );

  u_nfp_add_comp : ur_ear_fpga_sim_nl_pla_filter_nfp_add_single
    PORT MAP( nfp_in1 => Switch_out1,  -- ufix32
              nfp_in2 => Constant7_out1,  -- ufix32
              nfp_out => Add2_out1  -- ufix32
              );

  const <= X"00000000";

  delayMatch_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Compare_To_Zero_out1_1 <= '0';
    ELSIF rising_edge(clk) THEN
      IF enb = '1' THEN
        Compare_To_Zero_out1_1 <= Compare_To_Zero_out1;
      END IF;
    END IF;
  END PROCESS delayMatch_process;


  Constant6_out1 <= X"00000000";

  
  Switch_out1 <= Constant6_out1 WHEN Compare_To_Zero_out1_1 = '0' ELSE
      Subsystem_out1;

  Constant7_out1 <= X"43960000";

  t_bypass_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      t_bypass_reg <= X"00000000";
    ELSIF rising_edge(clk) THEN
      IF enb_1_2048_1 = '1' THEN
        t_bypass_reg <= Add2_out1;
      END IF;
    END IF;
  END PROCESS t_bypass_process;

  
  Add2_out1_1 <= Add2_out1 WHEN enb_1_2048_1 = '1' ELSE
      t_bypass_reg;

  pla_nlf_out <= Add2_out1_1;

END rtl;

