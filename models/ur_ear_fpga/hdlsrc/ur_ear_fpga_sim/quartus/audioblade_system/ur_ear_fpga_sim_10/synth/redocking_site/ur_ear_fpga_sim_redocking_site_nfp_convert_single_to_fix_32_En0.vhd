-- -------------------------------------------------------------
-- 
-- File Name: D:\NIH3Repo\simulink_models\models\ur_ear_fpga\hdlsrc\ur_ear_fpga_sim\redocking_site\ur_ear_fpga_sim_redocking_site_nfp_convert_single_to_fix_32_En0.vhd
-- 
-- Generated by MATLAB 9.9 and HDL Coder 3.17
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: ur_ear_fpga_sim_redocking_site_nfp_convert_single_to_fix_32_En0
-- Source Path: redocking_site/nfp_convert_single_to_fix_32_En0
-- Hierarchy Level: 6
-- 
-- {Latency Strategy = "Zero"}
-- 
-- {Rounding Mode = Floor}
-- {Overflow Mode = Wrap}
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY ur_ear_fpga_sim_redocking_site_nfp_convert_single_to_fix_32_En0 IS
  PORT( nfp_in                            :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
        nfp_out                           :   OUT   std_logic_vector(31 DOWNTO 0)  -- ufix32
        );
END ur_ear_fpga_sim_redocking_site_nfp_convert_single_to_fix_32_En0;


ARCHITECTURE rtl OF ur_ear_fpga_sim_redocking_site_nfp_convert_single_to_fix_32_En0 IS

  ATTRIBUTE multstyle : string;

  -- Signals
  SIGNAL nfp_in_unsigned                  : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL In1                              : std_logic;  -- ufix1
  SIGNAL In2                              : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL In3                              : unsigned(22 DOWNTO 0);  -- ufix23
  SIGNAL Compare_To_Zero1_out1            : std_logic;
  SIGNAL Constant3_out1                   : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Constant2_out1                   : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Switch2_out1                     : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Add_sub_cast                     : signed(8 DOWNTO 0);  -- sfix9
  SIGNAL Add_sub_cast_1                   : signed(8 DOWNTO 0);  -- sfix9
  SIGNAL alphave                          : signed(8 DOWNTO 0);  -- sfix9
  SIGNAL Compare_To_Zero_out1             : std_logic;
  SIGNAL Bit_Concat_out1                  : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL Data_Type_Conversion1_out1       : unsigned(23 DOWNTO 0);  -- ufix24_En23
  SIGNAL Unary_Minus_in0                  : signed(9 DOWNTO 0);  -- sfix10
  SIGNAL alphave_1                        : signed(8 DOWNTO 0);  -- sfix9
  SIGNAL shift_arithmetic1_zerosig        : signed(8 DOWNTO 0);  -- sfix9
  SIGNAL shift_arithmetic1_selsig         : signed(8 DOWNTO 0);  -- sfix9
  SIGNAL shift_arithmetic2_zerosig        : signed(8 DOWNTO 0);  -- sfix9
  SIGNAL shift_arithmetic2_selsig         : signed(8 DOWNTO 0);  -- sfix9
  SIGNAL equality                         : std_logic;
  SIGNAL Data_Type_Conversion_out1        : unsigned(55 DOWNTO 0);  -- ufix56_En24
  SIGNAL dynamic_shift_zerosig            : signed(8 DOWNTO 0);  -- sfix9
  SIGNAL dynamic_shift_selsig             : signed(8 DOWNTO 0);  -- sfix9
  SIGNAL dynamic_shift_cast               : signed(15 DOWNTO 0);  -- int16
  SIGNAL Shift_Arithmetic1_out1           : unsigned(55 DOWNTO 0);  -- ufix56_En24
  SIGNAL Data_Type_Conversion1_out1_1     : unsigned(55 DOWNTO 0);  -- ufix56_En24
  SIGNAL dynamic_shift_zerosig_1          : signed(8 DOWNTO 0);  -- sfix9
  SIGNAL dynamic_shift_selsig_1           : signed(8 DOWNTO 0);  -- sfix9
  SIGNAL dynamic_shift_cast_1             : signed(15 DOWNTO 0);  -- int16
  SIGNAL Shift_Arithmetic2_out1           : unsigned(55 DOWNTO 0);  -- ufix56_En24
  SIGNAL Switch1_out1                     : unsigned(55 DOWNTO 0);  -- ufix56_En24
  SIGNAL Data_Type_Conversion1_out1_2     : signed(56 DOWNTO 0);  -- sfix57_En24
  SIGNAL Unary_Minus_cast                 : signed(57 DOWNTO 0);  -- sfix58_En24
  SIGNAL Unary_Minus_cast_1               : signed(57 DOWNTO 0);  -- sfix58_En24
  SIGNAL Unary_Minus_out1                 : signed(56 DOWNTO 0);  -- sfix57_En24
  SIGNAL Switch1_out1_1                   : signed(56 DOWNTO 0);  -- sfix57_En24
  SIGNAL Data_Type_Conversion2_out1       : unsigned(31 DOWNTO 0);  -- ufix32

BEGIN
  nfp_in_unsigned <= unsigned(nfp_in);

  -- Split 32 bit word into FP sign, exponent, mantissa
  In1 <= nfp_in_unsigned(31);
  In2 <= nfp_in_unsigned(30 DOWNTO 23);
  In3 <= nfp_in_unsigned(22 DOWNTO 0);

  
  Compare_To_Zero1_out1 <= '1' WHEN In2 /= to_unsigned(16#00#, 8) ELSE
      '0';

  Constant3_out1 <= to_unsigned(16#7E#, 8);

  Constant2_out1 <= to_unsigned(16#7F#, 8);

  
  Switch2_out1 <= Constant3_out1 WHEN Compare_To_Zero1_out1 = '0' ELSE
      Constant2_out1;

  Add_sub_cast <= signed(resize(In2, 9));
  Add_sub_cast_1 <= signed(resize(Switch2_out1, 9));
  alphave <= Add_sub_cast - Add_sub_cast_1;

  
  Compare_To_Zero_out1 <= '1' WHEN In2 /= to_unsigned(16#00#, 8) ELSE
      '0';

  Bit_Concat_out1 <= Compare_To_Zero_out1 & In3;

  Data_Type_Conversion1_out1 <= Bit_Concat_out1;

  Unary_Minus_in0 <=  - (resize(alphave, 10));
  alphave_1 <= Unary_Minus_in0(8 DOWNTO 0);

  shift_arithmetic1_zerosig <= to_signed(16#000#, 9);

  
  shift_arithmetic1_selsig <= alphave_1 WHEN alphave_1 >= shift_arithmetic1_zerosig ELSE
      shift_arithmetic1_zerosig;

  shift_arithmetic2_zerosig <= to_signed(16#000#, 9);

  
  shift_arithmetic2_selsig <= alphave WHEN alphave >= shift_arithmetic2_zerosig ELSE
      shift_arithmetic2_zerosig;

  
  equality <= '1' WHEN alphave >= to_signed(16#000#, 9) ELSE
      '0';

  Data_Type_Conversion_out1 <= resize(Data_Type_Conversion1_out1 & '0', 56);

  dynamic_shift_zerosig <= to_signed(16#000#, 9);

  
  dynamic_shift_selsig <= shift_arithmetic1_selsig WHEN shift_arithmetic1_selsig >= dynamic_shift_zerosig ELSE
      dynamic_shift_zerosig;

  dynamic_shift_cast <= resize(dynamic_shift_selsig, 16);
  Shift_Arithmetic1_out1 <= SHIFT_RIGHT(Data_Type_Conversion_out1, to_integer(dynamic_shift_cast));

  Data_Type_Conversion1_out1_1 <= resize(Data_Type_Conversion1_out1 & '0', 56);

  dynamic_shift_zerosig_1 <= to_signed(16#000#, 9);

  
  dynamic_shift_selsig_1 <= shift_arithmetic2_selsig WHEN shift_arithmetic2_selsig >= dynamic_shift_zerosig_1 ELSE
      dynamic_shift_zerosig_1;

  dynamic_shift_cast_1 <= resize(dynamic_shift_selsig_1, 16);
  Shift_Arithmetic2_out1 <= Data_Type_Conversion1_out1_1 sll to_integer(dynamic_shift_cast_1);

  
  Switch1_out1 <= Shift_Arithmetic1_out1 WHEN equality = '0' ELSE
      Shift_Arithmetic2_out1;

  Data_Type_Conversion1_out1_2 <= signed(resize(Switch1_out1, 57));

  Unary_Minus_cast <= resize(Data_Type_Conversion1_out1_2, 58);
  Unary_Minus_cast_1 <=  - (Unary_Minus_cast);
  Unary_Minus_out1 <= Unary_Minus_cast_1(56 DOWNTO 0);

  
  Switch1_out1_1 <= Data_Type_Conversion1_out1_2 WHEN In1 = '0' ELSE
      Unary_Minus_out1;

  Data_Type_Conversion2_out1 <= unsigned(Switch1_out1_1(55 DOWNTO 24));

  nfp_out <= std_logic_vector(Data_Type_Conversion2_out1);

END rtl;

