-- -------------------------------------------------------------
-- 
-- File Name: D:\NIH3Repo\simulink_models\models\ur_ear_fpga\hdlsrc\ur_ear_fpga_sim\nl_pla_filter\ur_ear_fpga_sim_nl_pla_filter_Subsystem.vhd
-- 
-- Generated by MATLAB 9.9 and HDL Coder 3.17
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: ur_ear_fpga_sim_nl_pla_filter_Subsystem
-- Source Path: nl_pla_filter/Subsystem
-- Hierarchy Level: 6
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY ur_ear_fpga_sim_nl_pla_filter_Subsystem IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        enb_1_2048_1                      :   IN    std_logic;
        In1                               :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        In2                               :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        Enable                            :   IN    std_logic;
        mappingOut                        :   OUT   std_logic_vector(31 DOWNTO 0)  -- single
        );
END ur_ear_fpga_sim_nl_pla_filter_Subsystem;


ARCHITECTURE rtl OF ur_ear_fpga_sim_nl_pla_filter_Subsystem IS

  ATTRIBUTE multstyle : string;

  -- Component Declarations
  COMPONENT ur_ear_fpga_sim_nl_pla_filter_nfp_mul_single
    PORT( nfp_in1                         :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          nfp_in2                         :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          nfp_out                         :   OUT   std_logic_vector(31 DOWNTO 0)  -- ufix32
          );
  END COMPONENT;

  COMPONENT ur_ear_fpga_sim_nl_pla_filter_nfp_log10_single
    PORT( nfp_in                          :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          nfp_out                         :   OUT   std_logic_vector(31 DOWNTO 0)  -- ufix32
          );
  END COMPONENT;

  COMPONENT ur_ear_fpga_sim_nl_pla_filter_nfp_add_single
    PORT( nfp_in1                         :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          nfp_in2                         :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          nfp_out                         :   OUT   std_logic_vector(31 DOWNTO 0)  -- ufix32
          );
  END COMPONENT;

  COMPONENT ur_ear_fpga_sim_nl_pla_filter_nfp_pow10_single
    PORT( nfp_in                          :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          nfp_out                         :   OUT   std_logic_vector(31 DOWNTO 0)  -- ufix32
          );
  END COMPONENT;

  COMPONENT ur_ear_fpga_sim_nl_pla_filter_nfp_signum_single
    PORT( nfp_in                          :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          nfp_out                         :   OUT   std_logic_vector(31 DOWNTO 0)  -- ufix32
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : ur_ear_fpga_sim_nl_pla_filter_nfp_mul_single
    USE ENTITY work.ur_ear_fpga_sim_nl_pla_filter_nfp_mul_single(rtl);

  FOR ALL : ur_ear_fpga_sim_nl_pla_filter_nfp_log10_single
    USE ENTITY work.ur_ear_fpga_sim_nl_pla_filter_nfp_log10_single(rtl);

  FOR ALL : ur_ear_fpga_sim_nl_pla_filter_nfp_add_single
    USE ENTITY work.ur_ear_fpga_sim_nl_pla_filter_nfp_add_single(rtl);

  FOR ALL : ur_ear_fpga_sim_nl_pla_filter_nfp_pow10_single
    USE ENTITY work.ur_ear_fpga_sim_nl_pla_filter_nfp_pow10_single(rtl);

  FOR ALL : ur_ear_fpga_sim_nl_pla_filter_nfp_signum_single
    USE ENTITY work.ur_ear_fpga_sim_nl_pla_filter_nfp_signum_single(rtl);

  -- Signals
  SIGNAL Constant_out1                    : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL kconst                           : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Product_out1                     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Log10_out1                       : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Gain_out1                        : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Constant1_out1                   : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Add_out1                         : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Pow_out1                         : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Sign_out1                        : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL mappingOut_1                     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL mappingOut_bypass                : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL mappingOut_bypass_bypass_reg     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL mappingOut_bypass_1              : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL mappingOut_last_value            : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL mappingOut_bypass_2              : std_logic_vector(31 DOWNTO 0);  -- ufix32

BEGIN
  -- Nonlinear log
  -- 
  -- Nonlinear power

  u_nfp_mul_comp : ur_ear_fpga_sim_nl_pla_filter_nfp_mul_single
    PORT MAP( nfp_in1 => In2,  -- ufix32
              nfp_in2 => Constant_out1,  -- ufix32
              nfp_out => Product_out1  -- ufix32
              );

  u_nfp_log10_comp : ur_ear_fpga_sim_nl_pla_filter_nfp_log10_single
    PORT MAP( nfp_in => Product_out1,  -- ufix32
              nfp_out => Log10_out1  -- ufix32
              );

  u_nfp_mul_comp_1 : ur_ear_fpga_sim_nl_pla_filter_nfp_mul_single
    PORT MAP( nfp_in1 => kconst,  -- ufix32
              nfp_in2 => Log10_out1,  -- ufix32
              nfp_out => Gain_out1  -- ufix32
              );

  u_nfp_add_comp : ur_ear_fpga_sim_nl_pla_filter_nfp_add_single
    PORT MAP( nfp_in1 => Gain_out1,  -- ufix32
              nfp_in2 => Constant1_out1,  -- ufix32
              nfp_out => Add_out1  -- ufix32
              );

  u_nfp_pow10_comp : ur_ear_fpga_sim_nl_pla_filter_nfp_pow10_single
    PORT MAP( nfp_in => Add_out1,  -- ufix32
              nfp_out => Pow_out1  -- ufix32
              );

  u_nfp_signum_comp : ur_ear_fpga_sim_nl_pla_filter_nfp_signum_single
    PORT MAP( nfp_in => In1,  -- ufix32
              nfp_out => Sign_out1  -- ufix32
              );

  u_nfp_mul_comp_2 : ur_ear_fpga_sim_nl_pla_filter_nfp_mul_single
    PORT MAP( nfp_in1 => Pow_out1,  -- ufix32
              nfp_in2 => Sign_out1,  -- ufix32
              nfp_out => mappingOut_1  -- ufix32
              );

  Constant_out1 <= X"41a15457";

  kconst <= X"3f666666";

  Constant1_out1 <= X"40833333";

  mappingOut_bypass_bypass_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      mappingOut_bypass_bypass_reg <= X"00000000";
    ELSIF rising_edge(clk) THEN
      IF enb_1_2048_1 = '1' THEN
        mappingOut_bypass_bypass_reg <= mappingOut_bypass;
      END IF;
    END IF;
  END PROCESS mappingOut_bypass_bypass_process;

  
  mappingOut_bypass_1 <= mappingOut_bypass WHEN enb_1_2048_1 = '1' ELSE
      mappingOut_bypass_bypass_reg;

  mappingOut_last_value <= mappingOut_bypass_1;

  
  mappingOut_bypass_2 <= mappingOut_last_value WHEN Enable = '0' ELSE
      mappingOut_1;

  reduced_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      mappingOut_bypass <= X"00000000";
    ELSIF rising_edge(clk) THEN
      IF enb = '1' THEN
        mappingOut_bypass <= mappingOut_bypass_2;
      END IF;
    END IF;
  END PROCESS reduced_process;


  mappingOut <= mappingOut_bypass;

END rtl;

