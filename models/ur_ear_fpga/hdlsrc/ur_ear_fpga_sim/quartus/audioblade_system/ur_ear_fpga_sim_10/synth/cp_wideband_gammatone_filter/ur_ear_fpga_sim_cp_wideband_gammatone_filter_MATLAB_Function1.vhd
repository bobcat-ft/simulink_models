-- -------------------------------------------------------------
-- 
-- File Name: D:\NIH3Repo\simulink_models\models\ur_ear_fpga\hdlsrc\ur_ear_fpga_sim\cp_wideband_gammatone_filter\ur_ear_fpga_sim_cp_wideband_gammatone_filter_MATLAB_Function1.vhd
-- 
-- Generated by MATLAB 9.9 and HDL Coder 3.17
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: ur_ear_fpga_sim_cp_wideband_gammatone_filter_MATLAB_Function1
-- Source Path: cp_wideband_gammatone_filter/MATLAB Function1
-- Hierarchy Level: 6
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY ur_ear_fpga_sim_cp_wideband_gammatone_filter_MATLAB_Function1 IS
  PORT( phase                             :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
        delta_phase                       :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
        wbphase                           :   OUT   std_logic_vector(31 DOWNTO 0)  -- single
        );
END ur_ear_fpga_sim_cp_wideband_gammatone_filter_MATLAB_Function1;


ARCHITECTURE rtl OF ur_ear_fpga_sim_cp_wideband_gammatone_filter_MATLAB_Function1 IS

  ATTRIBUTE multstyle : string;

  -- Component Declarations
  COMPONENT ur_ear_fpga_sim_cp_wideband_gammatone_filter_nfp_sub_single
    PORT( nfp_in1                         :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          nfp_in2                         :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          nfp_out                         :   OUT   std_logic_vector(31 DOWNTO 0)  -- ufix32
          );
  END COMPONENT;

  COMPONENT ur_ear_fpga_sim_cp_wideband_gammatone_filter_nfp_relop_single_block
    PORT( nfp_in1                         :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          nfp_in2                         :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          nfp_out1                        :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT ur_ear_fpga_sim_cp_wideband_gammatone_filter_nfp_add_single
    PORT( nfp_in1                         :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          nfp_in2                         :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          nfp_out                         :   OUT   std_logic_vector(31 DOWNTO 0)  -- ufix32
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : ur_ear_fpga_sim_cp_wideband_gammatone_filter_nfp_sub_single
    USE ENTITY work.ur_ear_fpga_sim_cp_wideband_gammatone_filter_nfp_sub_single(rtl);

  FOR ALL : ur_ear_fpga_sim_cp_wideband_gammatone_filter_nfp_relop_single_block
    USE ENTITY work.ur_ear_fpga_sim_cp_wideband_gammatone_filter_nfp_relop_single_block(rtl);

  FOR ALL : ur_ear_fpga_sim_cp_wideband_gammatone_filter_nfp_add_single
    USE ENTITY work.ur_ear_fpga_sim_cp_wideband_gammatone_filter_nfp_add_single(rtl);

  -- Signals
  SIGNAL const_expression                 : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL out0                             : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL out0_1                           : std_logic;
  SIGNAL const_expression_1               : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL phase_1                          : std_logic_vector(31 DOWNTO 0);  -- ufix32

BEGIN
  u_nfp_sub_comp : ur_ear_fpga_sim_cp_wideband_gammatone_filter_nfp_sub_single
    PORT MAP( nfp_in1 => const_expression,  -- ufix32
              nfp_in2 => delta_phase,  -- ufix32
              nfp_out => out0  -- ufix32
              );

  u_nfp_relop_comp : ur_ear_fpga_sim_cp_wideband_gammatone_filter_nfp_relop_single_block
    PORT MAP( nfp_in1 => phase,  -- ufix32
              nfp_in2 => out0,  -- ufix32
              nfp_out1 => out0_1
              );

  u_nfp_add_comp : ur_ear_fpga_sim_cp_wideband_gammatone_filter_nfp_add_single
    PORT MAP( nfp_in1 => phase,  -- ufix32
              nfp_in2 => const_expression_1,  -- ufix32
              nfp_out => phase_1  -- ufix32
              );

  const_expression <= X"c0c90fdb";

  const_expression_1 <= X"40c90fdb";

  
  wbphase <= phase WHEN out0_1 = '0' ELSE
      phase_1;

END rtl;

