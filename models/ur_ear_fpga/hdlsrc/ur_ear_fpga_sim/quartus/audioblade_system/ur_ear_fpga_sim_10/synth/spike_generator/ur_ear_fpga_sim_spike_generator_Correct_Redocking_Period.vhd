-- -------------------------------------------------------------
-- 
-- File Name: D:\NIH3Repo\simulink_models\models\ur_ear_fpga\hdlsrc\ur_ear_fpga_sim\spike_generator\ur_ear_fpga_sim_spike_generator_Correct_Redocking_Period.vhd
-- 
-- Generated by MATLAB 9.9 and HDL Coder 3.17
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: ur_ear_fpga_sim_spike_generator_Correct_Redocking_Period
-- Source Path: spike_generator/Redocking Calculation/Correct Redocking Period
-- Hierarchy Level: 6
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY ur_ear_fpga_sim_spike_generator_Correct_Redocking_Period IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb_1_2048_0                      :   IN    std_logic;
        current_redocking_period          :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        recalculate_previous              :   IN    std_logic;
        t_rd_decay                        :   IN    std_logic;
        tau                               :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        tdres                             :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        t_rd_rest                         :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        previous_redocking_period         :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
        tau_rd                            :   OUT   std_logic_vector(31 DOWNTO 0)  -- single
        );
END ur_ear_fpga_sim_spike_generator_Correct_Redocking_Period;


ARCHITECTURE rtl OF ur_ear_fpga_sim_spike_generator_Correct_Redocking_Period IS

  ATTRIBUTE multstyle : string;

  -- Component Declarations
  COMPONENT ur_ear_fpga_sim_spike_generator_nfp_div_single
    PORT( nfp_in1                         :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          nfp_in2                         :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          nfp_out                         :   OUT   std_logic_vector(31 DOWNTO 0)  -- ufix32
          );
  END COMPONENT;

  COMPONENT ur_ear_fpga_sim_spike_generator_nfp_sub_single
    PORT( nfp_in1                         :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          nfp_in2                         :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          nfp_out                         :   OUT   std_logic_vector(31 DOWNTO 0)  -- ufix32
          );
  END COMPONENT;

  COMPONENT ur_ear_fpga_sim_spike_generator_nfp_mul_single
    PORT( nfp_in1                         :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          nfp_in2                         :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          nfp_out                         :   OUT   std_logic_vector(31 DOWNTO 0)  -- ufix32
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : ur_ear_fpga_sim_spike_generator_nfp_div_single
    USE ENTITY work.ur_ear_fpga_sim_spike_generator_nfp_div_single(rtl);

  FOR ALL : ur_ear_fpga_sim_spike_generator_nfp_sub_single
    USE ENTITY work.ur_ear_fpga_sim_spike_generator_nfp_sub_single(rtl);

  FOR ALL : ur_ear_fpga_sim_spike_generator_nfp_mul_single
    USE ENTITY work.ur_ear_fpga_sim_spike_generator_nfp_mul_single(rtl);

  -- Signals
  SIGNAL OR_out1                          : std_logic;
  SIGNAL Divide_out1                      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch1_out1                     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Subtract1_out1                   : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Product_out1                     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Subtract_out1                    : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_out1                      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay_out1                       : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay1_out1                      : std_logic_vector(31 DOWNTO 0);  -- ufix32

BEGIN
  -- The previous value is always recalculated once the redocking period for any site reaches the elapsed time, but 
  -- it is also recalculated if a correction is made
  -- 
  -- Lines 576 and 644
  -- 
  -- Continuously recalculate the redocking period correction.  Note, this assumes that rd_first has already occurred
  -- 
  -- Line 643
  -- 
  -- Line 641

  u_nfp_div_comp : ur_ear_fpga_sim_spike_generator_nfp_div_single
    PORT MAP( nfp_in1 => tdres,  -- ufix32
              nfp_in2 => tau,  -- ufix32
              nfp_out => Divide_out1  -- ufix32
              );

  u_nfp_sub_comp : ur_ear_fpga_sim_spike_generator_nfp_sub_single
    PORT MAP( nfp_in1 => Switch1_out1,  -- ufix32
              nfp_in2 => t_rd_rest,  -- ufix32
              nfp_out => Subtract1_out1  -- ufix32
              );

  u_nfp_mul_comp : ur_ear_fpga_sim_spike_generator_nfp_mul_single
    PORT MAP( nfp_in1 => Divide_out1,  -- ufix32
              nfp_in2 => Subtract1_out1,  -- ufix32
              nfp_out => Product_out1  -- ufix32
              );

  u_nfp_sub_comp_1 : ur_ear_fpga_sim_spike_generator_nfp_sub_single
    PORT MAP( nfp_in1 => Switch1_out1,  -- ufix32
              nfp_in2 => Product_out1,  -- ufix32
              nfp_out => Subtract_out1  -- ufix32
              );

  OR_out1 <= t_rd_decay OR recalculate_previous;

  
  Switch_out1 <= current_redocking_period WHEN t_rd_decay = '0' ELSE
      Subtract_out1;

  Delay_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay_out1 <= X"00000000";
    ELSIF rising_edge(clk) THEN
      IF enb_1_2048_0 = '1' THEN
        Delay_out1 <= Switch_out1;
      END IF;
    END IF;
  END PROCESS Delay_process;


  Delay1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay1_out1 <= X"00000000";
    ELSIF rising_edge(clk) THEN
      IF enb_1_2048_0 = '1' THEN
        Delay1_out1 <= Switch1_out1;
      END IF;
    END IF;
  END PROCESS Delay1_process;


  
  Switch1_out1 <= Delay1_out1 WHEN OR_out1 = '0' ELSE
      Delay_out1;

  previous_redocking_period <= Switch1_out1;

  tau_rd <= Switch_out1;

END rtl;

