-- -------------------------------------------------------------
-- 
-- File Name: D:\NIH3Repo\simulink_models\models\ur_ear_fpga\hdlsrc\ur_ear_fpga_sim\synapse_spike_generator\ur_ear_fpga_sim_synapse_spike_generator_synapse_spike_generator.vhd
-- 
-- Generated by MATLAB 9.9 and HDL Coder 3.17
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: ur_ear_fpga_sim_synapse_spike_generator_synapse_spike_generator
-- Source Path: synapse_spike_generator
-- Hierarchy Level: 3
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY ur_ear_fpga_sim_synapse_spike_generator_synapse_spike_generator IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        enb_1_2048_0                      :   IN    std_logic;
        enb_1_2048_1                      :   IN    std_logic;
        Sink_Data                         :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        randNums                          :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        integration_time                  :   IN    std_logic_vector(31 DOWNTO 0);  -- uint32
        randNum1                          :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        randNum2                          :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        randNum3                          :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        randNum4                          :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        randNum5                          :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        randNum6                          :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        randNum7                          :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        randNum8                          :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        randNum9                          :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        randNum10                         :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        randNum11                         :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        randNum12                         :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        spike_count                       :   OUT   std_logic_vector(17 DOWNTO 0);  -- ufix18
        spike_valid                       :   OUT   std_logic
        );
END ur_ear_fpga_sim_synapse_spike_generator_synapse_spike_generator;


ARCHITECTURE rtl OF ur_ear_fpga_sim_synapse_spike_generator_synapse_spike_generator IS

  ATTRIBUTE multstyle : string;

  -- Component Declarations
  COMPONENT synapse_model
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          enb_1_2048_0                    :   IN    std_logic;
          enb_1_2048_1                    :   IN    std_logic;
          pla_nlf_in                      :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          randNum                         :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          syn_out                         :   OUT   std_logic_vector(31 DOWNTO 0)  -- single
          );
  END COMPONENT;

  COMPONENT spike_generator
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb_1_2048_0                    :   IN    std_logic;
          synout                          :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          randNum1                        :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          randNum2                        :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          randNum3                        :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          randNum4                        :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          randNum5                        :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          randNum6                        :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          randNum7                        :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          randNum8                        :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          randNum9                        :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          randNum10                       :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          randNum11                       :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          randNum12                       :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          spout_redock_1                  :   OUT   std_logic;
          spout_redock_2                  :   OUT   std_logic;
          spout_redock_3                  :   OUT   std_logic;
          spout_redock_4                  :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT accumulator
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb_1_2048_0                    :   IN    std_logic;
          register_control_integration_time :   IN    std_logic_vector(31 DOWNTO 0);  -- uint32
          redocking_site_1_input          :   IN    std_logic;
          redocking_site_2_spcount        :   IN    std_logic;
          redocking_site_3_spcount        :   IN    std_logic;
          redocking_site_4_spcount        :   IN    std_logic;
          count                           :   OUT   std_logic_vector(17 DOWNTO 0);  -- ufix18
          valid                           :   OUT   std_logic
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : synapse_model
    USE ENTITY work.ur_ear_fpga_sim_synapse_model_synapse_model(rtl);

  FOR ALL : spike_generator
    USE ENTITY work.ur_ear_fpga_sim_spike_generator_spike_generator(rtl);

  FOR ALL : accumulator
    USE ENTITY work.ur_ear_fpga_sim_accumulator_accumulator(rtl);

  -- Signals
  SIGNAL synout                           : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Data_Type_Conversion2_out1       : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Data_Type_Conversion3_out1       : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Data_Type_Conversion4_out1       : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Data_Type_Conversion5_out1       : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Data_Type_Conversion6_out1       : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Data_Type_Conversion7_out1       : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Data_Type_Conversion8_out1       : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Data_Type_Conversion9_out1       : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Data_Type_Conversion10_out1      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Data_Type_Conversion11_out1      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Data_Type_Conversion12_out1      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Data_Type_Conversion13_out1      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Spike_Generator_out6             : std_logic;
  SIGNAL Spike_Generator_out7             : std_logic;
  SIGNAL Spike_Generator_out8             : std_logic;
  SIGNAL Spike_Generator_out9             : std_logic;
  SIGNAL Model1_out1                      : std_logic_vector(17 DOWNTO 0);  -- ufix18
  SIGNAL Model1_out2                      : std_logic;
  SIGNAL integration_time_unsigned        : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL integration_time_2               : unsigned(31 DOWNTO 0);  -- uint32

BEGIN
  u_Synapse_Model : synapse_model
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              enb_1_2048_0 => enb_1_2048_0,
              enb_1_2048_1 => enb_1_2048_1,
              pla_nlf_in => Sink_Data,  -- single
              randNum => randNums,  -- single
              syn_out => synout  -- single
              );

  u_Spike_Generator : spike_generator
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_2048_0 => enb_1_2048_0,
              synout => synout,  -- single
              randNum1 => Data_Type_Conversion2_out1,  -- single
              randNum2 => Data_Type_Conversion3_out1,  -- single
              randNum3 => Data_Type_Conversion4_out1,  -- single
              randNum4 => Data_Type_Conversion5_out1,  -- single
              randNum5 => Data_Type_Conversion6_out1,  -- single
              randNum6 => Data_Type_Conversion7_out1,  -- single
              randNum7 => Data_Type_Conversion8_out1,  -- single
              randNum8 => Data_Type_Conversion9_out1,  -- single
              randNum9 => Data_Type_Conversion10_out1,  -- single
              randNum10 => Data_Type_Conversion11_out1,  -- single
              randNum11 => Data_Type_Conversion12_out1,  -- single
              randNum12 => Data_Type_Conversion13_out1,  -- single
              spout_redock_1 => Spike_Generator_out6,
              spout_redock_2 => Spike_Generator_out7,
              spout_redock_3 => Spike_Generator_out8,
              spout_redock_4 => Spike_Generator_out9
              );

  u_Model1 : accumulator
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_2048_0 => enb_1_2048_0,
              register_control_integration_time => std_logic_vector(integration_time_2),  -- uint32
              redocking_site_1_input => Spike_Generator_out6,
              redocking_site_2_spcount => Spike_Generator_out7,
              redocking_site_3_spcount => Spike_Generator_out8,
              redocking_site_4_spcount => Spike_Generator_out9,
              count => Model1_out1,  -- ufix18
              valid => Model1_out2
              );

  integration_time_unsigned <= unsigned(integration_time);

  delayMatch12_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      integration_time_2 <= to_unsigned(0, 32);
    ELSIF rising_edge(clk) THEN
      IF enb_1_2048_0 = '1' THEN
        integration_time_2 <= integration_time_unsigned;
      END IF;
    END IF;
  END PROCESS delayMatch12_process;


  delayMatch_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Data_Type_Conversion2_out1 <= X"00000000";
    ELSIF rising_edge(clk) THEN
      IF enb_1_2048_0 = '1' THEN
        Data_Type_Conversion2_out1 <= randNum1;
      END IF;
    END IF;
  END PROCESS delayMatch_process;


  delayMatch1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Data_Type_Conversion3_out1 <= X"00000000";
    ELSIF rising_edge(clk) THEN
      IF enb_1_2048_0 = '1' THEN
        Data_Type_Conversion3_out1 <= randNum2;
      END IF;
    END IF;
  END PROCESS delayMatch1_process;


  delayMatch2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Data_Type_Conversion4_out1 <= X"00000000";
    ELSIF rising_edge(clk) THEN
      IF enb_1_2048_0 = '1' THEN
        Data_Type_Conversion4_out1 <= randNum3;
      END IF;
    END IF;
  END PROCESS delayMatch2_process;


  delayMatch3_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Data_Type_Conversion5_out1 <= X"00000000";
    ELSIF rising_edge(clk) THEN
      IF enb_1_2048_0 = '1' THEN
        Data_Type_Conversion5_out1 <= randNum4;
      END IF;
    END IF;
  END PROCESS delayMatch3_process;


  delayMatch4_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Data_Type_Conversion6_out1 <= X"00000000";
    ELSIF rising_edge(clk) THEN
      IF enb_1_2048_0 = '1' THEN
        Data_Type_Conversion6_out1 <= randNum5;
      END IF;
    END IF;
  END PROCESS delayMatch4_process;


  delayMatch5_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Data_Type_Conversion7_out1 <= X"00000000";
    ELSIF rising_edge(clk) THEN
      IF enb_1_2048_0 = '1' THEN
        Data_Type_Conversion7_out1 <= randNum6;
      END IF;
    END IF;
  END PROCESS delayMatch5_process;


  delayMatch6_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Data_Type_Conversion8_out1 <= X"00000000";
    ELSIF rising_edge(clk) THEN
      IF enb_1_2048_0 = '1' THEN
        Data_Type_Conversion8_out1 <= randNum7;
      END IF;
    END IF;
  END PROCESS delayMatch6_process;


  delayMatch7_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Data_Type_Conversion9_out1 <= X"00000000";
    ELSIF rising_edge(clk) THEN
      IF enb_1_2048_0 = '1' THEN
        Data_Type_Conversion9_out1 <= randNum8;
      END IF;
    END IF;
  END PROCESS delayMatch7_process;


  delayMatch8_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Data_Type_Conversion10_out1 <= X"00000000";
    ELSIF rising_edge(clk) THEN
      IF enb_1_2048_0 = '1' THEN
        Data_Type_Conversion10_out1 <= randNum9;
      END IF;
    END IF;
  END PROCESS delayMatch8_process;


  delayMatch9_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Data_Type_Conversion11_out1 <= X"00000000";
    ELSIF rising_edge(clk) THEN
      IF enb_1_2048_0 = '1' THEN
        Data_Type_Conversion11_out1 <= randNum10;
      END IF;
    END IF;
  END PROCESS delayMatch9_process;


  delayMatch10_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Data_Type_Conversion12_out1 <= X"00000000";
    ELSIF rising_edge(clk) THEN
      IF enb_1_2048_0 = '1' THEN
        Data_Type_Conversion12_out1 <= randNum11;
      END IF;
    END IF;
  END PROCESS delayMatch10_process;


  delayMatch11_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Data_Type_Conversion13_out1 <= X"00000000";
    ELSIF rising_edge(clk) THEN
      IF enb_1_2048_0 = '1' THEN
        Data_Type_Conversion13_out1 <= randNum12;
      END IF;
    END IF;
  END PROCESS delayMatch11_process;


  spike_valid <= Model1_out2;

  spike_count <= Model1_out1;

END rtl;

