-- -------------------------------------------------------------
-- 
-- File Name: D:\NIH3Repo\simulink_models\models\ur_ear_fpga\hdlsrc\ur_ear_fpga_sim\ur_ear_fpga_sim_UR_EAR_FPGA.vhd
-- 
-- Generated by MATLAB 9.9 and HDL Coder 3.17
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: ur_ear_fpga_sim_UR_EAR_FPGA
-- Source Path: ur_ear_fpga_sim/dataplane/Avalon Data Processing/UR EAR FPGA
-- Hierarchy Level: 2
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY ur_ear_fpga_sim_UR_EAR_FPGA IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        enb_1_2048_0                      :   IN    std_logic;
        enb_1_2048_1                      :   IN    std_logic;
        audio_input                       :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        rand_nums                         :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        integration_time                  :   IN    std_logic_vector(31 DOWNTO 0);  -- uint32
        randNum1                          :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        randNum2                          :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        randNum3                          :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        randNum4                          :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        randNum5                          :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        randNum6                          :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        randNum7                          :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        randNum8                          :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        randNum9                          :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        randNum10                         :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        randNum11                         :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        randNum12                         :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        audio_output                      :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
        spike_count                       :   OUT   std_logic_vector(17 DOWNTO 0);  -- ufix18
        spike_valid                       :   OUT   std_logic
        );
END ur_ear_fpga_sim_UR_EAR_FPGA;


ARCHITECTURE rtl OF ur_ear_fpga_sim_UR_EAR_FPGA IS

  -- Component Declarations
  COMPONENT middle_ear_filter
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb_1_2048_0                    :   IN    std_logic;
          stimulus                        :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          middle_ear_filter_output        :   OUT   std_logic_vector(31 DOWNTO 0)  -- single
          );
  END COMPONENT;

  COMPONENT auditory_nerve
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          enb_1_2048_0                    :   IN    std_logic;
          enb_1_2048_1                    :   IN    std_logic;
          auditory_nerve_in               :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          auditory_nerve_out              :   OUT   std_logic_vector(31 DOWNTO 0)  -- single
          );
  END COMPONENT;

  COMPONENT synapse_spike_generator
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          enb_1_2048_0                    :   IN    std_logic;
          enb_1_2048_1                    :   IN    std_logic;
          Sink_Data                       :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          randNums                        :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          integration_time                :   IN    std_logic_vector(31 DOWNTO 0);  -- uint32
          randNum1                        :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          randNum2                        :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          randNum3                        :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          randNum4                        :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          randNum5                        :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          randNum6                        :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          randNum7                        :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          randNum8                        :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          randNum9                        :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          randNum10                       :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          randNum11                       :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          randNum12                       :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          spike_count                     :   OUT   std_logic_vector(17 DOWNTO 0);  -- ufix18
          spike_valid                     :   OUT   std_logic
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : middle_ear_filter
    USE ENTITY work.ur_ear_fpga_sim_middle_ear_filter_middle_ear_filter(rtl);

  FOR ALL : auditory_nerve
    USE ENTITY work.ur_ear_fpga_sim_auditory_nerve_auditory_nerve(rtl);

  FOR ALL : synapse_spike_generator
    USE ENTITY work.ur_ear_fpga_sim_synapse_spike_generator_synapse_spike_generator(rtl);

  -- Signals
  SIGNAL output                           : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Auditory_Nerve_Model_out1        : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL rand_nums_1                      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL randNum1_1                       : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL randNum2_1                       : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL randNum3_1                       : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL randNum4_1                       : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL randNum5_1                       : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL randNum6_1                       : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL randNum7_1                       : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL randNum8_1                       : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL randNum9_1                       : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL randNum10_1                      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL randNum11_1                      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL randNum12_1                      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Model_out1                       : std_logic_vector(17 DOWNTO 0);  -- ufix18
  SIGNAL Model_out2                       : std_logic;
  SIGNAL integration_time_unsigned        : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL integration_time_2               : unsigned(31 DOWNTO 0);  -- uint32

BEGIN
  u_Middle_Ear_Filter : middle_ear_filter
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_2048_0 => enb_1_2048_0,
              stimulus => audio_input,  -- single
              middle_ear_filter_output => output  -- single
              );

  u_Auditory_Nerve_Model : auditory_nerve
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              enb_1_2048_0 => enb_1_2048_0,
              enb_1_2048_1 => enb_1_2048_1,
              auditory_nerve_in => output,  -- single
              auditory_nerve_out => Auditory_Nerve_Model_out1  -- single
              );

  u_Model : synapse_spike_generator
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              enb_1_2048_0 => enb_1_2048_0,
              enb_1_2048_1 => enb_1_2048_1,
              Sink_Data => Auditory_Nerve_Model_out1,  -- single
              randNums => rand_nums_1,  -- single
              integration_time => std_logic_vector(integration_time_2),  -- uint32
              randNum1 => randNum1_1,  -- single
              randNum2 => randNum2_1,  -- single
              randNum3 => randNum3_1,  -- single
              randNum4 => randNum4_1,  -- single
              randNum5 => randNum5_1,  -- single
              randNum6 => randNum6_1,  -- single
              randNum7 => randNum7_1,  -- single
              randNum8 => randNum8_1,  -- single
              randNum9 => randNum9_1,  -- single
              randNum10 => randNum10_1,  -- single
              randNum11 => randNum11_1,  -- single
              randNum12 => randNum12_1,  -- single
              spike_count => Model_out1,  -- ufix18
              spike_valid => Model_out2
              );

  integration_time_unsigned <= unsigned(integration_time);

  delayMatch_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      rand_nums_1 <= X"00000000";
    ELSIF rising_edge(clk) THEN
      IF enb_1_2048_0 = '1' THEN
        rand_nums_1 <= rand_nums;
      END IF;
    END IF;
  END PROCESS delayMatch_process;


  delayMatch1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      integration_time_2 <= to_unsigned(0, 32);
    ELSIF rising_edge(clk) THEN
      IF enb_1_2048_0 = '1' THEN
        integration_time_2 <= integration_time_unsigned;
      END IF;
    END IF;
  END PROCESS delayMatch1_process;


  delayMatch2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      randNum1_1 <= X"00000000";
    ELSIF rising_edge(clk) THEN
      IF enb_1_2048_0 = '1' THEN
        randNum1_1 <= randNum1;
      END IF;
    END IF;
  END PROCESS delayMatch2_process;


  delayMatch3_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      randNum2_1 <= X"00000000";
    ELSIF rising_edge(clk) THEN
      IF enb_1_2048_0 = '1' THEN
        randNum2_1 <= randNum2;
      END IF;
    END IF;
  END PROCESS delayMatch3_process;


  delayMatch4_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      randNum3_1 <= X"00000000";
    ELSIF rising_edge(clk) THEN
      IF enb_1_2048_0 = '1' THEN
        randNum3_1 <= randNum3;
      END IF;
    END IF;
  END PROCESS delayMatch4_process;


  delayMatch5_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      randNum4_1 <= X"00000000";
    ELSIF rising_edge(clk) THEN
      IF enb_1_2048_0 = '1' THEN
        randNum4_1 <= randNum4;
      END IF;
    END IF;
  END PROCESS delayMatch5_process;


  delayMatch6_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      randNum5_1 <= X"00000000";
    ELSIF rising_edge(clk) THEN
      IF enb_1_2048_0 = '1' THEN
        randNum5_1 <= randNum5;
      END IF;
    END IF;
  END PROCESS delayMatch6_process;


  delayMatch7_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      randNum6_1 <= X"00000000";
    ELSIF rising_edge(clk) THEN
      IF enb_1_2048_0 = '1' THEN
        randNum6_1 <= randNum6;
      END IF;
    END IF;
  END PROCESS delayMatch7_process;


  delayMatch8_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      randNum7_1 <= X"00000000";
    ELSIF rising_edge(clk) THEN
      IF enb_1_2048_0 = '1' THEN
        randNum7_1 <= randNum7;
      END IF;
    END IF;
  END PROCESS delayMatch8_process;


  delayMatch9_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      randNum8_1 <= X"00000000";
    ELSIF rising_edge(clk) THEN
      IF enb_1_2048_0 = '1' THEN
        randNum8_1 <= randNum8;
      END IF;
    END IF;
  END PROCESS delayMatch9_process;


  delayMatch10_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      randNum9_1 <= X"00000000";
    ELSIF rising_edge(clk) THEN
      IF enb_1_2048_0 = '1' THEN
        randNum9_1 <= randNum9;
      END IF;
    END IF;
  END PROCESS delayMatch10_process;


  delayMatch11_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      randNum10_1 <= X"00000000";
    ELSIF rising_edge(clk) THEN
      IF enb_1_2048_0 = '1' THEN
        randNum10_1 <= randNum10;
      END IF;
    END IF;
  END PROCESS delayMatch11_process;


  delayMatch12_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      randNum11_1 <= X"00000000";
    ELSIF rising_edge(clk) THEN
      IF enb_1_2048_0 = '1' THEN
        randNum11_1 <= randNum11;
      END IF;
    END IF;
  END PROCESS delayMatch12_process;


  delayMatch13_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      randNum12_1 <= X"00000000";
    ELSIF rising_edge(clk) THEN
      IF enb_1_2048_0 = '1' THEN
        randNum12_1 <= randNum12;
      END IF;
    END IF;
  END PROCESS delayMatch13_process;


  spike_valid <= Model_out2;

  audio_output <= audio_input;

  spike_count <= Model_out1;

END rtl;

