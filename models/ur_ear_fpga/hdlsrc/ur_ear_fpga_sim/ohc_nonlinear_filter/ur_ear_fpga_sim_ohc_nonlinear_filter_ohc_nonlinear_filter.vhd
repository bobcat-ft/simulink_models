-- -------------------------------------------------------------
-- 
-- File Name: D:\NIH3Repo\simulink_models\models\ur_ear_fpga\hdlsrc\ur_ear_fpga_sim\ohc_nonlinear_filter\ur_ear_fpga_sim_ohc_nonlinear_filter_ohc_nonlinear_filter.vhd
-- 
-- Generated by MATLAB 9.9 and HDL Coder 3.17
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: ur_ear_fpga_sim_ohc_nonlinear_filter_ohc_nonlinear_filter
-- Source Path: ohc_nonlinear_filter
-- Hierarchy Level: 6
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY ur_ear_fpga_sim_ohc_nonlinear_filter_ohc_nonlinear_filter IS
  PORT( ohc_nl_fnc_in                     :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        ohc_nl_fnc_out                    :   OUT   std_logic_vector(31 DOWNTO 0)  -- single
        );
END ur_ear_fpga_sim_ohc_nonlinear_filter_ohc_nonlinear_filter;


ARCHITECTURE rtl OF ur_ear_fpga_sim_ohc_nonlinear_filter_ohc_nonlinear_filter IS

  ATTRIBUTE multstyle : string;

  -- Component Declarations
  COMPONENT ur_ear_fpga_sim_ohc_nonlinear_filter_nfp_abs_single
    PORT( nfp_in                          :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          nfp_out                         :   OUT   std_logic_vector(31 DOWNTO 0)  -- ufix32
          );
  END COMPONENT;

  COMPONENT ur_ear_fpga_sim_ohc_nonlinear_filter_nfp_div_single
    PORT( nfp_in1                         :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          nfp_in2                         :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          nfp_out                         :   OUT   std_logic_vector(31 DOWNTO 0)  -- ufix32
          );
  END COMPONENT;

  COMPONENT ur_ear_fpga_sim_ohc_nonlinear_filter_nfp_uminus_single
    PORT( nfp_in                          :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          nfp_out                         :   OUT   std_logic_vector(31 DOWNTO 0)  -- ufix32
          );
  END COMPONENT;

  COMPONENT ur_ear_fpga_sim_ohc_nonlinear_filter_nfp_exp_single
    PORT( nfp_in                          :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          nfp_out                         :   OUT   std_logic_vector(31 DOWNTO 0)  -- ufix32
          );
  END COMPONENT;

  COMPONENT ur_ear_fpga_sim_ohc_nonlinear_filter_nfp_mul_single
    PORT( nfp_in1                         :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          nfp_in2                         :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          nfp_out                         :   OUT   std_logic_vector(31 DOWNTO 0)  -- ufix32
          );
  END COMPONENT;

  COMPONENT ur_ear_fpga_sim_ohc_nonlinear_filter_nfp_add_single
    PORT( nfp_in1                         :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          nfp_in2                         :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          nfp_out                         :   OUT   std_logic_vector(31 DOWNTO 0)  -- ufix32
          );
  END COMPONENT;

  COMPONENT ur_ear_fpga_sim_ohc_nonlinear_filter_nfp_relop_single_block
    PORT( nfp_in1                         :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          nfp_in2                         :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          nfp_out1                        :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT ur_ear_fpga_sim_ohc_nonlinear_filter_nfp_relop_single
    PORT( nfp_in1                         :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          nfp_in2                         :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          nfp_out1                        :   OUT   std_logic
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : ur_ear_fpga_sim_ohc_nonlinear_filter_nfp_abs_single
    USE ENTITY work.ur_ear_fpga_sim_ohc_nonlinear_filter_nfp_abs_single(rtl);

  FOR ALL : ur_ear_fpga_sim_ohc_nonlinear_filter_nfp_div_single
    USE ENTITY work.ur_ear_fpga_sim_ohc_nonlinear_filter_nfp_div_single(rtl);

  FOR ALL : ur_ear_fpga_sim_ohc_nonlinear_filter_nfp_uminus_single
    USE ENTITY work.ur_ear_fpga_sim_ohc_nonlinear_filter_nfp_uminus_single(rtl);

  FOR ALL : ur_ear_fpga_sim_ohc_nonlinear_filter_nfp_exp_single
    USE ENTITY work.ur_ear_fpga_sim_ohc_nonlinear_filter_nfp_exp_single(rtl);

  FOR ALL : ur_ear_fpga_sim_ohc_nonlinear_filter_nfp_mul_single
    USE ENTITY work.ur_ear_fpga_sim_ohc_nonlinear_filter_nfp_mul_single(rtl);

  FOR ALL : ur_ear_fpga_sim_ohc_nonlinear_filter_nfp_add_single
    USE ENTITY work.ur_ear_fpga_sim_ohc_nonlinear_filter_nfp_add_single(rtl);

  FOR ALL : ur_ear_fpga_sim_ohc_nonlinear_filter_nfp_relop_single_block
    USE ENTITY work.ur_ear_fpga_sim_ohc_nonlinear_filter_nfp_relop_single_block(rtl);

  FOR ALL : ur_ear_fpga_sim_ohc_nonlinear_filter_nfp_relop_single
    USE ENTITY work.ur_ear_fpga_sim_ohc_nonlinear_filter_nfp_relop_single(rtl);

  -- Signals
  SIGNAL x1                               : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Constant15_out1                  : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Constant12_out1                  : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Subtract4_out1                   : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Constant5_out1                   : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Divide1_out1                     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Gain2_out1                       : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Exp_out1                         : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Product3_out1                    : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Add3_out1                        : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Product4_out1                    : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Upperlimit_out                   : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL LowerRelop_out                   : std_logic;
  SIGNAL Lowerlimit_out                   : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL UpperRelop_out                   : std_logic;
  SIGNAL Switch1_out                      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Saturation_out1                  : std_logic_vector(31 DOWNTO 0);  -- ufix32

BEGIN
  -- Ensuring Time Constant Falls within Range
  -- 
  -- Nonlinear Exponential Function

  u_nfp_abs_comp : ur_ear_fpga_sim_ohc_nonlinear_filter_nfp_abs_single
    PORT MAP( nfp_in => ohc_nl_fnc_in,  -- ufix32
              nfp_out => x1  -- ufix32
              );

  u_nfp_div_comp : ur_ear_fpga_sim_ohc_nonlinear_filter_nfp_div_single
    PORT MAP( nfp_in1 => x1,  -- ufix32
              nfp_in2 => Constant5_out1,  -- ufix32
              nfp_out => Divide1_out1  -- ufix32
              );

  u_nfp_uminus_comp : ur_ear_fpga_sim_ohc_nonlinear_filter_nfp_uminus_single
    PORT MAP( nfp_in => Divide1_out1,  -- ufix32
              nfp_out => Gain2_out1  -- ufix32
              );

  u_nfp_exp_comp : ur_ear_fpga_sim_ohc_nonlinear_filter_nfp_exp_single
    PORT MAP( nfp_in => Gain2_out1,  -- ufix32
              nfp_out => Exp_out1  -- ufix32
              );

  u_nfp_mul_comp : ur_ear_fpga_sim_ohc_nonlinear_filter_nfp_mul_single
    PORT MAP( nfp_in1 => Subtract4_out1,  -- ufix32
              nfp_in2 => Exp_out1,  -- ufix32
              nfp_out => Product3_out1  -- ufix32
              );

  u_nfp_add_comp : ur_ear_fpga_sim_ohc_nonlinear_filter_nfp_add_single
    PORT MAP( nfp_in1 => Constant12_out1,  -- ufix32
              nfp_in2 => Product3_out1,  -- ufix32
              nfp_out => Add3_out1  -- ufix32
              );

  u_nfp_mul_comp_1 : ur_ear_fpga_sim_ohc_nonlinear_filter_nfp_mul_single
    PORT MAP( nfp_in1 => Constant15_out1,  -- ufix32
              nfp_in2 => Add3_out1,  -- ufix32
              nfp_out => Product4_out1  -- ufix32
              );

  u_nfp_relop_comp : ur_ear_fpga_sim_ohc_nonlinear_filter_nfp_relop_single_block
    PORT MAP( nfp_in1 => Product4_out1,  -- ufix32
              nfp_in2 => Upperlimit_out,  -- ufix32
              nfp_out1 => LowerRelop_out
              );

  u_nfp_relop_comp_1 : ur_ear_fpga_sim_ohc_nonlinear_filter_nfp_relop_single
    PORT MAP( nfp_in1 => Product4_out1,  -- ufix32
              nfp_in2 => Lowerlimit_out,  -- ufix32
              nfp_out1 => UpperRelop_out
              );

  Constant15_out1 <= X"3b4557bf";

  Constant12_out1 <= X"3d4ccccd";

  Subtract4_out1 <= X"3f733333";

  Constant5_out1 <= X"3e164fe1";

  Upperlimit_out <= X"3b4557bf";

  Lowerlimit_out <= X"39f2ccc5";

  
  Switch1_out <= Product4_out1 WHEN UpperRelop_out = '0' ELSE
      Lowerlimit_out;

  
  Saturation_out1 <= Switch1_out WHEN LowerRelop_out = '0' ELSE
      Upperlimit_out;

  ohc_nl_fnc_out <= Saturation_out1;

END rtl;

