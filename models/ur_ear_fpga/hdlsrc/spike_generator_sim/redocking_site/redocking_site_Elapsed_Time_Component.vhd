-- -------------------------------------------------------------
-- 
-- File Name: hdlsrc\spike_generator_sim\redocking_site\redocking_site_Elapsed_Time_Component.vhd
-- 
-- Generated by MATLAB 9.9 and HDL Coder 3.17
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: redocking_site_Elapsed_Time_Component
-- Source Path: redocking_site/Elapsed Time Component
-- Hierarchy Level: 4
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY redocking_site_Elapsed_Time_Component IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb_1_2048_1                      :   IN    std_logic;
        enb                               :   IN    std_logic;
        enb_1_2048_0                      :   IN    std_logic;
        tdres                             :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        reset_1                           :   IN    std_logic;
        elapsed_time                      :   OUT   std_logic_vector(31 DOWNTO 0)  -- single
        );
END redocking_site_Elapsed_Time_Component;


ARCHITECTURE rtl OF redocking_site_Elapsed_Time_Component IS

  ATTRIBUTE multstyle : string;

  -- Component Declarations
  COMPONENT redocking_site_nfp_convert_fix_10_En0_to_single
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          nfp_in                          :   IN    std_logic_vector(9 DOWNTO 0);  -- ufix10
          nfp_out                         :   OUT   std_logic_vector(31 DOWNTO 0)  -- ufix32
          );
  END COMPONENT;

  COMPONENT redocking_site_nfp_mul_single
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          nfp_in1                         :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          nfp_in2                         :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          nfp_out                         :   OUT   std_logic_vector(31 DOWNTO 0)  -- ufix32
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : redocking_site_nfp_convert_fix_10_En0_to_single
    USE ENTITY work.redocking_site_nfp_convert_fix_10_En0_to_single(rtl);

  FOR ALL : redocking_site_nfp_mul_single
    USE ENTITY work.redocking_site_nfp_mul_single(rtl);

  -- Signals
  SIGNAL Data_Type_Conversion_out1        : std_logic;
  SIGNAL HDL_Counter_out1                 : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL HDL_Counter_out1_1               : std_logic_vector(9 DOWNTO 0);  -- ufix10
  SIGNAL Data_Type_Conversion1_out1       : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Product_out1                     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay_bypass_reg                 : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Product_out1_1                   : std_logic_vector(31 DOWNTO 0);  -- ufix32

BEGIN
  -- Line 583 and 604

  u_redocking_site_Elapsed_Time_Component_nfp_convert_fix_10_En0_to_single : redocking_site_nfp_convert_fix_10_En0_to_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => HDL_Counter_out1_1,  -- ufix10
              nfp_out => Data_Type_Conversion1_out1  -- ufix32
              );

  u_nfp_mul_comp : redocking_site_nfp_mul_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => tdres,  -- ufix32
              nfp_in2 => Data_Type_Conversion1_out1,  -- ufix32
              nfp_out => Product_out1  -- ufix32
              );

  
  Data_Type_Conversion_out1 <= '1' WHEN reset_1 /= '0' ELSE
      '0';

  -- Count limited, Unsigned Counter
  --  initial value   = 0
  --  step value      = 1
  --  count to value  = 1023
  HDL_Counter_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      HDL_Counter_out1 <= to_unsigned(16#000#, 10);
    ELSIF rising_edge(clk) THEN
      IF enb_1_2048_0 = '1' THEN
        IF Data_Type_Conversion_out1 = '1' THEN 
          HDL_Counter_out1 <= to_unsigned(16#000#, 10);
        ELSE 
          HDL_Counter_out1 <= HDL_Counter_out1 + to_unsigned(16#001#, 10);
        END IF;
      END IF;
    END IF;
  END PROCESS HDL_Counter_process;


  HDL_Counter_out1_1 <= std_logic_vector(HDL_Counter_out1);

  Delay_bypass_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay_bypass_reg <= X"00000000";
    ELSIF rising_edge(clk) THEN
      IF enb_1_2048_1 = '1' THEN
        Delay_bypass_reg <= Product_out1;
      END IF;
    END IF;
  END PROCESS Delay_bypass_process;

  
  Product_out1_1 <= Product_out1 WHEN enb_1_2048_1 = '1' ELSE
      Delay_bypass_reg;

  elapsed_time <= Product_out1_1;

END rtl;

