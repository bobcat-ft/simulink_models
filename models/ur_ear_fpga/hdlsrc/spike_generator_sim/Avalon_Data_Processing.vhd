-- -------------------------------------------------------------
-- 
-- File Name: hdlsrc\spike_generator_sim\Avalon_Data_Processing.vhd
-- 
-- Generated by MATLAB 9.9 and HDL Coder 3.17
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: Avalon_Data_Processing
-- Source Path: spike_generator_sim/dataplane/Avalon Data Processing
-- Hierarchy Level: 1
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY Avalon_Data_Processing IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb_1_2048_1                      :   IN    std_logic;
        enb                               :   IN    std_logic;
        enb_1_2048_0                      :   IN    std_logic;
        Sink_Data                         :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        Source_Data                       :   OUT   std_logic_vector(31 DOWNTO 0)  -- single
        );
END Avalon_Data_Processing;


ARCHITECTURE rtl OF Avalon_Data_Processing IS

  -- Component Declarations
  COMPONENT nfp_mul_single
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb_1_2048_0                    :   IN    std_logic;
          nfp_in1                         :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          nfp_in2                         :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          nfp_out                         :   OUT   std_logic_vector(31 DOWNTO 0)  -- single
          );
  END COMPONENT;

  COMPONENT spike_generator
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb_1_2048_1                    :   IN    std_logic;
          enb                             :   IN    std_logic;
          enb_1_2048_0                    :   IN    std_logic;
          synout                          :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          tau_rd                          :   OUT   std_logic_vector(31 DOWNTO 0)  -- single
          );
  END COMPONENT;

  COMPONENT mean_spike_rate
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb_1_2048_1                    :   IN    std_logic;
          enb                             :   IN    std_logic;
          synout                          :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          trd_vector                      :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          meanrate                        :   OUT   std_logic_vector(31 DOWNTO 0)  -- single
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : nfp_mul_single
    USE ENTITY work.nfp_mul_single(rtl);

  FOR ALL : spike_generator
    USE ENTITY work.spike_generator_spike_generator(rtl);

  FOR ALL : mean_spike_rate
    USE ENTITY work.mean_spike_rate_mean_spike_rate(rtl);

  -- Signals
  SIGNAL synout                           : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL trd_vector                       : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL synout_1                         : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL meanrate                         : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL kconst                           : std_logic_vector(31 DOWNTO 0);  -- ufix32

BEGIN
  u_nfp_mul_comp : nfp_mul_single
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_2048_0 => enb_1_2048_0,
              nfp_in1 => kconst,  -- single
              nfp_in2 => Sink_Data,  -- single
              nfp_out => synout_1  -- single
              );

  u_Spike_Generator_Singles : spike_generator
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_2048_1 => enb_1_2048_1,
              enb => enb,
              enb_1_2048_0 => enb_1_2048_0,
              synout => synout,  -- single
              tau_rd => trd_vector  -- single
              );

  u_Calculate_Mean_Spike_Rate : mean_spike_rate
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_2048_1 => enb_1_2048_1,
              enb => enb,
              synout => synout_1,  -- single
              trd_vector => trd_vector,  -- single
              meanrate => meanrate  -- single
              );

  kconst <= X"48435000";

  synout <= synout_1;

  Source_Data <= meanrate;

END rtl;

