-- -------------------------------------------------------------
-- 
-- File Name: hdlsrc\spike_generator_sim\spike_generator\spike_generator_Correct_Redocking_Period.vhd
-- 
-- Generated by MATLAB 9.9 and HDL Coder 3.17
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: spike_generator_Correct_Redocking_Period
-- Source Path: spike_generator/Redocking Calculation/Correct Redocking Period
-- Hierarchy Level: 4
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY spike_generator_Correct_Redocking_Period IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb_1_2048_1                      :   IN    std_logic;
        enb                               :   IN    std_logic;
        enb_1_2048_0                      :   IN    std_logic;
        current_redocking_period          :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        t_rd_decay                        :   IN    std_logic;
        previous_redocking_period         :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
        tau_rd                            :   OUT   std_logic_vector(31 DOWNTO 0)  -- single
        );
END spike_generator_Correct_Redocking_Period;


ARCHITECTURE rtl OF spike_generator_Correct_Redocking_Period IS

  ATTRIBUTE multstyle : string;

  -- Component Declarations
  COMPONENT spike_generator_nfp_sub_single
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          nfp_in1                         :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          nfp_in2                         :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          nfp_out                         :   OUT   std_logic_vector(31 DOWNTO 0)  -- ufix32
          );
  END COMPONENT;

  COMPONENT spike_generator_nfp_mul_single
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          nfp_in1                         :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          nfp_in2                         :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          nfp_out                         :   OUT   std_logic_vector(31 DOWNTO 0)  -- ufix32
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : spike_generator_nfp_sub_single
    USE ENTITY work.spike_generator_nfp_sub_single(rtl);

  FOR ALL : spike_generator_nfp_mul_single
    USE ENTITY work.spike_generator_nfp_mul_single(rtl);

  -- Signals
  SIGNAL Delay2_out1                      : std_logic;
  SIGNAL Delay2_out1_1                    : std_logic;
  SIGNAL Delay2_out1_2                    : std_logic;
  SIGNAL Delay3_out1                      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay3_out1_1                    : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Divide_out1                      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Constant8_out1                   : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay_out1                       : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Subtract1_out1                   : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Product_out1                     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_out1                      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Subtract_out1                    : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_out1_1                    : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay_bypass_reg                 : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay6_out1                      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay5_bypass_reg                : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Switch_out1_2                    : std_logic_vector(31 DOWNTO 0);  -- ufix32

BEGIN
  -- Note: This implementation was simplified since the previous redocking period is updated at every time step.
  -- 
  -- The previous value is always recalculated once the redocking period for any site reaches the elapsed time, but 
  -- it is also recalculated if a correction (i.e. decay) is made
  -- 
  -- Lines 576 and 644
  -- 
  -- Continuously recalculate the redocking period correction.  Note, this assumes that rd_first has already occurred
  -- 
  -- Line 643
  -- 
  -- Line 641

  u_nfp_sub_comp : spike_generator_nfp_sub_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => Delay_out1,  -- ufix32
              nfp_in2 => Constant8_out1,  -- ufix32
              nfp_out => Subtract1_out1  -- ufix32
              );

  u_nfp_mul_comp : spike_generator_nfp_mul_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => Divide_out1,  -- ufix32
              nfp_in2 => Subtract1_out1,  -- ufix32
              nfp_out => Product_out1  -- ufix32
              );

  u_nfp_sub_comp_1 : spike_generator_nfp_sub_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in1 => Delay_out1,  -- ufix32
              nfp_in2 => Product_out1,  -- ufix32
              nfp_out => Subtract_out1  -- ufix32
              );

  Delay2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay2_out1 <= '0';
    ELSIF rising_edge(clk) THEN
      IF enb_1_2048_0 = '1' THEN
        Delay2_out1 <= t_rd_decay;
      END IF;
    END IF;
  END PROCESS Delay2_process;


  Delay2_out1_1 <= Delay2_out1;

  delayMatch_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay2_out1_2 <= '0';
    ELSIF rising_edge(clk) THEN
      IF enb = '1' THEN
        Delay2_out1_2 <= Delay2_out1_1;
      END IF;
    END IF;
  END PROCESS delayMatch_process;


  Delay3_out1 <= current_redocking_period;

  delayMatch1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay3_out1_1 <= X"00000000";
    ELSIF rising_edge(clk) THEN
      IF enb = '1' THEN
        Delay3_out1_1 <= Delay3_out1;
      END IF;
    END IF;
  END PROCESS delayMatch1_process;


  Divide_out1 <= X"39b60b61";

  Constant8_out1 <= X"3c656042";

  Delay_out1 <= Switch_out1;

  
  Switch_out1_1 <= Delay3_out1_1 WHEN Delay2_out1_2 = '0' ELSE
      Subtract_out1;

  Delay_bypass_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay_bypass_reg <= X"00000000";
    ELSIF rising_edge(clk) THEN
      IF enb_1_2048_1 = '1' THEN
        Delay_bypass_reg <= Switch_out1_1;
      END IF;
    END IF;
  END PROCESS Delay_bypass_process;

  
  Switch_out1 <= Switch_out1_1 WHEN enb_1_2048_1 = '1' ELSE
      Delay_bypass_reg;

  Delay6_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay6_out1 <= X"00000000";
    ELSIF rising_edge(clk) THEN
      IF enb_1_2048_0 = '1' THEN
        Delay6_out1 <= Switch_out1;
      END IF;
    END IF;
  END PROCESS Delay6_process;


  Delay5_bypass_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay5_bypass_reg <= X"00000000";
    ELSIF rising_edge(clk) THEN
      IF enb_1_2048_1 = '1' THEN
        Delay5_bypass_reg <= Switch_out1_1;
      END IF;
    END IF;
  END PROCESS Delay5_bypass_process;

  
  Switch_out1_2 <= Switch_out1_1 WHEN enb_1_2048_1 = '1' ELSE
      Delay5_bypass_reg;

  previous_redocking_period <= Delay6_out1;

  tau_rd <= Switch_out1_2;

END rtl;

