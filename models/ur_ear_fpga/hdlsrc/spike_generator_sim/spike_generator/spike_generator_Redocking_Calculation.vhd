-- -------------------------------------------------------------
-- 
-- File Name: hdlsrc\spike_generator_sim\spike_generator\spike_generator_Redocking_Calculation.vhd
-- 
-- Generated by MATLAB 9.9 and HDL Coder 3.17
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: spike_generator_Redocking_Calculation
-- Source Path: spike_generator/Redocking Calculation
-- Hierarchy Level: 3
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY spike_generator_Redocking_Calculation IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb_1_2048_1                      :   IN    std_logic;
        enb                               :   IN    std_logic;
        enb_1_2048_0                      :   IN    std_logic;
        t_rd_jump                         :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        t_rd_init                         :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        site_1_recalculate                :   IN    std_logic;
        site_2_recalculate                :   IN    std_logic;
        site_3_recalculate                :   IN    std_logic;
        site_4_recalculate                :   IN    std_logic;
        tau_rd                            :   OUT   std_logic_vector(31 DOWNTO 0)  -- single
        );
END spike_generator_Redocking_Calculation;


ARCHITECTURE rtl OF spike_generator_Redocking_Calculation IS

  ATTRIBUTE multstyle : string;

  -- Component Declarations
  COMPONENT spike_generator_Current_Redock_Component
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb_1_2048_1                    :   IN    std_logic;
          enb                             :   IN    std_logic;
          enb_1_2048_0                    :   IN    std_logic;
          previous_redocking_period       :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          t_rd_jump                       :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          t_rd_init                       :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          site_1_recalculate              :   IN    std_logic;
          site_2_recalculate              :   IN    std_logic;
          site_3_recalculate              :   IN    std_logic;
          site_4_recalculate              :   IN    std_logic;
          current_redocking_period        :   OUT   std_logic_vector(31 DOWNTO 0)  -- single
          );
  END COMPONENT;

  COMPONENT spike_generator_Correct_Redocking_Period
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb_1_2048_1                    :   IN    std_logic;
          enb                             :   IN    std_logic;
          enb_1_2048_0                    :   IN    std_logic;
          current_redocking_period        :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          t_rd_decay                      :   IN    std_logic;
          previous_redocking_period       :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
          tau_rd                          :   OUT   std_logic_vector(31 DOWNTO 0)  -- single
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : spike_generator_Current_Redock_Component
    USE ENTITY work.spike_generator_Current_Redock_Component(rtl);

  FOR ALL : spike_generator_Correct_Redocking_Period
    USE ENTITY work.spike_generator_Correct_Redocking_Period(rtl);

  -- Signals
  SIGNAL OR_out1                          : std_logic;
  SIGNAL Constant1_out1                   : std_logic;
  SIGNAL Constant_out1                    : signed(7 DOWNTO 0);  -- int8
  SIGNAL Equal_relop1                     : std_logic;
  SIGNAL NOT1_out1                        : std_logic;
  SIGNAL HDL_Counter_out1                 : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Equal_1_cast                     : signed(8 DOWNTO 0);  -- sfix9
  SIGNAL AND1_out1                        : std_logic;
  SIGNAL NOT_out1                         : std_logic;
  SIGNAL Delay_out1                       : std_logic;
  SIGNAL Correct_Redocking_Period_out1    : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Current_Redock_Component_out1    : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Correct_Redocking_Period_out2    : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay1_out1                      : std_logic_vector(31 DOWNTO 0);  -- ufix32

BEGIN
  -- When a redocking event occurred, correct the value
  -- 
  -- Ensure a decay doesn't occur within the first few clock cycles

  u_Current_Redock_Component : spike_generator_Current_Redock_Component
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_2048_1 => enb_1_2048_1,
              enb => enb,
              enb_1_2048_0 => enb_1_2048_0,
              previous_redocking_period => Correct_Redocking_Period_out1,  -- single
              t_rd_jump => t_rd_jump,  -- single
              t_rd_init => t_rd_init,  -- single
              site_1_recalculate => site_1_recalculate,
              site_2_recalculate => site_2_recalculate,
              site_3_recalculate => site_3_recalculate,
              site_4_recalculate => site_4_recalculate,
              current_redocking_period => Current_Redock_Component_out1  -- single
              );

  u_Correct_Redocking_Period : spike_generator_Correct_Redocking_Period
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_2048_1 => enb_1_2048_1,
              enb => enb,
              enb_1_2048_0 => enb_1_2048_0,
              current_redocking_period => Current_Redock_Component_out1,  -- single
              t_rd_decay => Delay_out1,
              previous_redocking_period => Correct_Redocking_Period_out1,  -- single
              tau_rd => Correct_Redocking_Period_out2  -- single
              );

  OR_out1 <= site_1_recalculate OR (site_2_recalculate OR (site_4_recalculate OR site_3_recalculate));

  Constant1_out1 <= '0';

  Constant_out1 <= to_signed(16#03#, 8);

  NOT1_out1 <=  NOT Equal_relop1;

  -- Count limited, Unsigned Counter
  --  initial value   = 0
  --  step value      = 1
  --  count to value  = 3
  HDL_Counter_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      HDL_Counter_out1 <= to_unsigned(16#00#, 8);
    ELSIF rising_edge(clk) THEN
      IF enb_1_2048_0 = '1' THEN
        IF Constant1_out1 = '1' THEN 
          HDL_Counter_out1 <= to_unsigned(16#00#, 8);
        ELSIF NOT1_out1 = '1' THEN 
          IF HDL_Counter_out1 >= to_unsigned(16#03#, 8) THEN 
            HDL_Counter_out1 <= to_unsigned(16#00#, 8);
          ELSE 
            HDL_Counter_out1 <= HDL_Counter_out1 + to_unsigned(16#01#, 8);
          END IF;
        END IF;
      END IF;
    END IF;
  END PROCESS HDL_Counter_process;


  Equal_1_cast <= signed(resize(HDL_Counter_out1, 9));
  
  Equal_relop1 <= '1' WHEN Equal_1_cast = resize(Constant_out1, 9) ELSE
      '0';

  AND1_out1 <= OR_out1 AND Equal_relop1;

  NOT_out1 <=  NOT AND1_out1;

  Delay_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay_out1 <= '0';
    ELSIF rising_edge(clk) THEN
      IF enb_1_2048_0 = '1' THEN
        Delay_out1 <= NOT_out1;
      END IF;
    END IF;
  END PROCESS Delay_process;


  Delay1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay1_out1 <= X"00000000";
    ELSIF rising_edge(clk) THEN
      IF enb_1_2048_0 = '1' THEN
        Delay1_out1 <= Correct_Redocking_Period_out2;
      END IF;
    END IF;
  END PROCESS Delay1_process;


  tau_rd <= Delay1_out1;

END rtl;

