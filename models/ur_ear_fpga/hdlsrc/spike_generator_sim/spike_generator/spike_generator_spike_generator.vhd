-- -------------------------------------------------------------
-- 
-- File Name: hdlsrc\spike_generator_sim\spike_generator\spike_generator_spike_generator.vhd
-- 
-- Generated by MATLAB 9.9 and HDL Coder 3.17
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: spike_generator_spike_generator
-- Source Path: spike_generator
-- Hierarchy Level: 2
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY spike_generator_spike_generator IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb_1_2048_1                      :   IN    std_logic;
        enb                               :   IN    std_logic;
        enb_1_2048_0                      :   IN    std_logic;
        synout                            :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        tau_rd                            :   OUT   std_logic_vector(31 DOWNTO 0)  -- single
        );
END spike_generator_spike_generator;


ARCHITECTURE rtl OF spike_generator_spike_generator IS

  ATTRIBUTE multstyle : string;

  -- Component Declarations
  COMPONENT pseudo_random_lut
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb_1_2048_1                    :   IN    std_logic;
          enb                             :   IN    std_logic;
          enb_1_2048_0                    :   IN    std_logic;
          Out1                            :   OUT   std_logic_vector(31 DOWNTO 0)  -- single
          );
  END COMPONENT;

  COMPONENT redocking_site
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb_1_2048_1                    :   IN    std_logic;
          enb                             :   IN    std_logic;
          enb_1_2048_0                    :   IN    std_logic;
          synout                          :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          uriRandNum                      :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          redockRandNum                   :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          TrefRandNum                     :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          t_rel                           :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          tabs                            :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          nSites                          :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          tdres                           :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          t_rd_init                       :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          tau_rd                          :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          spout                           :   OUT   std_logic;
          sptime                          :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
          recalculate_redocking           :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT spike_generator_Redocking_Calculation
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb_1_2048_1                    :   IN    std_logic;
          enb                             :   IN    std_logic;
          enb_1_2048_0                    :   IN    std_logic;
          t_rd_jump                       :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          t_rd_init                       :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          site_1_recalculate              :   IN    std_logic;
          site_2_recalculate              :   IN    std_logic;
          site_3_recalculate              :   IN    std_logic;
          site_4_recalculate              :   IN    std_logic;
          tau_rd                          :   OUT   std_logic_vector(31 DOWNTO 0)  -- single
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : pseudo_random_lut
    USE ENTITY work.pseudo_random_lut_pseudo_random_lut(rtl);

  FOR ALL : redocking_site
    USE ENTITY work.redocking_site_redocking_site(rtl);

  FOR ALL : spike_generator_Redocking_Calculation
    USE ENTITY work.spike_generator_Redocking_Calculation(rtl);

  -- Signals
  SIGNAL Pseudo_Random_LUT_out1           : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Pseudo_Random_LUT_out1_1         : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Pseudo_Random_LUT_out1_2         : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Pseudo_Random_LUT_out1_3         : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Constant_out1                    : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Constant1_out1                   : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Constant2_out1                   : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Constant4_out1                   : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL From44_out1                      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Redocking_Calculation_out1       : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Redocking_Site_4_out1            : std_logic;
  SIGNAL Redocking_Site_4_out2            : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Redocking_Site_4_out3            : std_logic;
  SIGNAL Pseudo_Random_LUT_out1_4         : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Pseudo_Random_LUT_out1_5         : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Pseudo_Random_LUT_out1_6         : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL From33_out1                      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Redocking_Site_3_out1            : std_logic;
  SIGNAL Redocking_Site_3_out2            : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Redocking_Site_3_out3            : std_logic;
  SIGNAL Pseudo_Random_LUT_out1_7         : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Pseudo_Random_LUT_out1_8         : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Pseudo_Random_LUT_out1_9         : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL From22_out1                      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Redocking_Site_2_out1            : std_logic;
  SIGNAL Redocking_Site_2_out2            : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Redocking_Site_2_out3            : std_logic;
  SIGNAL Pseudo_Random_LUT_out1_10        : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Pseudo_Random_LUT_out1_11        : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL From8_out1                       : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Redocking_Site_1_out1            : std_logic;
  SIGNAL Redocking_Site_1_out2            : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Redocking_Site_1_out3            : std_logic;
  SIGNAL Constant3_out1                   : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Constant5_out1                   : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Redocking_Site_1_bypass_reg      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Redocking_Site_2_bypass_reg      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Redocking_Site_3_bypass_reg      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Redocking_Site_4_bypass_reg      : std_logic_vector(31 DOWNTO 0);  -- ufix32

BEGIN
  -- For simplicity, a LUT can be used to feed random numbers to the redocking sites.  This should be changed in future 
  -- designes to be a an input (or inputs) from a different uniform random source. 
  -- 
  -- Since the redocking sites do not fire within the first 12 clock cycles, we can ignore the initial conditions of 
  -- the delay block

  u_Pseudo_Random_LUT : pseudo_random_lut
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_2048_1 => enb_1_2048_1,
              enb => enb,
              enb_1_2048_0 => enb_1_2048_0,
              Out1 => Pseudo_Random_LUT_out1  -- single
              );

  u_Redocking_Site_41 : redocking_site
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_2048_1 => enb_1_2048_1,
              enb => enb,
              enb_1_2048_0 => enb_1_2048_0,
              synout => synout,  -- single
              uriRandNum => Pseudo_Random_LUT_out1_1,  -- single
              redockRandNum => Pseudo_Random_LUT_out1_2,  -- single
              TrefRandNum => Pseudo_Random_LUT_out1_3,  -- single
              t_rel => Constant_out1,  -- single
              tabs => Constant1_out1,  -- single
              nSites => Constant2_out1,  -- single
              tdres => Constant4_out1,  -- single
              t_rd_init => From44_out1,  -- single
              tau_rd => Redocking_Calculation_out1,  -- single
              spout => Redocking_Site_4_out1,
              sptime => Redocking_Site_4_out2,  -- single
              recalculate_redocking => Redocking_Site_4_out3
              );

  u_Redocking_Site_31 : redocking_site
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_2048_1 => enb_1_2048_1,
              enb => enb,
              enb_1_2048_0 => enb_1_2048_0,
              synout => synout,  -- single
              uriRandNum => Pseudo_Random_LUT_out1_4,  -- single
              redockRandNum => Pseudo_Random_LUT_out1_5,  -- single
              TrefRandNum => Pseudo_Random_LUT_out1_6,  -- single
              t_rel => Constant_out1,  -- single
              tabs => Constant1_out1,  -- single
              nSites => Constant2_out1,  -- single
              tdres => Constant4_out1,  -- single
              t_rd_init => From33_out1,  -- single
              tau_rd => Redocking_Calculation_out1,  -- single
              spout => Redocking_Site_3_out1,
              sptime => Redocking_Site_3_out2,  -- single
              recalculate_redocking => Redocking_Site_3_out3
              );

  u_Redocking_Site_21 : redocking_site
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_2048_1 => enb_1_2048_1,
              enb => enb,
              enb_1_2048_0 => enb_1_2048_0,
              synout => synout,  -- single
              uriRandNum => Pseudo_Random_LUT_out1_7,  -- single
              redockRandNum => Pseudo_Random_LUT_out1_8,  -- single
              TrefRandNum => Pseudo_Random_LUT_out1_9,  -- single
              t_rel => Constant_out1,  -- single
              tabs => Constant1_out1,  -- single
              nSites => Constant2_out1,  -- single
              tdres => Constant4_out1,  -- single
              t_rd_init => From22_out1,  -- single
              tau_rd => Redocking_Calculation_out1,  -- single
              spout => Redocking_Site_2_out1,
              sptime => Redocking_Site_2_out2,  -- single
              recalculate_redocking => Redocking_Site_2_out3
              );

  u_Redocking_Site_11 : redocking_site
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_2048_1 => enb_1_2048_1,
              enb => enb,
              enb_1_2048_0 => enb_1_2048_0,
              synout => synout,  -- single
              uriRandNum => Pseudo_Random_LUT_out1,  -- single
              redockRandNum => Pseudo_Random_LUT_out1_10,  -- single
              TrefRandNum => Pseudo_Random_LUT_out1_11,  -- single
              t_rel => Constant_out1,  -- single
              tabs => Constant1_out1,  -- single
              nSites => Constant2_out1,  -- single
              tdres => Constant4_out1,  -- single
              t_rd_init => From8_out1,  -- single
              tau_rd => Redocking_Calculation_out1,  -- single
              spout => Redocking_Site_1_out1,
              sptime => Redocking_Site_1_out2,  -- single
              recalculate_redocking => Redocking_Site_1_out3
              );

  u_Redocking_Calculation : spike_generator_Redocking_Calculation
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_2048_1 => enb_1_2048_1,
              enb => enb,
              enb_1_2048_0 => enb_1_2048_0,
              t_rd_jump => Constant3_out1,  -- single
              t_rd_init => Constant5_out1,  -- single
              site_1_recalculate => Redocking_Site_1_out3,
              site_2_recalculate => Redocking_Site_2_out3,
              site_3_recalculate => Redocking_Site_3_out3,
              site_4_recalculate => Redocking_Site_4_out3,
              tau_rd => Redocking_Calculation_out1  -- single
              );

  Constant3_out1 <= X"39d1b717";

  Constant5_out1 <= X"3c7f9724";

  reduced_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Pseudo_Random_LUT_out1_10 <= X"00000000";
    ELSIF rising_edge(clk) THEN
      IF enb_1_2048_0 = '1' THEN
        Pseudo_Random_LUT_out1_10 <= Pseudo_Random_LUT_out1;
      END IF;
    END IF;
  END PROCESS reduced_process;


  reduced_1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Pseudo_Random_LUT_out1_11 <= X"00000000";
    ELSIF rising_edge(clk) THEN
      IF enb_1_2048_0 = '1' THEN
        Pseudo_Random_LUT_out1_11 <= Pseudo_Random_LUT_out1_10;
      END IF;
    END IF;
  END PROCESS reduced_1_process;


  Constant_out1 <= X"3c23d70a";

  Constant1_out1 <= X"3c23d70a";

  Constant2_out1 <= X"40800000";

  Constant4_out1 <= X"37aec33e";

  Redocking_Site_1_bypass_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Redocking_Site_1_bypass_reg <= X"00000000";
    ELSIF rising_edge(clk) THEN
      IF enb_1_2048_1 = '1' THEN
        Redocking_Site_1_bypass_reg <= Constant5_out1;
      END IF;
    END IF;
  END PROCESS Redocking_Site_1_bypass_process;

  
  From8_out1 <= Constant5_out1 WHEN enb_1_2048_1 = '1' ELSE
      Redocking_Site_1_bypass_reg;

  reduced_2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Pseudo_Random_LUT_out1_7 <= X"00000000";
    ELSIF rising_edge(clk) THEN
      IF enb_1_2048_0 = '1' THEN
        Pseudo_Random_LUT_out1_7 <= Pseudo_Random_LUT_out1_11;
      END IF;
    END IF;
  END PROCESS reduced_2_process;


  reduced_3_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Pseudo_Random_LUT_out1_8 <= X"00000000";
    ELSIF rising_edge(clk) THEN
      IF enb_1_2048_0 = '1' THEN
        Pseudo_Random_LUT_out1_8 <= Pseudo_Random_LUT_out1_7;
      END IF;
    END IF;
  END PROCESS reduced_3_process;


  reduced_4_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Pseudo_Random_LUT_out1_9 <= X"00000000";
    ELSIF rising_edge(clk) THEN
      IF enb_1_2048_0 = '1' THEN
        Pseudo_Random_LUT_out1_9 <= Pseudo_Random_LUT_out1_8;
      END IF;
    END IF;
  END PROCESS reduced_4_process;


  Redocking_Site_2_bypass_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Redocking_Site_2_bypass_reg <= X"00000000";
    ELSIF rising_edge(clk) THEN
      IF enb_1_2048_1 = '1' THEN
        Redocking_Site_2_bypass_reg <= Constant5_out1;
      END IF;
    END IF;
  END PROCESS Redocking_Site_2_bypass_process;

  
  From22_out1 <= Constant5_out1 WHEN enb_1_2048_1 = '1' ELSE
      Redocking_Site_2_bypass_reg;

  reduced_5_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Pseudo_Random_LUT_out1_4 <= X"00000000";
    ELSIF rising_edge(clk) THEN
      IF enb_1_2048_0 = '1' THEN
        Pseudo_Random_LUT_out1_4 <= Pseudo_Random_LUT_out1_9;
      END IF;
    END IF;
  END PROCESS reduced_5_process;


  reduced_6_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Pseudo_Random_LUT_out1_5 <= X"00000000";
    ELSIF rising_edge(clk) THEN
      IF enb_1_2048_0 = '1' THEN
        Pseudo_Random_LUT_out1_5 <= Pseudo_Random_LUT_out1_4;
      END IF;
    END IF;
  END PROCESS reduced_6_process;


  reduced_7_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Pseudo_Random_LUT_out1_6 <= X"00000000";
    ELSIF rising_edge(clk) THEN
      IF enb_1_2048_0 = '1' THEN
        Pseudo_Random_LUT_out1_6 <= Pseudo_Random_LUT_out1_5;
      END IF;
    END IF;
  END PROCESS reduced_7_process;


  Redocking_Site_3_bypass_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Redocking_Site_3_bypass_reg <= X"00000000";
    ELSIF rising_edge(clk) THEN
      IF enb_1_2048_1 = '1' THEN
        Redocking_Site_3_bypass_reg <= Constant5_out1;
      END IF;
    END IF;
  END PROCESS Redocking_Site_3_bypass_process;

  
  From33_out1 <= Constant5_out1 WHEN enb_1_2048_1 = '1' ELSE
      Redocking_Site_3_bypass_reg;

  reduced_8_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Pseudo_Random_LUT_out1_1 <= X"00000000";
    ELSIF rising_edge(clk) THEN
      IF enb_1_2048_0 = '1' THEN
        Pseudo_Random_LUT_out1_1 <= Pseudo_Random_LUT_out1_6;
      END IF;
    END IF;
  END PROCESS reduced_8_process;


  reduced_9_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Pseudo_Random_LUT_out1_2 <= X"00000000";
    ELSIF rising_edge(clk) THEN
      IF enb_1_2048_0 = '1' THEN
        Pseudo_Random_LUT_out1_2 <= Pseudo_Random_LUT_out1_1;
      END IF;
    END IF;
  END PROCESS reduced_9_process;


  reduced_10_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Pseudo_Random_LUT_out1_3 <= X"00000000";
    ELSIF rising_edge(clk) THEN
      IF enb_1_2048_0 = '1' THEN
        Pseudo_Random_LUT_out1_3 <= Pseudo_Random_LUT_out1_2;
      END IF;
    END IF;
  END PROCESS reduced_10_process;


  Redocking_Site_4_bypass_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Redocking_Site_4_bypass_reg <= X"00000000";
    ELSIF rising_edge(clk) THEN
      IF enb_1_2048_1 = '1' THEN
        Redocking_Site_4_bypass_reg <= Constant5_out1;
      END IF;
    END IF;
  END PROCESS Redocking_Site_4_bypass_process;

  
  From44_out1 <= Constant5_out1 WHEN enb_1_2048_1 = '1' ELSE
      Redocking_Site_4_bypass_reg;

  tau_rd <= Redocking_Calculation_out1;

END rtl;

