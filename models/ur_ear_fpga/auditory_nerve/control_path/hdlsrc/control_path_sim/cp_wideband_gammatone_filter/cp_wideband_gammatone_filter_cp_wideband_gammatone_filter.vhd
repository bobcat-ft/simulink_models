-- -------------------------------------------------------------
-- 
-- File Name: hdlsrc\control_path_sim\cp_wideband_gammatone_filter\cp_wideband_gammatone_filter_cp_wideband_gammatone_filter.vhd
-- 
-- Generated by MATLAB 9.9 and HDL Coder 3.17
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: cp_wideband_gammatone_filter_cp_wideband_gammatone_filter
-- Source Path: cp_wideband_gammatone_filter
-- Hierarchy Level: 3
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY cp_wideband_gammatone_filter_cp_wideband_gammatone_filter IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb_1_1024_0                      :   IN    std_logic;
        enb                               :   IN    std_logic;
        enb_1_1024_1                      :   IN    std_logic;
        wbgain                            :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        tauwb                             :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        cp_wbgt_in                        :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        cp_wbgt_out                       :   OUT   std_logic_vector(31 DOWNTO 0)  -- single
        );
END cp_wideband_gammatone_filter_cp_wideband_gammatone_filter;


ARCHITECTURE rtl OF cp_wideband_gammatone_filter_cp_wideband_gammatone_filter IS

  ATTRIBUTE multstyle : string;

  -- Component Declarations
  COMPONENT cp_wideband_gammatone_filter_nfp_sub_single_block
    PORT( nfp_in1                         :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          nfp_in2                         :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          nfp_out                         :   OUT   std_logic_vector(31 DOWNTO 0)  -- ufix32
          );
  END COMPONENT;

  COMPONENT cp_wideband_gammatone_filter_nfp_relop_single_block
    PORT( nfp_in1                         :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          nfp_in2                         :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          nfp_out1                        :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT cp_wideband_gammatone_filter_nfp_add_single_block
    PORT( nfp_in1                         :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          nfp_in2                         :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          nfp_out                         :   OUT   std_logic_vector(31 DOWNTO 0)  -- ufix32
          );
  END COMPONENT;

  COMPONENT cp_wideband_gammatone_filter_nfp_sincos_single_block
    PORT( nfp_in                          :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          nfp_out1                        :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
          nfp_out2                        :   OUT   std_logic_vector(31 DOWNTO 0)  -- ufix32
          );
  END COMPONENT;

  COMPONENT cp_wideband_gammatone_filter_nfp_mul_single_block
    PORT( nfp_in1                         :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          nfp_in2                         :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          nfp_out                         :   OUT   std_logic_vector(31 DOWNTO 0)  -- ufix32
          );
  END COMPONENT;

  COMPONENT cp_wideband_gammatone_filter_Third_Order_IIR_Filter
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb_1_1024_0                    :   IN    std_logic;
          enb                             :   IN    std_logic;
          enb_1_1024_1                    :   IN    std_logic;
          Signal_In_re                    :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          Signal_In_im                    :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          wbgain                          :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          tauwb                           :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          Signal_Out_re                   :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
          Signal_Out_im                   :   OUT   std_logic_vector(31 DOWNTO 0)  -- single
          );
  END COMPONENT;

  COMPONENT cp_wideband_gammatone_filter_nfp_uminus_single
    PORT( nfp_in                          :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          nfp_out                         :   OUT   std_logic_vector(31 DOWNTO 0)  -- ufix32
          );
  END COMPONENT;

  COMPONENT cp_wideband_gammatone_filter_nfp_sincos_single
    PORT( nfp_in                          :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          nfp_out1                        :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
          nfp_out2                        :   OUT   std_logic_vector(31 DOWNTO 0)  -- ufix32
          );
  END COMPONENT;

  COMPONENT cp_wideband_gammatone_filter_nfp_mul_single
    PORT( nfp_in1                         :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          nfp_in2                         :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          nfp_out                         :   OUT   std_logic_vector(31 DOWNTO 0)  -- ufix32
          );
  END COMPONENT;

  COMPONENT cp_wideband_gammatone_filter_nfp_sub_single
    PORT( nfp_in1                         :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          nfp_in2                         :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          nfp_out                         :   OUT   std_logic_vector(31 DOWNTO 0)  -- ufix32
          );
  END COMPONENT;

  COMPONENT cp_wideband_gammatone_filter_Calculate_wbout
    PORT( In1                             :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          tauwb                           :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          output1                         :   OUT   std_logic_vector(31 DOWNTO 0)  -- single
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : cp_wideband_gammatone_filter_nfp_sub_single_block
    USE ENTITY work.cp_wideband_gammatone_filter_nfp_sub_single_block(rtl);

  FOR ALL : cp_wideband_gammatone_filter_nfp_relop_single_block
    USE ENTITY work.cp_wideband_gammatone_filter_nfp_relop_single_block(rtl);

  FOR ALL : cp_wideband_gammatone_filter_nfp_add_single_block
    USE ENTITY work.cp_wideband_gammatone_filter_nfp_add_single_block(rtl);

  FOR ALL : cp_wideband_gammatone_filter_nfp_sincos_single_block
    USE ENTITY work.cp_wideband_gammatone_filter_nfp_sincos_single_block(rtl);

  FOR ALL : cp_wideband_gammatone_filter_nfp_mul_single_block
    USE ENTITY work.cp_wideband_gammatone_filter_nfp_mul_single_block(rtl);

  FOR ALL : cp_wideband_gammatone_filter_Third_Order_IIR_Filter
    USE ENTITY work.cp_wideband_gammatone_filter_Third_Order_IIR_Filter(rtl);

  FOR ALL : cp_wideband_gammatone_filter_nfp_uminus_single
    USE ENTITY work.cp_wideband_gammatone_filter_nfp_uminus_single(rtl);

  FOR ALL : cp_wideband_gammatone_filter_nfp_sincos_single
    USE ENTITY work.cp_wideband_gammatone_filter_nfp_sincos_single(rtl);

  FOR ALL : cp_wideband_gammatone_filter_nfp_mul_single
    USE ENTITY work.cp_wideband_gammatone_filter_nfp_mul_single(rtl);

  FOR ALL : cp_wideband_gammatone_filter_nfp_sub_single
    USE ENTITY work.cp_wideband_gammatone_filter_nfp_sub_single(rtl);

  FOR ALL : cp_wideband_gammatone_filter_Calculate_wbout
    USE ENTITY work.cp_wideband_gammatone_filter_Calculate_wbout(rtl);

  -- Signals
  SIGNAL wbphase                          : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Subtract_out1                    : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Pi_out1                          : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Sum_out1                         : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Subtract1_out1                   : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL LTE_out1                         : std_logic;
  SIGNAL Switch_out1                      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Sum_out1_1                       : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL sin                              : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL cos                              : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay3_out1                      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Product_Re                       : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Product_Im                       : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL output_re                        : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL output_im                        : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Gain_out1                        : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL sin_1                            : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL cos_1                            : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Product1_C2ReIm_2_C2ReIm_A       : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Product1_Re_AC                   : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Product1_C2ReIm_2_C2ReIm_B       : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Product1_Re_BD                   : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL mulOutput                        : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL wbout1                           : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay1_out1                      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay1_out1_1                    : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL wbout                            : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL t_bypass_reg                     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL wbout_1                          : std_logic_vector(31 DOWNTO 0);  -- ufix32

BEGIN
  -- Calculate Wideband Output
  -- 
  -- Inputs: Wideband Filter Output (wbout1)
  -- 		Wideband Time Constant Feedback 				(tauwb)
  -- 
  -- Output: Wideband Output  (wbout)
  -- 
  -- - A few simple calculations to get the wideband output
  -- 
  -- Control Path Wideband Gammatone Filter
  -- 
  -- Inputs: Phase-Shifted ME Filter Output
  -- 		Wideband Gain Feedback (wbgain)
  -- 		Wideband Time Constant Feedback 				(tauwb)
  -- 
  -- Output: Wideband Gammatone Filtered Signal 			 (wbout1)
  -- 
  -- - 3rd Order Wideband Gammatone IIR Filter
  -- 
  -- - Coefficients are determined in the subsystem and depend on gain and time constant feedback
  -- 
  -- - Implemented w/ Direct Form I Block Structure
  -- 
  -- Adding delta_phase to itself after each iteration
  -- 
  -- Note: Number of CORDIC iterations given by variable cordiciterationswb which is declared in the initialization 
  -- scrip
  -- 
  -- Passing Real Part and Terminating Imaginary Part
  -- 
  -- Delays added for HDL pipelining

  u_nfp_sub_comp : cp_wideband_gammatone_filter_nfp_sub_single_block
    PORT MAP( nfp_in1 => Sum_out1,  -- ufix32
              nfp_in2 => Pi_out1,  -- ufix32
              nfp_out => Subtract1_out1  -- ufix32
              );

  u_nfp_relop_comp : cp_wideband_gammatone_filter_nfp_relop_single_block
    PORT MAP( nfp_in1 => Sum_out1,  -- ufix32
              nfp_in2 => Subtract_out1,  -- ufix32
              nfp_out1 => LTE_out1
              );

  u_nfp_add_comp : cp_wideband_gammatone_filter_nfp_add_single_block
    PORT MAP( nfp_in1 => wbphase,  -- ufix32
              nfp_in2 => Switch_out1,  -- ufix32
              nfp_out => Sum_out1_1  -- ufix32
              );

  u_nfp_sincos_comp : cp_wideband_gammatone_filter_nfp_sincos_single_block
    PORT MAP( nfp_in => Sum_out1,  -- ufix32
              nfp_out1 => sin,  -- ufix32
              nfp_out2 => cos  -- ufix32
              );

  u_nfp_mul_comp : cp_wideband_gammatone_filter_nfp_mul_single_block
    PORT MAP( nfp_in1 => cos,  -- ufix32
              nfp_in2 => Delay3_out1,  -- ufix32
              nfp_out => Product_Re  -- ufix32
              );

  u_nfp_mul_comp_1 : cp_wideband_gammatone_filter_nfp_mul_single_block
    PORT MAP( nfp_in1 => sin,  -- ufix32
              nfp_in2 => Delay3_out1,  -- ufix32
              nfp_out => Product_Im  -- ufix32
              );

  u_Third_Order_IIR_Filter : cp_wideband_gammatone_filter_Third_Order_IIR_Filter
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_1024_0 => enb_1_1024_0,
              enb => enb,
              enb_1_1024_1 => enb_1_1024_1,
              Signal_In_re => Product_Re,  -- single
              Signal_In_im => Product_Im,  -- single
              wbgain => wbgain,  -- single
              tauwb => tauwb,  -- single
              Signal_Out_re => output_re,  -- single
              Signal_Out_im => output_im  -- single
              );

  u_nfp_uminus_comp : cp_wideband_gammatone_filter_nfp_uminus_single
    PORT MAP( nfp_in => Sum_out1,  -- ufix32
              nfp_out => Gain_out1  -- ufix32
              );

  u_nfp_sincos_comp_1 : cp_wideband_gammatone_filter_nfp_sincos_single
    PORT MAP( nfp_in => Gain_out1,  -- ufix32
              nfp_out1 => sin_1,  -- ufix32
              nfp_out2 => cos_1  -- ufix32
              );

  u_nfp_mul_comp_2 : cp_wideband_gammatone_filter_nfp_mul_single
    PORT MAP( nfp_in1 => output_re,  -- ufix32
              nfp_in2 => Product1_C2ReIm_2_C2ReIm_A,  -- ufix32
              nfp_out => Product1_Re_AC  -- ufix32
              );

  u_nfp_mul_comp_3 : cp_wideband_gammatone_filter_nfp_mul_single
    PORT MAP( nfp_in1 => output_im,  -- ufix32
              nfp_in2 => Product1_C2ReIm_2_C2ReIm_B,  -- ufix32
              nfp_out => Product1_Re_BD  -- ufix32
              );

  u_nfp_sub_comp_1 : cp_wideband_gammatone_filter_nfp_sub_single
    PORT MAP( nfp_in1 => Product1_Re_AC,  -- ufix32
              nfp_in2 => Product1_Re_BD,  -- ufix32
              nfp_out => mulOutput  -- ufix32
              );

  u_Calculate_wbout : cp_wideband_gammatone_filter_Calculate_wbout
    PORT MAP( In1 => wbout1,  -- single
              tauwb => Delay1_out1_1,  -- single
              output1 => wbout  -- single
              );

  wbphase <= X"be2235a1";

  Subtract_out1 <= X"c0c3fe2e";

  Pi_out1 <= X"c0c90fdb";

  
  Switch_out1 <= Sum_out1 WHEN LTE_out1 = '0' ELSE
      Subtract1_out1;

  reduced_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Sum_out1 <= X"00000000";
    ELSIF rising_edge(clk) THEN
      IF enb_1_1024_0 = '1' THEN
        Sum_out1 <= Sum_out1_1;
      END IF;
    END IF;
  END PROCESS reduced_process;


  Delay3_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay3_out1 <= X"00000000";
    ELSIF rising_edge(clk) THEN
      IF enb_1_1024_0 = '1' THEN
        Delay3_out1 <= cp_wbgt_in;
      END IF;
    END IF;
  END PROCESS Delay3_process;


  reduced_1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Product1_C2ReIm_2_C2ReIm_A <= X"00000000";
    ELSIF rising_edge(clk) THEN
      IF enb = '1' THEN
        Product1_C2ReIm_2_C2ReIm_A <= cos_1;
      END IF;
    END IF;
  END PROCESS reduced_1_process;


  reduced_2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Product1_C2ReIm_2_C2ReIm_B <= X"00000000";
    ELSIF rising_edge(clk) THEN
      IF enb = '1' THEN
        Product1_C2ReIm_2_C2ReIm_B <= sin_1;
      END IF;
    END IF;
  END PROCESS reduced_2_process;


  wbout1 <= mulOutput;

  Delay1_out1 <= tauwb;

  delayMatch4_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay1_out1_1 <= X"00000000";
    ELSIF rising_edge(clk) THEN
      IF enb = '1' THEN
        Delay1_out1_1 <= Delay1_out1;
      END IF;
    END IF;
  END PROCESS delayMatch4_process;


  t_bypass_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      t_bypass_reg <= X"00000000";
    ELSIF rising_edge(clk) THEN
      IF enb_1_1024_1 = '1' THEN
        t_bypass_reg <= wbout;
      END IF;
    END IF;
  END PROCESS t_bypass_process;

  
  wbout_1 <= wbout WHEN enb_1_1024_1 = '1' ELSE
      t_bypass_reg;

  cp_wbgt_out <= wbout_1;

END rtl;

