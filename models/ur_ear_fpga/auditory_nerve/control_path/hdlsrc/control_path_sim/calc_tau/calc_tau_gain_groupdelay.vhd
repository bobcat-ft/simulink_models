-- -------------------------------------------------------------
-- 
-- File Name: hdlsrc\control_path_sim\calc_tau\calc_tau_gain_groupdelay.vhd
-- 
-- Generated by MATLAB 9.9 and HDL Coder 3.17
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: calc_tau_gain_groupdelay
-- Source Path: calc_tau/gain_groupdelay
-- Hierarchy Level: 4
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY calc_tau_gain_groupdelay IS
  PORT( tdres                             :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        centerfreq                        :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        cf                                :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        tau                               :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        wb_gain                           :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
        grdelay                           :   OUT   std_logic_vector(31 DOWNTO 0)  -- single
        );
END calc_tau_gain_groupdelay;


ARCHITECTURE rtl OF calc_tau_gain_groupdelay IS

  -- Component Declarations
  COMPONENT calc_tau_nfp_gain_pow2_single
    PORT( nfp_in1                         :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          nfp_in2                         :   IN    std_logic;  -- ufix1
          nfp_in3                         :   IN    std_logic_vector(8 DOWNTO 0);  -- ufix9
          nfp_out                         :   OUT   std_logic_vector(31 DOWNTO 0)  -- ufix32
          );
  END COMPONENT;

  COMPONENT calc_tau_nfp_div_single
    PORT( nfp_in1                         :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          nfp_in2                         :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          nfp_out                         :   OUT   std_logic_vector(31 DOWNTO 0)  -- ufix32
          );
  END COMPONENT;

  COMPONENT calc_tau_nfp_sub_single
    PORT( nfp_in1                         :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          nfp_in2                         :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          nfp_out                         :   OUT   std_logic_vector(31 DOWNTO 0)  -- ufix32
          );
  END COMPONENT;

  COMPONENT calc_tau_nfp_add_single
    PORT( nfp_in1                         :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          nfp_in2                         :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          nfp_out                         :   OUT   std_logic_vector(31 DOWNTO 0)  -- ufix32
          );
  END COMPONENT;

  COMPONENT calc_tau_nfp_mul_single
    PORT( nfp_in1                         :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          nfp_in2                         :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          nfp_out                         :   OUT   std_logic_vector(31 DOWNTO 0)  -- ufix32
          );
  END COMPONENT;

  COMPONENT calc_tau_nfp_cos_single
    PORT( nfp_in                          :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          nfp_out                         :   OUT   std_logic_vector(31 DOWNTO 0)  -- ufix32
          );
  END COMPONENT;

  COMPONENT calc_tau_nfp_sqrt_single
    PORT( nfp_in                          :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          nfp_out                         :   OUT   std_logic_vector(31 DOWNTO 0)  -- ufix32
          );
  END COMPONENT;

  COMPONENT calc_tau_nfp_floor_single
    PORT( nfp_in                          :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          nfp_out                         :   OUT   std_logic_vector(31 DOWNTO 0)  -- ufix32
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : calc_tau_nfp_gain_pow2_single
    USE ENTITY work.calc_tau_nfp_gain_pow2_single(rtl);

  FOR ALL : calc_tau_nfp_div_single
    USE ENTITY work.calc_tau_nfp_div_single(rtl);

  FOR ALL : calc_tau_nfp_sub_single
    USE ENTITY work.calc_tau_nfp_sub_single(rtl);

  FOR ALL : calc_tau_nfp_add_single
    USE ENTITY work.calc_tau_nfp_add_single(rtl);

  FOR ALL : calc_tau_nfp_mul_single
    USE ENTITY work.calc_tau_nfp_mul_single(rtl);

  FOR ALL : calc_tau_nfp_cos_single
    USE ENTITY work.calc_tau_nfp_cos_single(rtl);

  FOR ALL : calc_tau_nfp_sqrt_single
    USE ENTITY work.calc_tau_nfp_sqrt_single(rtl);

  FOR ALL : calc_tau_nfp_floor_single
    USE ENTITY work.calc_tau_nfp_floor_single(rtl);

  -- Signals
  SIGNAL Constant6_out1                   : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL pw2_sign_const                   : std_logic;  -- ufix1
  SIGNAL pw2_shift_const                  : signed(8 DOWNTO 0);  -- sfix9
  SIGNAL dtmp2_out_1                      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL dtmp2_out1                       : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Constant2_out1                   : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Subtract1_out1                   : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Sum_out1                         : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL c1LP_out1                        : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL c1LP_c1_LP_out1                  : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL tmp1_op_stage2                   : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Constant_out1                    : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Subtract_out1                    : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Product_out_1                    : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Product_out1                     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL tmpcos_out1                      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL c1LP_tmpcos_out1                 : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL pw2_sign_const_1                 : std_logic;  -- ufix1
  SIGNAL pw2_shift_const_1                : signed(8 DOWNTO 0);  -- sfix9
  SIGNAL Product2_out1                    : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL tmp1_out1                        : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Constant4_out1                   : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Sum1_out1                        : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL pw2_sign_const_2                 : std_logic;  -- ufix1
  SIGNAL pw2_shift_const_2                : signed(8 DOWNTO 0);  -- sfix9
  SIGNAL tmp2_out_1                       : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL c2LP_out1                        : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL tmp2_out_2                       : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL tmp2_out1                        : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Divide_out1                      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Sqrt_out1                        : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Constant7_out1                   : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Subtract2_out1                   : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Divide1_out1                     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Subtract3_out1                   : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Floor_out1                       : std_logic_vector(31 DOWNTO 0);  -- ufix32

BEGIN
  -- mul #1
  u_nfp_gain_pow2_single : calc_tau_nfp_gain_pow2_single
    PORT MAP( nfp_in1 => tau,  -- ufix32
              nfp_in2 => pw2_sign_const,  -- ufix1
              nfp_in3 => std_logic_vector(pw2_shift_const),  -- ufix9
              nfp_out => dtmp2_out_1  -- ufix32
              );

  -- mul #2
  u_nfp_div_comp : calc_tau_nfp_div_single
    PORT MAP( nfp_in1 => dtmp2_out_1,  -- ufix32
              nfp_in2 => tdres,  -- ufix32
              nfp_out => dtmp2_out1  -- ufix32
              );

  u_nfp_sub_comp : calc_tau_nfp_sub_single
    PORT MAP( nfp_in1 => dtmp2_out1,  -- ufix32
              nfp_in2 => Constant2_out1,  -- ufix32
              nfp_out => Subtract1_out1  -- ufix32
              );

  u_nfp_add_comp : calc_tau_nfp_add_single
    PORT MAP( nfp_in1 => dtmp2_out1,  -- ufix32
              nfp_in2 => Constant2_out1,  -- ufix32
              nfp_out => Sum_out1  -- ufix32
              );

  u_nfp_div_comp_1 : calc_tau_nfp_div_single
    PORT MAP( nfp_in1 => Subtract1_out1,  -- ufix32
              nfp_in2 => Sum_out1,  -- ufix32
              nfp_out => c1LP_out1  -- ufix32
              );

  u_nfp_mul_comp : calc_tau_nfp_mul_single
    PORT MAP( nfp_in1 => c1LP_out1,  -- ufix32
              nfp_in2 => c1LP_out1,  -- ufix32
              nfp_out => c1LP_c1_LP_out1  -- ufix32
              );

  u_nfp_add_comp_1 : calc_tau_nfp_add_single
    PORT MAP( nfp_in1 => Constant6_out1,  -- ufix32
              nfp_in2 => c1LP_c1_LP_out1,  -- ufix32
              nfp_out => tmp1_op_stage2  -- ufix32
              );

  u_nfp_sub_comp_1 : calc_tau_nfp_sub_single
    PORT MAP( nfp_in1 => centerfreq,  -- ufix32
              nfp_in2 => cf,  -- ufix32
              nfp_out => Subtract_out1  -- ufix32
              );

  -- mul #1
  u_nfp_mul_comp_1 : calc_tau_nfp_mul_single
    PORT MAP( nfp_in1 => Constant_out1,  -- ufix32
              nfp_in2 => Subtract_out1,  -- ufix32
              nfp_out => Product_out_1  -- ufix32
              );

  -- mul #2
  u_nfp_mul_comp_2 : calc_tau_nfp_mul_single
    PORT MAP( nfp_in1 => Product_out_1,  -- ufix32
              nfp_in2 => tdres,  -- ufix32
              nfp_out => Product_out1  -- ufix32
              );

  u_nfp_cos_comp : calc_tau_nfp_cos_single
    PORT MAP( nfp_in => Product_out1,  -- ufix32
              nfp_out => tmpcos_out1  -- ufix32
              );

  u_nfp_mul_comp_3 : calc_tau_nfp_mul_single
    PORT MAP( nfp_in1 => c1LP_out1,  -- ufix32
              nfp_in2 => tmpcos_out1,  -- ufix32
              nfp_out => c1LP_tmpcos_out1  -- ufix32
              );

  u_nfp_gain_pow2_single_1 : calc_tau_nfp_gain_pow2_single
    PORT MAP( nfp_in1 => c1LP_tmpcos_out1,  -- ufix32
              nfp_in2 => pw2_sign_const_1,  -- ufix1
              nfp_in3 => std_logic_vector(pw2_shift_const_1),  -- ufix9
              nfp_out => Product2_out1  -- ufix32
              );

  u_nfp_sub_comp_2 : calc_tau_nfp_sub_single
    PORT MAP( nfp_in1 => tmp1_op_stage2,  -- ufix32
              nfp_in2 => Product2_out1,  -- ufix32
              nfp_out => tmp1_out1  -- ufix32
              );

  u_nfp_add_comp_2 : calc_tau_nfp_add_single
    PORT MAP( nfp_in1 => tmpcos_out1,  -- ufix32
              nfp_in2 => Constant4_out1,  -- ufix32
              nfp_out => Sum1_out1  -- ufix32
              );

  -- mul #1
  u_nfp_gain_pow2_single_2 : calc_tau_nfp_gain_pow2_single
    PORT MAP( nfp_in1 => Sum1_out1,  -- ufix32
              nfp_in2 => pw2_sign_const_2,  -- ufix1
              nfp_in3 => std_logic_vector(pw2_shift_const_2),  -- ufix9
              nfp_out => tmp2_out_1  -- ufix32
              );

  u_nfp_div_comp_2 : calc_tau_nfp_div_single
    PORT MAP( nfp_in1 => Constant2_out1,  -- ufix32
              nfp_in2 => Sum_out1,  -- ufix32
              nfp_out => c2LP_out1  -- ufix32
              );

  -- mul #2
  u_nfp_mul_comp_4 : calc_tau_nfp_mul_single
    PORT MAP( nfp_in1 => tmp2_out_1,  -- ufix32
              nfp_in2 => c2LP_out1,  -- ufix32
              nfp_out => tmp2_out_2  -- ufix32
              );

  -- mul #3
  u_nfp_mul_comp_5 : calc_tau_nfp_mul_single
    PORT MAP( nfp_in1 => tmp2_out_2,  -- ufix32
              nfp_in2 => c2LP_out1,  -- ufix32
              nfp_out => tmp2_out1  -- ufix32
              );

  u_nfp_div_comp_3 : calc_tau_nfp_div_single
    PORT MAP( nfp_in1 => tmp1_out1,  -- ufix32
              nfp_in2 => tmp2_out1,  -- ufix32
              nfp_out => Divide_out1  -- ufix32
              );

  u_nfp_sqrt_comp : calc_tau_nfp_sqrt_single
    PORT MAP( nfp_in => Divide_out1,  -- ufix32
              nfp_out => Sqrt_out1  -- ufix32
              );

  u_nfp_sub_comp_3 : calc_tau_nfp_sub_single
    PORT MAP( nfp_in1 => c1LP_c1_LP_out1,  -- ufix32
              nfp_in2 => c1LP_tmpcos_out1,  -- ufix32
              nfp_out => Subtract2_out1  -- ufix32
              );

  u_nfp_div_comp_4 : calc_tau_nfp_div_single
    PORT MAP( nfp_in1 => Subtract2_out1,  -- ufix32
              nfp_in2 => tmp1_out1,  -- ufix32
              nfp_out => Divide1_out1  -- ufix32
              );

  u_nfp_sub_comp_4 : calc_tau_nfp_sub_single
    PORT MAP( nfp_in1 => Constant7_out1,  -- ufix32
              nfp_in2 => Divide1_out1,  -- ufix32
              nfp_out => Subtract3_out1  -- ufix32
              );

  u_nfp_floor_comp : calc_tau_nfp_floor_single
    PORT MAP( nfp_in => Subtract3_out1,  -- ufix32
              nfp_out => Floor_out1  -- ufix32
              );

  Constant6_out1 <= X"3f800000";

  pw2_sign_const <= '0';

  pw2_shift_const <= to_signed(16#001#, 9);

  Constant2_out1 <= X"3f800000";

  Constant_out1 <= X"40c90fdb";

  pw2_sign_const_1 <= '0';

  pw2_shift_const_1 <= to_signed(16#001#, 9);

  Constant4_out1 <= X"3f800000";

  pw2_sign_const_2 <= '0';

  pw2_shift_const_2 <= to_signed(16#001#, 9);

  Constant7_out1 <= X"3f000000";

  wb_gain <= Sqrt_out1;

  grdelay <= Floor_out1;

END rtl;

