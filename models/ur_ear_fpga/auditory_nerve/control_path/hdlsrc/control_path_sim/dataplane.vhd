-- -------------------------------------------------------------
-- 
-- File Name: hdlsrc\control_path_sim\dataplane.vhd
-- 
-- Generated by MATLAB 9.9 and HDL Coder 3.17
-- 
-- 
-- -------------------------------------------------------------
-- Rate and Clocking Details
-- -------------------------------------------------------------
-- Model base rate: 2.03451e-08
-- Target subsystem base rate: 2.03451e-08
-- Explicit user oversample request: 1024x
-- 
-- 
-- Clock Enable  Sample Time
-- -------------------------------------------------------------
-- ce_out        2.08333e-05
-- -------------------------------------------------------------
-- 
-- 
-- Output Signal                 Clock Enable  Sample Time
-- -------------------------------------------------------------
-- avalon_source_valid           ce_out        2.08333e-05
-- avalon_source_data            ce_out        2.08333e-05
-- avalon_source_channel         ce_out        2.08333e-05
-- avalon_source_error           ce_out        2.08333e-05
-- -------------------------------------------------------------
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: dataplane
-- Source Path: control_path_sim/dataplane
-- Hierarchy Level: 0
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.dataplane_pkg.ALL;

ENTITY dataplane IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        clk_enable                        :   IN    std_logic;
        avalon_sink_valid                 :   IN    std_logic;
        avalon_sink_data                  :   IN    std_logic_vector(31 DOWNTO 0);  -- sfix32_En28
        avalon_sink_channel               :   IN    std_logic;  -- ufix1
        avalon_sink_error                 :   IN    std_logic_vector(1 DOWNTO 0);  -- ufix2
        register_control_enable           :   IN    std_logic;  -- ufix1
        ce_out                            :   OUT   std_logic;
        avalon_source_valid               :   OUT   std_logic;
        avalon_source_data                :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
        avalon_source_channel             :   OUT   std_logic;  -- ufix1
        avalon_source_error               :   OUT   std_logic_vector(1 DOWNTO 0)  -- ufix2
        );
END dataplane;


ARCHITECTURE rtl OF dataplane IS

  -- Component Declarations
  COMPONENT dataplane_tc
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          clk_enable                      :   IN    std_logic;
          enb                             :   OUT   std_logic;
          enb_1_1024_0                    :   OUT   std_logic;
          enb_1_1024_1                    :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT Avalon_Data_Processing
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb_1_1024_0                    :   IN    std_logic;
          enb                             :   IN    std_logic;
          enb_1_1024_1                    :   IN    std_logic;
          Sink_Data                       :   IN    std_logic_vector(31 DOWNTO 0);  -- sfix32_En28
          Source_Data                     :   OUT   std_logic_vector(31 DOWNTO 0)  -- single
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : dataplane_tc
    USE ENTITY work.dataplane_tc(rtl);

  FOR ALL : Avalon_Data_Processing
    USE ENTITY work.Avalon_Data_Processing(rtl);

  -- Signals
  SIGNAL enb_1_1024_0                     : std_logic;
  SIGNAL enb                              : std_logic;
  SIGNAL enb_1_1024_1                     : std_logic;
  SIGNAL delayMatch_reg                   : std_logic_vector(0 TO 5);  -- ufix1 [6]
  SIGNAL delayMatch_reg_next              : std_logic_vector(0 TO 5);  -- ufix1 [6]
  SIGNAL avalon_sink_valid_1              : std_logic;
  SIGNAL Avalon_Data_Processing_out1      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL delayMatch1_reg                  : std_logic_vector(0 TO 5);  -- ufix1 [6]
  SIGNAL delayMatch1_reg_next             : std_logic_vector(0 TO 5);  -- ufix1 [6]
  SIGNAL avalon_sink_channel_1            : std_logic;  -- ufix1
  SIGNAL avalon_sink_error_unsigned       : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL delayMatch2_reg                  : vector_of_unsigned2(0 TO 5);  -- ufix2 [6]
  SIGNAL delayMatch2_reg_next             : vector_of_unsigned2(0 TO 5);  -- ufix2 [6]
  SIGNAL avalon_sink_error_1              : unsigned(1 DOWNTO 0);  -- ufix2

BEGIN
  -- The Avalon Data Processing Block
  -- performs DSP on the left and right channels.

  u_dataplane_tc : dataplane_tc
    PORT MAP( clk => clk,
              reset => reset,
              clk_enable => clk_enable,
              enb => enb,
              enb_1_1024_0 => enb_1_1024_0,
              enb_1_1024_1 => enb_1_1024_1
              );

  u_Avalon_Data_Processing : Avalon_Data_Processing
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_1024_0 => enb_1_1024_0,
              enb => enb,
              enb_1_1024_1 => enb_1_1024_1,
              Sink_Data => avalon_sink_data,  -- sfix32_En28
              Source_Data => Avalon_Data_Processing_out1  -- single
              );

  delayMatch_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch_reg(0) <= '0';
      delayMatch_reg(1) <= '0';
      delayMatch_reg(2) <= '0';
      delayMatch_reg(3) <= '0';
      delayMatch_reg(4) <= '0';
      delayMatch_reg(5) <= '0';
    ELSIF rising_edge(clk) THEN
      IF enb_1_1024_0 = '1' THEN
        delayMatch_reg(0) <= delayMatch_reg_next(0);
        delayMatch_reg(1) <= delayMatch_reg_next(1);
        delayMatch_reg(2) <= delayMatch_reg_next(2);
        delayMatch_reg(3) <= delayMatch_reg_next(3);
        delayMatch_reg(4) <= delayMatch_reg_next(4);
        delayMatch_reg(5) <= delayMatch_reg_next(5);
      END IF;
    END IF;
  END PROCESS delayMatch_process;

  avalon_sink_valid_1 <= delayMatch_reg(5);
  delayMatch_reg_next(0) <= avalon_sink_valid;
  delayMatch_reg_next(1) <= delayMatch_reg(0);
  delayMatch_reg_next(2) <= delayMatch_reg(1);
  delayMatch_reg_next(3) <= delayMatch_reg(2);
  delayMatch_reg_next(4) <= delayMatch_reg(3);
  delayMatch_reg_next(5) <= delayMatch_reg(4);

  avalon_source_valid <= avalon_sink_valid_1;

  delayMatch1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch1_reg(0) <= '0';
      delayMatch1_reg(1) <= '0';
      delayMatch1_reg(2) <= '0';
      delayMatch1_reg(3) <= '0';
      delayMatch1_reg(4) <= '0';
      delayMatch1_reg(5) <= '0';
    ELSIF rising_edge(clk) THEN
      IF enb_1_1024_0 = '1' THEN
        delayMatch1_reg(0) <= delayMatch1_reg_next(0);
        delayMatch1_reg(1) <= delayMatch1_reg_next(1);
        delayMatch1_reg(2) <= delayMatch1_reg_next(2);
        delayMatch1_reg(3) <= delayMatch1_reg_next(3);
        delayMatch1_reg(4) <= delayMatch1_reg_next(4);
        delayMatch1_reg(5) <= delayMatch1_reg_next(5);
      END IF;
    END IF;
  END PROCESS delayMatch1_process;

  avalon_sink_channel_1 <= delayMatch1_reg(5);
  delayMatch1_reg_next(0) <= avalon_sink_channel;
  delayMatch1_reg_next(1) <= delayMatch1_reg(0);
  delayMatch1_reg_next(2) <= delayMatch1_reg(1);
  delayMatch1_reg_next(3) <= delayMatch1_reg(2);
  delayMatch1_reg_next(4) <= delayMatch1_reg(3);
  delayMatch1_reg_next(5) <= delayMatch1_reg(4);

  avalon_source_channel <= avalon_sink_channel_1;

  avalon_sink_error_unsigned <= unsigned(avalon_sink_error);

  delayMatch2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch2_reg(0) <= to_unsigned(16#0#, 2);
      delayMatch2_reg(1) <= to_unsigned(16#0#, 2);
      delayMatch2_reg(2) <= to_unsigned(16#0#, 2);
      delayMatch2_reg(3) <= to_unsigned(16#0#, 2);
      delayMatch2_reg(4) <= to_unsigned(16#0#, 2);
      delayMatch2_reg(5) <= to_unsigned(16#0#, 2);
    ELSIF rising_edge(clk) THEN
      IF enb_1_1024_0 = '1' THEN
        delayMatch2_reg(0) <= delayMatch2_reg_next(0);
        delayMatch2_reg(1) <= delayMatch2_reg_next(1);
        delayMatch2_reg(2) <= delayMatch2_reg_next(2);
        delayMatch2_reg(3) <= delayMatch2_reg_next(3);
        delayMatch2_reg(4) <= delayMatch2_reg_next(4);
        delayMatch2_reg(5) <= delayMatch2_reg_next(5);
      END IF;
    END IF;
  END PROCESS delayMatch2_process;

  avalon_sink_error_1 <= delayMatch2_reg(5);
  delayMatch2_reg_next(0) <= avalon_sink_error_unsigned;
  delayMatch2_reg_next(1) <= delayMatch2_reg(0);
  delayMatch2_reg_next(2) <= delayMatch2_reg(1);
  delayMatch2_reg_next(3) <= delayMatch2_reg(2);
  delayMatch2_reg_next(4) <= delayMatch2_reg(3);
  delayMatch2_reg_next(5) <= delayMatch2_reg(4);

  avalon_source_error <= std_logic_vector(avalon_sink_error_1);

  ce_out <= enb_1_1024_1;

  avalon_source_data <= Avalon_Data_Processing_out1;

END rtl;

