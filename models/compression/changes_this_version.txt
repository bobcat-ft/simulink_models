June 25th, 2019, E. Bailey Galacci
	A fully functional Simulink model is now included for 5 band dynamic compression.
	Some rules for attack/release times were changed, as well as compression ratios and thresholds to simplify the model. Testing was done to ensure effective 
		HDL implementation, and all exponential/nth root calculations were done in preprocessing through user defined prescription parameters. This data is sent 
		into a lookup table for each band, and while this initialization is happening, output is set to 0 to avoid any transient response of the filters or unfinished table data.
	Next steps are to continue testing and optimize latency, and potentially include linear interpolation for the lookup tables, although this may not be necessary based on current tests.
	Testing, verification, and error analysis will begin after a fully documented list of changes to the functionality and matlab scripts before simulink implementation.

June 2019, E. Bailey Galacci
	Modified all used files other than MultiChanAidSim (the top level) to be treated as functions. This allows for a more streamlined transition to hardware.
	Modified [AidSettingsXChans.m] to generate filter settings for ANY input number of channels (NChans). This was done through geometric spacing of the 
		center frequencies, spreading out around 2kHz. There is a limit to lower center frequency (cf) at 100Hz and highest cf at 10kHz, soft capping cfs between 500 and 8000 Hz.
	Replaced all non-hardware compatible functions. This includes created a new user-defined function [nextpower2.m], effectively identical to nextpow2()
	Included a commented version of channel attack/release time configurations (generalized) for fast-acting envelope response. The plan is to utilize these configurations
		when speech is detected, or through SNR aware decision making, allowing for compressed speech to be more easily recognized. 
		According to a study on Signal-to-Noise-Ratio-Aware Dynamic Range Compression in Hearing Aids [https://www.ncbi.nlm.nih.gov/pmc/articles/PMC6100123/]
			noisy speech comprehension is better under slow-acting compression while high SNR speech is more recognizable under fast-acting compression.
	SNR-aware decision making is the next goal in this code, and may be implemented using Simulink HDL compatible blocks rather than straight MATLAB code.
	
	A Simulink model is included. Currently there is no application of the recombining gain, and there is no way to change the number of band-pass channels without significantly 
		changing the model. Instead, there are 5 channels (this may be upgraded to 10 or 22, the only cost being space allocated).
	The Simulink model will soon be translated into HDL-compatible blocks, and demo'd on an FPGA for high speed processing and minimal latency.
	Current functionality is nearly identical to the re-factored MATLAB codes, which in turn are nearly identical to the 2016 version, the largest change being a switch to
		generalized configuration settings with AidSettingsXChans.
	

Apr 2016  Fix became more complicated. 
	(a) design of channel FIR filters tightened up so that at high channel numbers (N > 10) the 'Q' of the filters increased with increasing frequeency, partly imitating the human cochlea, but also to reduce the overlap between filters.   This arose from 2 problems: (i) the ERB of the filters overlapped when using many channels, effectively double-counting power in the compressor channel and (ii) when recombining the channels, the repeated overlap increased the output power, ie non-unity gain across system.
	(b) replace eandh2008_band_levels calculator and replace with : new code mostly contained in [CalibrateFilterBankOverlap.m]


Due to the need to be hearing-aid realistic, the delay through the FIRs has been kept to a max of 7.5 msec at low freqs, and less at higher.  Hence high-Nchans implementations have several channels at low feqs (< 700 Hz), which means that the filter is not as tight as ideal.  Also, [Nchan_FbankDesign.m] needed to check that the peak response of the designed BP filter reached 0 dB.

Calibration procedure involves running the bpfs on a 5-sec sample of EandH2008 LTASS noise, and measuring, via the Welch psd, the band powers.

Quite a few plots & text appear on screen: these can be switched off, mostly, by setting the "diagnostic" flags at the top of MultiChanAidSim to 0. 
eg lines 13 & 14 :
DIAGNOSTIC = 1;  %% flag to give more information as simulation proceeds such as comments & plots
CALIB_DIAGNOSTIC =  1; %% flag to give more information about calibration of filterbank due to overlap between filters: Mar 2016




Mar 2016. With high channel numbers, the overlap between filters means that the
	recombination suffers with > 0 dB gain.  Therefore insert a calibration
	facility to compensate.  Agreed with BCJM that this would go in with 
	filter coefficients.
	Split Nchan_FbankAid.m into 2 parts: (a) generation of filterbank and (b) running
	of aid.
	Also, move bits of code from [recalculate] to [update_channel_params] so that all
	calibration constants (such as the equiv0dB channel levels) occur in the same place.

Based on this email from Marina SC............

Below is a table where the differences in output (expressed in dB) between the unprocessed tone and the tone processed with each hearing aid are shown. The differences varied with the number of channels in the hearing aid and with frequency too. I should mention that 10 kHz, where differences are greater, is outside the bandwidth of the hearing aid (the upper edge of the hearing-aid bandwidth is 9.92 kHz).

Freq (kHz) 	3ch 	6ch 	12ch 	22ch
0.125 	-0.23 	-0.24 	-0.17 	0.89
0.25 	-0.01 	-0.01 	0.41 	2.20
0.5 	-0.01 	0.00 	0.46 	2.40
1 	0.00 	0.00 	0.48 	2.43
2 	-0.01 	0.00 	0.47 	2.43
3 	-0.01 	-0.01 	0.47 	2.45
4 	-0.01 	-0.01 	0.51 	2.41
6 	-0.01 	-0.01 	0.42 	2.33
8 	-0.06 	-0.82 	-1.02 	0.75
10 	-6.60 	-5.32 	-3.65 	-2.72

We were not expecting to find differences between input and output, or these to vary with number of channels. It would be helpful to hear your insights in this matter. I am very grateful in advance for your time and help.

Best wishes,
................................................





Nov 2015.  [dualchannel_AGC.m] updated to remove over-activity of channel limiters when CR
	very low, typically < 1.14.  Also attack and release times defined by ANSI S3.22
	(2003), for 35 dB step change in input levels, and different settling gains for 
	attack or release (after discussion with BCJM).
&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
June 2015. [MultiChanAidSim]  All references to GUI have been erased for this version.
&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&

This is a filterbank-based multi-channel hearing aid simulator,  implemented by an FIR filterbank, not overlap-add FFTs.

Most instructions for use of software are in detailed comments in the files.

Before processing:
------------------
The aid is presumed to process a frequency span from 100 Hz to 11 kHz, or 0.9*Fnyq/2, whichever is the least.  (see line [UPPER_FREQ_LIM = min(11e3, 0.9*Fs/2);] in main script).  In order to be more realistic, the filterbank is implemented with small-size FIRs, ca 6-msec half-width, so the steepness of the filter edges is deliberately a bit limited.  The transition filter-edge widths are scaled to be approximately symmetric on a logarithmic scale.  Cross-over is at the -6 dB points (linear phase& time-aligned), and sidelobe ripple is < -60 dB.  The hearing aid simulator returns the array [bpfs] which contains the coefficients of the band-pass filters used.  The first element of each vector is the length of the filter, Ntaps, follwoed by the coeffcients in index positions (2:1+Ntaps).

Desired insertion gain [insrt_gns], contains IG65, speech, referenced to LTASS of Moore et al EarHear2008 paper) and is specified near top of main script:  [MultiChanAidSim] on frequency grid [insrt_frqs]. This grid is the same as that specified by CAM2HF.  This gain is applied BEFORE compression.

For each miulti-channel aid to be simulated, user has to create a file [AidSettingsXChans] with X equal to one of [1, 3, 5, 8, 12, 16, 22] as per BCJM request of Apr 2015.  See supplied master copy version of this file (with X instead of an integer).  In this file, arrays are specified to define channel centre frequencies, channel compression characteristics for both the main channel AGC, as well as a channel limiter. The alignment delay, between the gain control signal and the audio is also specified in this file(currently set to 2.5 msec).

The main compressor in each channel is a simple single exponent attack & release.  Each channel also has a channel limiter operating to catch undesirable peaks.  Because it is so fast-acting, it will introduce distortion, so its use is not intended to be common, just a peak catcher.  This channel limiter normally tracks at a user-specified level above the mean channel level, but can be set so high that it is never activated.  By default its CR=100, a true limiter.  This parameter is not directly changeable in the software by a typical user.  Compression thresholds for the main compressor are expressed as relative to the channel level expected when carrying 65 dB SPL LTASS

As a form of calibration, a sample of this LTASS noise can be generated by a call to the function : [eh2008_nse = gen_eh2008_speech_noise(durn, fs);] where [durn] is the duration rquired in secs and [fs] is the samplerate.  NB this signal has an RMS of unity, so will clip on replay through audio DACs.  After suitable scaling, this can then be played out via wavplay, audioplayer or sound in MATLAB.  

Running the script
------------------
When running the main script one gets asked for number of channels to be simulated, and then a dialogue box offers the chance to load a wav file.  This can be mono, stereo (2-chan) or multi-chan. However, 2-chan wavfiles get treated slightly differently from multi-chan.  More later.

When a wav file is read, it may have any digital RMS, (and any sampling rate).  
The file read is followed by a high-pass filter {[hpfB hpfA] = ellip(3,.1,30,40*1.22/(Fs/2),'high'); } in [loadwavfile;].  This removes infrasonics from recordings which might bias low-frequency channel gains, or level estimations.  The linear-phase filter is flat above 50 Hz, and -55 dB below 20 Hz.

The software then corrects the RMS to [ipfiledigrms], taking into account the gaps between sounds (ignoring them).  This is presumed to be equivalent to a 65 dB input level. If a lower equivalent input level is desired then set the parameter [equiv_ipSPL] to the desired.  Before processing by the hearing aids, the signal is first changed in level by the difference between 65 and [equiv_ipSPL].  A full scale digital signal with square wave modulation is presumed to have a digital RMS of 0dB.

The automatic leveling is applied independently to every channel in a wav file EXCEPT when N=2 (stereo) in which case it generates a mono signal (mean of both signals), calculates the level of that and applies the same correction to the signal to be processed.  The use of wav files with more than two streams is intended that, after suitable packing, multiple files can be processed in one pass. 

After processing:
-----------------
Once processed, the user is prompted to enter a filename as to where to save the processed output.  A default bit depth of at least 24 bits is chosen, in case any goofs have been made in scaling.  Note that for small files, and fast computers, there can appear to be no delay between opening and being asked to save a wav file.  The dialogue box has a label on its bar describing what it is looking for (open or save).

Because of the general increase in level of a file passing through a hearing aid, the file digital calibration needs to be lowered between input and output. [opfiledigrms = -36].  Overall this means that if you want to compare processed and unprocessed versions of the same signal, you need to run the software twice, once with insertion gains set to 0 dB for all freqs, and once with the desired gain.  Provided that no other changes have been made to the software, these two files will do the job.  Currently the software is not set to save both the suitably scaled input version and its processed version at the same time.  [wavwrite] prints a warning message to the screen if clipping occure during write.  This is not of great use, so, when saving the processed file, a check is made of the headroom remaining in the file, and printed to the screen. [e.g. Requires extra   1.0dB of headroom to avoid clipping]   A negative figure here means that the file is NOT clipped, so is a useful indicator in case the digital range is not being used properly.

At end of processsing, the software also prints out an activity account for how often the limiter was active in each channel.  A diagnostic plots of insertion gain and how close it was achieved is also produced.  The gain shaping is achieved with a 6-msec FIR window, so will have some limitations of conformance at low freqs. 

Apart from figure(99), which shows the accuracty of fit between desired and achieved IG65, figure(100) is also produced which shows the effective filtering of the FIR filterbank aid.  Generation of these two figures can be suppresssed by setting two logical flags close to the top of the script [MultiChanAidSim], [DIAGNOSTIC= 1;] and [PRESCRIPT = 1;]
                          
The samplerate for running the simulation is determined by the input wav file, there is no rate conversion occurring. The output wav file is saved at the same sampling rate.                                           M.A.Stone, Jan 2015
Univ of Manchester&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
Jan 2014: When messing around with slow-acting compression, with long attack times, SLOW compression could sound bad at onsets.

I have now modified one version of the aid simulator to include an additional stage, in each channel, of a fast limiter.   This version is the one which, apart from the standard male & female voices, plus music, allows you to load and save your own "wav" files. 

The limiter on each channel does not sit as an absolute power output limiter: it tracks the channel mean, and comes into action when the signal level measured by the limiter exceeds more than N dB away from the mean as measured by the channel compressor.

The GUI does not give you full control of the limiter: you cannot change the attack time (fixed in [aid_sim] between 6 and 2 msec per channel), or its compression ratio (100:1, fixed in [dualchannel_AGC]).  However, you can change the release time (not greater than 0.5x the channel compression release time), and also the limiter threshold, N.

After pressing [Recalculate], the software prints an "activity percentage",for each limiter on the GUI, to show what fraction of the time it was active.

Finally, I have modified the GUI so that different gains can be inserted between 125 & 250 Hz.  Of course the difference between the two is limited by the length of the FIR that performs the insertion gain routine.  A separate plot of the FIR response shows its deviation from that requested.

-- 
Michael Stone

FORMERLY Senior Research Associate, Auditory Perception Group, University of Cambridge

SHORTLY Senior Research Fellow, Audiology and Deafness Group, University of Manchester and Department of Audiology, Central Manchester Hospitals NHS Foundation Trust.

Jan 24th 2014




