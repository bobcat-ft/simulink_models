-- -------------------------------------------------------------
-- 
-- File Name: SG_hdl_prj\hdlsrc\SG\DataPlane_src_DataPlane.vhd
-- Created: 2019-06-13 13:16:04
-- 
-- Generated by MATLAB 9.6 and HDL Coder 3.14
-- 
-- 
-- -------------------------------------------------------------
-- Rate and Clocking Details
-- -------------------------------------------------------------
-- Model base rate: 2.03451e-08
-- Target subsystem base rate: 2.03451e-08
-- 
-- 
-- Clock Enable  Sample Time
-- -------------------------------------------------------------
-- ce_out        2.03451e-08
-- -------------------------------------------------------------
-- 
-- 
-- Output Signal                 Clock Enable  Sample Time
-- -------------------------------------------------------------
-- Avalon_Source_Valid           ce_out        2.03451e-08
-- Avalon_Source_Data            ce_out        2.03451e-08
-- Avalon_Source_Channel         ce_out        2.03451e-08
-- Avalon_Source_Error           ce_out        2.03451e-08
-- -------------------------------------------------------------
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: DataPlane_src_DataPlane
-- Source Path: SG/DataPlane
-- Hierarchy Level: 0
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY DataPlane_src_DataPlane IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        clk_enable                        :   IN    std_logic;
        Avalon_Sink_Valid                 :   IN    std_logic;
        Avalon_Sink_Data                  :   IN    std_logic_vector(31 DOWNTO 0);  -- sfix32_En28
        Avalon_Sink_Channel               :   IN    std_logic_vector(1 DOWNTO 0);  -- ufix2
        Avalon_Sink_Error                 :   IN    std_logic_vector(1 DOWNTO 0);  -- ufix2
        Register_Control_Left_Gain        :   IN    std_logic_vector(31 DOWNTO 0);  -- sfix32_En28
        Register_Control_Right_Gain       :   IN    std_logic_vector(31 DOWNTO 0);  -- sfix32_En28
        ce_out                            :   OUT   std_logic;
        Avalon_Source_Valid               :   OUT   std_logic;
        Avalon_Source_Data                :   OUT   std_logic_vector(31 DOWNTO 0);  -- sfix32_En28
        Avalon_Source_Channel             :   OUT   std_logic_vector(1 DOWNTO 0);  -- ufix2
        Avalon_Source_Error               :   OUT   std_logic_vector(1 DOWNTO 0)  -- ufix2
        );
END DataPlane_src_DataPlane;


ARCHITECTURE rtl OF DataPlane_src_DataPlane IS

  -- Component Declarations
  COMPONENT DataPlane_src_Avalon_Data_Processing
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          Sink_Data                       :   IN    std_logic_vector(31 DOWNTO 0);  -- sfix32_En28
          Sink_Channel                    :   IN    std_logic_vector(1 DOWNTO 0);  -- ufix2
          Left_Gain                       :   IN    std_logic_vector(31 DOWNTO 0);  -- sfix32_En28
          Right_Gain                      :   IN    std_logic_vector(31 DOWNTO 0);  -- sfix32_En28
          Enable                          :   IN    std_logic;
          Source_Data                     :   OUT   std_logic_vector(31 DOWNTO 0);  -- sfix32_En28
          Source_Channel                  :   OUT   std_logic_vector(1 DOWNTO 0)  -- ufix2
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : DataPlane_src_Avalon_Data_Processing
    USE ENTITY work.DataPlane_src_Avalon_Data_Processing(rtl);

  -- Signals
  SIGNAL Avalon_Data_Processing_out1      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Avalon_Data_Processing_out2      : std_logic_vector(1 DOWNTO 0);  -- ufix2

BEGIN
  -- Control Signals that will be coming from Linux via
  -- memory mapped registers need to have names 
  -- containing the prefix "Register_Control_"
  -- 
  -- The Avalon Data Processing Block
  -- performs DSP on the left and right channels.
  -- 
  -- The Avalon Data Processing block 
  -- only executes when valid is asserted
  -- 
  -- Ignore Errors.
  -- Assuming no errors coming from the ADC and errors going to DAC will be ignored.
  -- Any Error streaming needs to be done inside Avalon Data Processing block.
  -- 
  -- Avalon streaming interface signals need to have the
  -- names containing the prefix "Avalon_" 

  u_Avalon_Data_Processing : DataPlane_src_Avalon_Data_Processing
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              Sink_Data => Avalon_Sink_Data,  -- sfix32_En28
              Sink_Channel => Avalon_Sink_Channel,  -- ufix2
              Left_Gain => Register_Control_Left_Gain,  -- sfix32_En28
              Right_Gain => Register_Control_Right_Gain,  -- sfix32_En28
              Enable => Avalon_Sink_Valid,
              Source_Data => Avalon_Data_Processing_out1,  -- sfix32_En28
              Source_Channel => Avalon_Data_Processing_out2  -- ufix2
              );

  ce_out <= clk_enable;

  Avalon_Source_Valid <= Avalon_Sink_Valid;

  Avalon_Source_Data <= Avalon_Data_Processing_out1;

  Avalon_Source_Channel <= Avalon_Data_Processing_out2;

  Avalon_Source_Error <= Avalon_Sink_Error;

END rtl;

